<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Kevin&#39;s Blog</title>
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2016-10-23T13:39:54.000Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>Hao Xi</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Warm Up Series (8) – Calling Conventions</title>
    <link href="http://yoursite.com/2012/03/28/warm-up-series-8-calling-conventions/"/>
    <id>http://yoursite.com/2012/03/28/warm-up-series-8-calling-conventions/</id>
    <published>2012-03-28T10:39:50.000Z</published>
    <updated>2016-10-23T13:39:54.000Z</updated>
    
    <content type="html"><![CDATA[<p>A &quot;calling convention&quot; is the way in which a function is called. The standard <font><font><font size="2"><em><font face="Courier New">__cdecl</font></em></font></font></font> is what has been used up until now, other common ones are <em><font size="2" face="Courier New">__stdcall</font></em>, <em><font size="2" face="Courier New">__fastcall</font></em>, and <em><font size="2" face="Courier New">__thiscall</font></em>, a less common convention used when writing hacks is <em><font size="2" face="Courier New">__declspec(naked)</font></em>.</p>
<h4 id="cdecl-is-the-default-calling-convention-on-most-C-compilers-The-properties-are-as-follows"><a href="#cdecl-is-the-default-calling-convention-on-most-C-compilers-The-properties-are-as-follows" class="headerlink" title="__cdecl is the default calling convention on most C compilers. The properties are as follows:"></a><font><font size="2"><em><font face="Courier New">__cdecl</font></em></font></font> is the default calling convention on most C compilers. The properties are as follows:</h4><ul>
<li>The caller places all the parameters on the stack*   The caller removes the parameters from the stack (often by adding the total size added to the stack pointer)  </li>
</ul>
<p><em><font size="2" face="Courier New">__stdcall</font></em> is another common calling convention. The properties are:</p>
<ul>
<li><p>The caller places all the parameters on the stack*   The called function removes the parameters from the stack, often by using the return instruction with a parameter equal to the number of parameters, &quot;ret xx&quot;  </p>
<p><pre><font size="4"></font></pre><br>The most useful part about <em><font size="2" face="Courier New">__stdcall</font></em> is that it tells a reverse engineer how many parameters are passed to any given function. In cases where no examples of the function being called may be found (possibly because it’s an exported DLL function), it is easier to check the return than to enumerate local variables.</p>
</li>
</ul>
<h4 id="fastcall-is-the-final-common-calling-convention-seen-All-implementations-of-fastcall-pass-parameters-in-registers-although-Microsoft-and-Borland-for-example-use-different-registers-Here-are-the-properties-of-Microsoft’s-fastcall-implementation"><a href="#fastcall-is-the-final-common-calling-convention-seen-All-implementations-of-fastcall-pass-parameters-in-registers-although-Microsoft-and-Borland-for-example-use-different-registers-Here-are-the-properties-of-Microsoft’s-fastcall-implementation" class="headerlink" title="__fastcall is the final common calling convention seen. All implementations of __fastcall pass parameters in registers, although Microsoft and Borland, for example, use different registers. Here are the properties of Microsoft’s __fastcall implementation:"></a><em><font size="2" face="Courier New">__fastcall</font></em> is the final common calling convention seen. All implementations of <em><font size="2" face="Courier New">__fastcall</font></em> pass parameters in registers, although Microsoft and Borland, for example, use different registers. Here are the properties of Microsoft’s <em><font size="2" face="Courier New">__fastcall</font></em> implementation:</h4><ul>
<li>First two parameters are passed in ecx and edx, respectively<em>   Third parameter and on are passed on the stack, as usual</em>   Functions clean up their own stack, if necessary</li>
</ul>
<p>Recognizing a <em><font size="2" face="Courier New">__fastcall</font></em> function is easy: look for ecx and edx being used without being initialized in a function.</p>
<p>A <em><font size="2" face="Courier New">__fastcall</font></em> with no parameters is identical to <font><font size="2"><em><font face="Courier New">__cdecl</font></em></font></font> and <em><font size="2" face="Courier New">__stdcall</font></em> with no parameters, and a <em><font size="2" face="Courier New">__fastcall</font></em> with a single parameter looks like <em><font size="2" face="Courier New">__thiscall</font></em>.</p>
<p>  <pre><font size="4"></font></pre><br>  <font size="2" face="Courier New"><font face="Verdana"></font><strong><em>thiscall</em></strong></font> is very similar to _<font size="2" face="Courier New">stdcall</font>_, except that a pointer to the class whose member is being called is passed in ecx.</p>
<ul>
<li><p>ecx is assigned a pointer to the class whose member is being called<em>   The parameters are placed on the stack, the same as <em><font size="2" face="Courier New">__stdcall</font></em></em>   The function cleans itself up, the same as <em><font size="2" face="Courier New">__stdcall</font></em></p>
<p><pre><font size="4"></font></pre><br><em><font size="2" face="Courier New">__declspec(naked)</font></em> is a Visual Studio-specific convention, can’t really be identified in assembly, since it’s identical to <font><font size="2"><em><font face="Courier New">__cdecl</font></em></font></font> once it reaches assembly. However, the special property of this convention is that the compiler will generate no code in a function. This allows the program, in a __asm{} block, to write everything from preserving registers to allocating local variables and returning. This is useful when patching a jump in the middle of code, since it prevents the function from changing registers without the programmer’s knowledge.</p>
</li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;A &amp;quot;calling convention&amp;quot; is the way in which a function is called. The standard &lt;font&gt;&lt;font&gt;&lt;font size=&quot;2&quot;&gt;&lt;em&gt;&lt;font face=&quot;Courie
    
    </summary>
    
      <category term="Basic Theory" scheme="http://yoursite.com/categories/Basic-Theory/"/>
    
      <category term="Programming" scheme="http://yoursite.com/categories/Basic-Theory/Programming/"/>
    
      <category term="Warm Up" scheme="http://yoursite.com/categories/Basic-Theory/Programming/Warm-Up/"/>
    
    
      <category term="C#" scheme="http://yoursite.com/tags/C/"/>
    
  </entry>
  
  <entry>
    <title>Warm Up Series (7) – Keywords used in C++</title>
    <link href="http://yoursite.com/2012/03/28/warm-up-series-7-keywords-used-in-c/"/>
    <id>http://yoursite.com/2012/03/28/warm-up-series-7-keywords-used-in-c/</id>
    <published>2012-03-28T10:16:37.000Z</published>
    <updated>2016-10-23T13:39:54.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="1-Storage-Classes"><a href="#1-Storage-Classes" class="headerlink" title="1. Storage Classes"></a><strong>1. Storage Classes</strong></h3><ul>
<li>Storage class specifiers tell compiler the duration and visibility of the variables or objects declared, as well as, where the variables or objects should be stored.    </li>
<li>In C / C++ there are 4 different storage classes available: <em>automatic, external, static and register</em>.</li>
</ul>
<p><strong><em>Automatic Variable - auto</em></strong>     </p>
<ul>
<li>Local variables are variables declared within a function or blocks (after the opening brace, { of the block). Local variables are automatic by default. This means that they come to existence when the function in which it is declared is invoked and disappears when the function ends.     </li>
<li>Automatic variables are declared by using the keyword <em>auto</em>. But since the variables declared in functions are automatic by default, this keyword may be dropped in the declaration as you found in many source codes.     </li>
<li>The same variable names may be declared and used in different functions, but they are only known in the functions in which they are declared. This means, there is no confusion even if the same variables names are declared and used in different functions.     </li>
<li><p>Examples if we want explicitly declare the automatic type:</p>
<blockquote>
<font face="Courier New"><em>auto int x, y, z = 30;<br>auto char firstname;</em></font>  
</blockquote>
</li>
<li><p>Same as:</p>
<blockquote>
<font face="Courier New"><em>int x, y, z = 30;<br>char firstname;</em></font>  

</blockquote>
</li>
</ul>
<p><em><font face="Courier New"></font></em></p>
<p><strong><em>External Variable - extern</em></strong>     </p>
<ul>
<li>External variables are variables that are recognized globally, rather than locally. In other words, once declared, the variable can be used in any line of codes throughout the rest of the program.     </li>
<li>A variable defined outside a function is external. An external variable can also be declared within the function that uses it by using the keyword extern hence it can be accessed by other code in other files.     </li>
<li><p>Program segment example:</p>
<blockquote>
<font face="Courier New"><em>int value1;<br>char name;<br>double value2;<br>//three externally defined variables<br>main()<br>{<br>&#160;&#160;&#160; extern int value1;<br>&#160;&#160;&#160; extern char name;<br>&#160;&#160;&#160; extern double value2;<br>&#160;&#160;&#160; //three externally defined variables<br>&#160;&#160;&#160; //can be accessed from outside of this main()<br>&#160;&#160;&#160; extern value3;<br>&#160;&#160;&#160; //can be accessed from outside of this main()<br>&#160;&#160;&#160; …<br>}</em></font>  
</blockquote>
</li>
<li><p>Note that the group of extern declarations may be omitted entirely if the original definition occurs in the same file and before the function that uses them.    </p>
</li>
<li>Therefore in the above example, the three extern declarations may be dropped. However, including the extern keyword explicitly will allow the function to use external variable even if it is defined later in a file or even in a different file provided both files will be compiled and linked together.</li>
</ul>
<p><strong><em>Static Variable - static</em></strong>     </p>
<ul>
<li>In a single file program, static variables are defined within individual functions that they are local to the function in which they are defined. Static variables are local variables that retain their values throughout the lifetime of the program. In other words, their same (or the latest) values are still available when the function is re-invoked later.     </li>
<li>Their values can be utilized within the function in the same manner as other variables, but they cannot be accessed from outside of their defined function.     </li>
<li>The static has internal linkage (that is not visible from outside) except for the static members of a class that have external linkage. </li>
</ul>
<p><strong><em>Register Variable - register</em></strong>     </p>
<ul>
<li>The above three classes of variables are normally stored in computer memory. Register variables however are stored in the processor registers, where they can be accessed and manipulated faster. Register variables, like automatic variables, are local to the function in which they are declared.     </li>
<li>Defining certain variables to be register variables does not, however, guarantee that they will actually be treated as register variables.     </li>
<li>Registers will be assigned to these variables by compiler so long as they are available. If a register declaration cannot be fulfilled, the variables will be treated as automatic variables. So, it is not a mandatory for the compiler to fulfill the register variables.     </li>
<li>Usually, only register variables are assigned the register storage class. If all things equal, a program that makes use of register variables is likely to run faster than an identical program that uses just automatic variables.</li>
</ul>
<h3 id="2-Constant-Values-const"><a href="#2-Constant-Values-const" class="headerlink" title="2. Constant Values - const"></a><strong>2. Constant Values - const</strong></h3><ul>
<li>In the most basic form, the <em>const</em> keyword specifies that a variable’s value is constant and tells the compiler to prevent the programmer from modifying it.     </li>
<li><p>Example of the pointer declaration using <em>const</em> is shown below:</p>
<blockquote>
<font face="Courier New"><em>//Pointer to constant int<br>int const <em>PtrVar;<br>//Pointer to constant int<br>int const (</em>PtrVar);<br>//Constant pointer to int<br>int <em>const PtrVar;<br>//Constant pointer to int<br>int (</em>const PtrVar);</em></font>  
</blockquote>
</li>
<li><p>Program example:</p>
<blockquote>
<font face="Courier New"><em>//const variable<br>#include &lt;iostream&gt;<br>#include &lt;stdlib.h&gt;<br>int main()<br>{<br>&#160;&#160;&#160; //p = 10 is a constant value, cannot be modified<br>&#160;&#160;&#160; //during the program execution…<br>&#160;&#160;&#160; const int p = 10;<br>&#160;&#160;&#160; cout&lt;&lt;&quot;q = p + 20 = &quot;&lt;&lt;(p + 20)&lt;&lt;&quot; where, p = 10&quot;&lt;&lt;endl;<br>&#160;&#160;&#160; //The following code should generate error, because<br>&#160;&#160;&#160; //we try to modify the constant value…<br>&#160;&#160;&#160; //uncomment, recompile notice the error…<br>&#160;&#160;&#160; //p = 15;<br>&#160;&#160;&#160; //–p;<br>&#160;&#160;&#160; system(&quot;pause&quot;);<br>}</em></font>  
</blockquote>
</li>
<li><p>We can use the <em>const</em> keyword instead of the #define preprocessor directive to define constant values.     </p>
</li>
<li>In C, constant values default to external linkage, so they can appear only in source files but in C++, constant values default to internal linkage, which allows them to appear in header files.     </li>
<li>The <em>const</em> also can be used in pointer declaration. A pointer to a variable declared as <em>const</em> can be assigned only to a pointer that is also declared as <em>const</em>.     </li>
<li><p>Another program segment examples:</p>
<blockquote>
<font face="Courier New"><em>//a const pointer to a variable…<br>#include &lt;iostream&gt;<br>#include &lt;stdlib.h&gt;<br>int main()<br>{<br>&#160;&#160;&#160; //declare the pointers and let they point<br>&#160;&#160;&#160; //to something…<br>&#160;&#160;&#160; //non const pointer…<br>&#160;&#160;&#160; char <em>BuffOne = NULL, </em>BuffTwo = NULL;<br>&#160;&#160;&#160; //a constant pointer…<br>&#160;&#160;&#160; //assign the BuffOne pointer to PtrOne pointer<br>&#160;&#160;&#160; char <em>const PtrOne = BuffOne;<br>&#160;&#160;&#160; //Let it point to some data…<br>&#160;&#160;&#160; </em>PtrOne = ‘z’;<br>&#160;&#160;&#160; cout&lt;&lt;&quot;The value pointed by constant pointer is&quot;&lt;&lt;*PtrOne&lt;&lt;endl;<br>&#160;&#160;&#160; //The following code will generate error, because we try to assign non const pointer to const pointer…<br>&#160;&#160;&#160; //PtrOne = BuffTwo;<br>&#160;&#160;&#160; system(&quot;pause&quot;);<br>&#160;&#160;&#160; return 0;<br>}</em></font>  &gt; <font face="Courier New"><em>//a pointer to a const variable…<br>#include &lt;iostream&gt;<br>#include &lt;stdlib.h&gt;<br>int main()<br>{<br>&#160;&#160;&#160; const char <em>BuffOne = &quot;Testing&quot;;<br>&#160;&#160;&#160; cout&lt;&lt;&quot;The data pointed by BuffTwo is &quot;&lt;&lt;BuffOne&lt;&lt;endl;<br>&#160;&#160;&#160; //The const pointer BuffOne assigned to the<br>&#160;&#160;&#160; //const pointer ThePtr is OK…<br>&#160;&#160;&#160; const char </em>ThePtr = BuffOne;<br>&#160;&#160;&#160; cout&lt;&lt;&quot;The data pointed by ThePtr is &quot;&lt;&lt;ThePtr&lt;&lt;endl;<br>&#160;&#160;&#160; //The following code will generate an error<br>&#160;&#160;&#160; //cannot modify the const….<br>&#160;&#160;&#160; //*ThePtr = ‘z’;<br>&#160;&#160;&#160; system(&quot;pause&quot;);<br>&#160;&#160;&#160; return 0;<br>}           
</em></font>  
</blockquote>
</li>
<li><p>The const declaration also normally used in the definition of a function’s arguments, to indicate it would not change them as shown below making the code clearer and to avoid error. <font face="Courier New"><em>int strlen(const char []); </em></font></p>
</li>
</ul>
<h3 id="3-Constant-Member-Function"><a href="#3-Constant-Member-Function" class="headerlink" title="3. Constant Member Function"></a><strong>3. Constant Member Function</strong></h3><ul>
<li>When declaring a member function with the <em>const</em> keyword, this specifies that it is a read only function that does not modify the object (notice the differences between variable versus object) for which it is called.     </li>
<li>A constant member function cannot modify any data members or call any member functions that are not constant.     </li>
<li>Implicitly, the <em>const</em> has set the ‘can’t modify’ *this pointer. This can be changed by using the mutable (preferred) or _const<em>cast</em> operator.     </li>
<li>Pointer to constant data can be used as function parameters to prevent the function from modifying a parameter passed through a pointer.     </li>
<li>Place the <em>const</em> keyword after the closing parenthesis of the argument list.     </li>
<li><em>const</em> keyword is required in both the declaration and the definition.     </li>
<li><p>Program example:</p>
<blockquote>
<font face="Courier New"><em>//constant member function<br>#include &lt;iostream&gt;<br>#include &lt;stdlib.h&gt;<br>//——–Class declaration part————<br>class Date<br>{<br>&#160;&#160;&#160; int month;<br>public:<br>&#160;&#160;&#160; //we would test the month only…<br>&#160;&#160;&#160; Date (int mnt, int dy, int yr);<br>&#160;&#160;&#160; //A write function, so can’t be const<br>&#160;&#160;&#160; void SetMonth(int mnt);<br>&#160;&#160;&#160; //A read only function declaration<br>&#160;&#160;&#160; int GetMonth() const;<br>}; </em></font><br>   <font face="Courier New"><em><br><br>//——–Class implementation part———<br>Date::Date(int,int,int)<br>{<br>}<br>void Date::SetMonth(int mnt)<br>{<br>&#160;&#160;&#160; //Modify the non const member variable data<br>&#160;&#160;&#160; month = mnt;<br>}<br>//A read only function implementation<br>int Date::GetMonth() const<br>{<br>&#160;&#160;&#160; //Does not modify anything<br>&#160;&#160;&#160; return month;<br>}<br><br>//——-main program————<br>void main()<br>{<br>&#160;&#160;&#160; Date TheDate(7,4,2004);<br>&#160;&#160;&#160; //non const member function, OK<br>&#160;&#160;&#160; TheDate.SetMonth(11);<br>&#160;&#160;&#160; cout&lt;&lt;&quot;Month of the sample date is &quot;&lt;&lt;TheDate.GetMonth()&lt;&lt;endl;<br>&#160;&#160;&#160; //another dummy const object…<br>&#160;&#160;&#160; const Date BirthDate(7,4,1971);<br>&#160;&#160;&#160; //Then try to modify the const object, NOT OK<br>&#160;&#160;&#160; //BirthDate.SetMonth(5);<br>&#160;&#160;&#160; //const member function sending message…<br>&#160;&#160;&#160; BirthDate.GetMonth();<br>&#160;&#160;&#160; //So, the following shouldn’t have the output data…<br>&#160;&#160;&#160; cout&lt;&lt;&quot;Another silly call, the month is &quot;&lt;&lt;BirthDate.GetMonth()&lt;&lt;endl;<br>&#160;&#160;&#160; system(&quot;pause&quot;);<br>}
     </em></font>  
</blockquote>
</li>
<li><p>The const-ness of the function can be disabled by using the <em>mutable</em> keyword.</p>
</li>
</ul>
<h3 id="4-Keyword-volatile"><a href="#4-Keyword-volatile" class="headerlink" title="4. Keyword - volatile"></a><strong>4. Keyword - volatile</strong></h3><ul>
<li>It is a type qualifier used to declare an object or variable value that can be modified by other than the statement in the source codes itself, such as interrupt service routine and memory-mapped I/O port or concurrent thread execution.    </li>
<li>Keep in mind that although we have to concern about these volatile variable or object, most of the compilers nowadays have their own implementation how to handle this situation mainly for Win32 applications.     </li>
<li>For example if you want to create multithreaded program, there are C++ compiler or project settings for multithreaded program. You have to check your compiler documentation.     </li>
<li>When declaring an object to be volatile, we tell the compiler not to make any assumptions concerning the value of the object while evaluating expressions in which it occurs because the value could change at any moment.     </li>
<li>When a name is declared as volatile, the compiler reloads the value from memory each time it is accessed by the program. Volatile codes will not be optimized by compiler to make sure that the value read at any moment is accurate.     </li>
<li>Without optimization, for example permitting the redundant reads, the volatile may have no effect.     </li>
<li>The keyword volatile is used before or after the data type declaration. They cannot appear after the first comma in a multiple variable declaration.&#160; </li>
<li>When volatile is applied to the struct or union, the entire contents of the struct or union become volatile however we can also apply the volatile to the members of struct or union individually.     </li>
<li>volatile also applied to classes and their member functions.</li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;1-Storage-Classes&quot;&gt;&lt;a href=&quot;#1-Storage-Classes&quot; class=&quot;headerlink&quot; title=&quot;1. Storage Classes&quot;&gt;&lt;/a&gt;&lt;strong&gt;1. Storage Classes&lt;/strong
    
    </summary>
    
      <category term="Basic Theory" scheme="http://yoursite.com/categories/Basic-Theory/"/>
    
      <category term="Programming" scheme="http://yoursite.com/categories/Basic-Theory/Programming/"/>
    
      <category term="Warm Up" scheme="http://yoursite.com/categories/Basic-Theory/Programming/Warm-Up/"/>
    
    
      <category term="C#" scheme="http://yoursite.com/tags/C/"/>
    
  </entry>
  
  <entry>
    <title>Preparation Tips for a Behavioral Interview</title>
    <link href="http://yoursite.com/2012/03/12/preparation-tips-for-a-behavioral-interview/"/>
    <id>http://yoursite.com/2012/03/12/preparation-tips-for-a-behavioral-interview/</id>
    <published>2012-03-12T06:49:41.000Z</published>
    <updated>2016-10-23T13:39:54.000Z</updated>
    
    <content type="html"><![CDATA[<p>(From: <a href="http://jobsearchtech.about.com/od/gettingthejob/a/Interviewing_2.htm" target="_blank" rel="external">http://jobsearchtech.about.com/od/gettingthejob/a/Interviewing_2.htm</a>)</p>
<p>Preparing for a behavior based interview can be daunting. Here are some tips to get started:</p>
<ul>
<li><strong>Be familiar with the job</strong> for which you’re being interviewed. Read the advertisement or job description to identify which personal attributes and behaviors are likely to be key success factors for the role. For Client interviews it is advised that you research the company’s website and any external information about them from business directories etc.<br>Make a note of two or three examples for each personal attribute that will best illustrate your suitability - you may want to bring these into the interview with you as prompts. Remember that different companies and industries may require different personal attributes, even for the same position. For example, ‘self-managing’ can mean very different things to different companies.</li>
<li><strong>Be able to draw from a variety of experiences</strong> that demonstrate your skills and abilities. A good story can also combine work experience with a non-work experience (shows you can use the skill in a variety of settings). Examples may be from your work experience, your personal life or some social or other situation. Of course a unique work situation story (unless otherwise specifically requested) should take priority. Be as open, expressive and succinct as possible about each experience.</li>
<li><strong>Let others help you out </strong>- use examples of quotes from bosses or customers, i.e., &quot;My boss gave me a good performance review, they liked the way I stepped in to get the job done without being told to.&quot; This demonstrates your willingness to accept contribution, your flexibility and teamwork skills.</li>
<li><strong>Think ‘STAR’ - Situation or Task, Action and Result.</strong> There are several variations of this acronym in the recruiting industry, but all of them are intended to provide structure and focus to your answers. When asked about a type of situation, the interviewer is looking at how you responded to it by via a specific example. Using the STAR model you would break your answer into the three segments of; description of the task, then the action you took, and the final measurable result.<br>This makes it easier for the interviewer to visualize and record your specific behavioral responses to specific events and so gain the best impression of your potential future performance. Prepare at least one STAR response for each personal attribute you may be questioned on. Make sure you don’t use the same example for all the attributes.</li>
<li><strong>Use recent examples.</strong> As you will be probed for detail around the situation, it is better to use events in the last 12-18 months as the detail will be clearer in your mind. Be specific as possible about your contribution and the quantitative results achieved. Specific absolute or relative (%) gains in areas such as cost or time savings will give you the interviewer a clearer picture of your abilities. If specific measurable results don’t apply to your example, you might explain how it streamlined processes, empowered others or resolved communication or productivity issues.</li>
<li><strong>Practice telling your stories</strong> until they are vivid and concise, one to three minutes long. An interview can be likened to a marketing activity, where you are the brand. You will only get an interview because your resume and past roles suggest that you have the appropriate technical skills set (your attributes). Often what separates you from the other candidates at the interview stage is the interviewer’s belief in how you will fit into the company’s culture and specific IT team (your personal benefits).<br>Remember, you are selling your technical AND personal skills. Being able to communicate your adaptability and relatedness at an interview is essential to becoming the leading candidate. This ‘story telling practice’ is an important preparation tool to assist you in creating a natural flow to your stories so that the interviewer can focus on your potential benefit to the client.</li>
<li><strong>Ask to come back to the question.</strong> If you are stuck for an answer to a particular question, it is reasonable to ask the interviewer if you may move on to the next one and you’ll come back it.</li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;(From: &lt;a href=&quot;http://jobsearchtech.about.com/od/gettingthejob/a/Interviewing_2.htm&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://jobsearchtech
    
    </summary>
    
      <category term="Interview" scheme="http://yoursite.com/categories/Interview/"/>
    
    
      <category term="Interview" scheme="http://yoursite.com/tags/Interview/"/>
    
  </entry>
  
  <entry>
    <title>Warm Up Series (6) – Knowledge of Heap in Windows</title>
    <link href="http://yoursite.com/2012/03/09/warm-up-series-6-knowledge-of-heap-in-windows/"/>
    <id>http://yoursite.com/2012/03/09/warm-up-series-6-knowledge-of-heap-in-windows/</id>
    <published>2012-03-09T11:40:45.000Z</published>
    <updated>2016-10-23T13:39:54.000Z</updated>
    
    <content type="html"><![CDATA[<font size="2"><strong>1. 堆内存管理基础——转自《</strong></font><a href="http://book.51cto.com/art/200812/100341.htm" target="_blank" rel="external"><strong>软件调试</strong></a><strong>/第23章<font size="2"></font><font size="2">》</font></strong><br><br><font size="2">堆是内存管理功能向应用软件提供服务的一种方式。通过堆，内存管理器将一块较大的内存空间委托给堆管理器来管理。堆管理器将大块的内存分割成不同大小的很多个小块来满足应用程序的需要。应用程序的内存需求通常是频繁而且零散的，如果把这些请求都直接传递给位于内核中的内存管理器，那么必然影响系统的性能。有了堆管理器，内存管理器就只需要处理大规模的分配请求。这样做不仅可以减轻内存管理器的负担，也可以大大缩短应用程序申请内存所需的时间，提高程序的性能。下图画出了Windows系统中实现的多级内存分配体系。</font>

<p><a href="http://new.51cto.com/files/uploadimg/20081222/134510209.jpg" target="_blank" rel="external"><font size="2"><img src="http://images.51cto.com/files/uploadimg/20081222/134510209.jpg" alt=""></font></a><font size="2"></font></p>
<font size="2">图中，我们使用不同类型的箭头来代表不同层次的内存分配方法。具体来说，<u>用户态的代码应该调用虚拟内存分配API来从内存管理器分配内存</u>。虚拟内存API包括VirtualAlloc、VirtualFree、VirtualLock、VirtualUnlock、VirtualProtect、VirtualQuery等。内核态的代码可以调用以上API所对应的内核函数，比如NtAllocateVirtualMemory、NtProtectVirtualMemory等。</font>

<font size="2">为了满足内核空间中的驱动程序等内核态代码的内存分配需要，Windows的内核模块中实现了一系列函数来提供内存&quot;零售&quot;服务，为了与用户空间的堆管理器相区别，我们把这些函数统称为池管理器。池管理器公开了一组驱动程序接口（DDI）以向外提供服务，包括ExAllocatePool、ExAllocatePoolWithTag、ExFreePool等。</font>

<font size="2">与内核模块中的池管理器类似，在NTDLL.DLL中实现了一个通用的堆管理器，目的为用户态的应用程序提供内存服务，通常被称为<u>Win32堆管理器</u>。SDK中公开了一组API来访问Win32堆管理器的功能，比如HeapAlloc、HeapFree等。</font>

<font size="2">为了支持C的内存分配函数和C++的内存分配运算符，C运行库会创建一个专门的堆供这些函数使用，通常称为<u>CRT堆</u>。根据分配堆块的方式不同，CRT堆有三种工作模式：SBH(Small Block Heap)模式、旧SBH模式和系统模式(System Heap)，当创建CRT堆时，会选择其中的一种。对于前两种模式，CRT堆会使用<u>虚拟内存分配API</u>从内存管理器批发大的内存块过来，然后分割成小的堆块满足应用程序的需要。对于系统模式，CRT堆只是把堆块分配请求转发给它所基于的Win32堆，因此处于系统模式的CRT堆只是对Win32堆的一种简单封装，在原来的基础上又增加了一些附加的功能。</font>

<font size="2">应用程序开发商也可以实现自己的堆管理器，只要通过虚拟内存API从内存管理器&quot;批发&quot;内存块过来后提供给自己的客户代码使用，例如.NET里面的托管堆。</font>

<font size="2"></font>

<font size="2"></font>

<p><font size="2"><strong>2. CRT堆的分配使用——转自《<a href="http://clkrst.itpub.net/post/137/41162" target="_blank" rel="external">在一个模块中分配的内存在另外一个模块释放？</a></strong></font><strong><font size="2">》</font></strong></p>
<p>在Linux下，每个进程只有一个堆，在任何一个动态库模块中通过new或者malloc来分配内存的时候都是从这个唯一的堆中分配的，那么自然你在其它随便什么地方都可以释放。但是在Win下面，问题变得复杂了：<br><strong>1. </strong>Windows允许一个进程中有多个堆，那么这样就需要指明一块内存要在哪个堆上分配，Win32的HeapAlloc函数就是这样设计的，给出一个堆的句柄，给出一个大小，然后返回一个指针。每个进程都至少有一个主堆，可以通过GetProcessHeap来获得，其它的堆，可以通过GetProcessHeaps取到。同样，内存释放通过HeapFree来完成，还是需要指定一个堆。<br><strong>2. </strong>这样的设计比较灵活，但是问题在于，每次分配内存的时候就必须要显式的指定一个堆，对于CRT中的new/malloc，需要特殊处理。VC的CRT创建了一个单独的堆，叫做<strong>crtheap，它对于用户是看不见的，但是在new/malloc的实现中，都是用HeapAlloc在这个</strong>crtheap上分配的，也就是说malloc(size)基本上可以认为等同于HeapAlloc(__crtheap, size)（当然实际上CRT内部还要维护一些内存管理的数据结构，所以并不是每次malloc都必然会触发HeapAlloc），这样new/malloc就和Windows的堆机制吻合了。<br><strong>3. </strong>如果一个进程需要动态库支持，系统在加载dll的时候，在dll的启动_DllMainCRTStartup中，会创建这个CRT堆，所以理论上有多少个dll，就有多少个CRT堆。最后主进程的mainCRTStartup 中还会创建一个为主进程服务的CRT堆。（由于顺序总是先加载dll，然后才启动main进程，所以各个dll的CRT堆地址比较小，而主进程的CRT堆地址比较大，当然排在最前面的堆是每个进程的主堆。）<br><strong>4.</strong>从上面的分析中可以看出，对于CRT来说，由于每个dll都有自己的堆，所以每个dll通过new/malloc分配的内存都是在自己dll内部的那个堆上用HeapAlloc来分配的，而如果你想在其它模块中释放，那么在释放的时候HeapFree就会失败了，因为各个模块的CRT堆是不一样的。</p>
<p>在Windows下，一个进程存在着多个堆，除了一个主堆外，还有很多的CRT堆，用来处理通过C/C++的运行库进行的内存操作。所以使用new/malloc来分配的内存实际上都是局部的，可以在多个dll中共享，但是却必须是谁申请谁释放。当然如果在dll内部使用HeapAlloc(GetProcessHeap(), size)来分配的内存是可以在dll以外释放的，因为这时内存分配在全局的主堆上，而不是分配在dll自己的CRT堆上。</p>
<p>&#160;</p>
<p><strong>3. CRT堆的调试使用——转自《深入解析Win32 CRT 调试堆 (<a href="http://www.cppblog.com/legendlee/archive/2009/10/20/99054.html" target="_blank" rel="external">上</a>) (<a href="http://www.cppblog.com/legendlee/archive/2009/10/23/99278.html" target="_blank" rel="external">下</a>)》</strong></p>
<p>调试版本的CRT堆更关注对于堆错误的定位, 它通过以下三种手法实现以上诉求:</p>
<p><strong>1. </strong>用守护内存块包围新分配的内存, 这样就可以侦测到缓冲过载和欠载. 所谓守护内存块就是一系列被填充为0xfd的内存字节, 又被称为”无主之地”. 0xfd意为Fences(译注: 栅栏)</p>
<p><strong>2. </strong>用一个特殊的值(0xcd)初始化新申请的内存. 0xcd意为Clean Memory.</p>
<p><strong>3. </strong>同时用一个特殊的值填充(0xdd) 被释放的内存. 0xdd意为Dead Memory.</p>
<p>CDH(CRT Debug Heap)将大部分工作交由堆函数HeapAlloc()和HeapFree()完成, 每进程4Gb的虚地址空间的分块和管理是由Kernel32.dl中的Win32堆自己完成的. </p>
<p>当你调用malloc(8)分配8字节的内存时, CDH会调用HeapAlloc()申请48字节的内存, 额外的40字节被用来存放内存块的额外信息—-比如调用malloc()的源文件和行号, 以及指向上/下一个内存块的指针.在后面的列表中,<u> 所有的CRT调试信息均被标记为红色</u>.</p>
<p>HeaoAlloc()本身也需要记录簿记(bookkeeping)信息, 事实上,一个HeaoAlloc()调用会在进程地址空间里保留80字节内存, 其中8字节的簿记信息出现在真正使用的40字节之前, 剩下的32字节在真正使用的40字节之后.在下面的列表里, <u>Win32堆簿记信息被标记为灰色</u>.</p>
<p>CRT取得40字节的内存块后会填入自己的簿记信息. 头两个WORD用来存放直向”前一个”和”后一个”CRT堆内存块的指针. 这里的前后不能从字面去理解, 因为所谓指向”后一个”内存块的指针事实上指向的是时间顺序上紧邻本内存块之前分配的内存块, 相应的, 指向“前一个”的指针指向的是下一个将被分配的内存块. 之所以这样命名, 是因为内存块链表是从最后分配的内存块开始的. 同时, 为了使堆检查代码能遍历每个内存块, CDH还保存着第一块和最后一块内存的地址(_pFirstBlock和_pLastBlock).</p>
<p>如果调用malloc()代码所在的文件名和行号是已知的, 它们将被被保存在第三第四个字中, 紧接着下面一个字表示本块申请了多少字节内存. 再下面一个字是类型域, 等于1表示new或malloc()分配的普通块, 2表示CRT分配的供内部使用的块. 0表示已经被用户释放但是还未归还给Win32堆的块通常来说, 新申请的内存块本位置等于1. 最后一块是计数器, 每执行一次内存分配计数器加1.</p>
<p>通过malloc()得到的8字节内存无用内存包围. 这些空内存被填充为0xfd, 当整个内存块被free()时, CRT会检查这些空内存存放的值是否仍然是0xfd. 如果值改变了, 说明程序有错误存在. 真正被使用的8字节内存被初始化为0xcd, 如果你的对象中间出现连续的0xcd, 那么你一定是忘记了初始化一些东西.</p>
<p>当你调用free()释放上述8字节的内存时, CRT首先会用0xdddddddd填充全部48字节的内存块(包括簿记信息), 这样就可以通过检查这块内存的值获知这块内存在释放后是否又被写入过(比如使用野指针写内存).</p>
<p>接下来, CRT通常会调用HeapFree()函数将本内存块归还给win32堆, win32堆会将本内存块填充为0xFEEEFEEE. 注意, CRT并不维护”空闲块列表”, 这些都由HeapFree()来做(译注: 也就是说空闲列表是由Win32 堆来维护的). 但是, 你可以让CRT不把被释放的内存块归还给Win32堆 (译注: 也就是不调用HeapFree()), 方法是将_CRTDBG_DELAY_FREE_MEM_DF传递给_CrtSetDbgFlag(), 这在你跟踪野指针错误时将会派上用场, 在这种情况下, 内存不会被复用, 所以释放过的内存的值必然是0xdddddddd, 除非你对释放过的内存执行了写操作. 你可以调用_CrtCheckMemory()检查释放过的内存是否被篡改.(译注: 这个函数缺省情况下需要显式调用, 你也可以将_CRTDBG_CHECK_ALWAYS_DF传递给_CrtSetDbgFlag(), 这样每次分配和释放内存时都会调用_CrtCheckMemory())</p>
<p><strong>一个例子:</strong></p>
<p>下面是调用p = malloc(8)然后调用free(p)的过程中内存的变化表, malloc(8)返回的指针为0x00321000, 我列出了偏移后的内存值, 以便你找到你自己分配的内存信息.<br> <a href="http://kevinxi.files.wordpress.com/2012/03/image4.png" target="_blank" rel="external"><img src="http://kevinxi.files.wordpress.com/2012/03/image_thumb4.png" alt="image" title="image"></a></p>
]]></content>
    
    <summary type="html">
    
      &lt;font size=&quot;2&quot;&gt;&lt;strong&gt;1. 堆内存管理基础——转自《&lt;/strong&gt;&lt;/font&gt;&lt;a href=&quot;http://book.51cto.com/art/200812/100341.htm&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;&lt;
    
    </summary>
    
      <category term="Programming" scheme="http://yoursite.com/categories/Programming/"/>
    
      <category term="Warm Up" scheme="http://yoursite.com/categories/Programming/Warm-Up/"/>
    
    
      <category term="Windows" scheme="http://yoursite.com/tags/Windows/"/>
    
      <category term="Heap" scheme="http://yoursite.com/tags/Heap/"/>
    
      <category term="Memory" scheme="http://yoursite.com/tags/Memory/"/>
    
  </entry>
  
  <entry>
    <title>Warm Up Series (5) – Template in Cpp and CSharp</title>
    <link href="http://yoursite.com/2012/03/08/warm-up-series-5-template-in-cpp-and-csharp/"/>
    <id>http://yoursite.com/2012/03/08/warm-up-series-5-template-in-cpp-and-csharp/</id>
    <published>2012-03-08T11:46:44.000Z</published>
    <updated>2016-10-23T13:39:54.000Z</updated>
    
    <content type="html"><![CDATA[<p><strong><font size="2" face="Verdana">1. C++模板的介绍</font></strong></p>
<font size="2" face="Verdana">C++模板主要包括类（包括class和union）模板以及函数模板。编译器在编译期间会对模板进行特化，根据不同的模板实参为每个泛型类型实例化一个强类型。M个泛型类型，N个模板实参，编译后将产生M x N个强类型。</font>

<font size="2" face="Verdana">C++模板的实例化是迟钝的，即只有在模板被实例化并使用时，才会真正的创建相关的特化类、特化函数。C++泛型的优点是灵活、高性能、易扩展；缺点是容易导致代码膨胀，过分特化会出现很复杂的函数名，给调试造成了不便；另外，C++模板在不同物理实现之间不能共享实例化的强类型（如组件A和组件B不能共享std::vector&lt;int&gt;）。</font>

<p><strong><font size="2" face="Verdana">2. C++模板的使用</font></strong><br>  <div style="border-bottom:silver 1px solid;text-align:left;border-left:silver 1px solid;line-height:12pt;background-color:#f4f4f4;width:97.5%;font-family:&#039;direction:ltr;max-height:200px;font-size:8pt;overflow:auto;border-top:silver 1px solid;cursor:text;border-right:silver 1px solid;margin:20px 0 10px;padding:4px;" id="codeSnippetWrapper">   <div style="text-align:left;line-height:12pt;background-color:#f4f4f4;width:100%;font-family:&#039;direction:ltr;color:black;font-size:8pt;overflow:visible;border-style:none;padding:0;" id="codeSnippet">     <pre style="text-align:left;line-height:12pt;background-color:white;width:100%;font-family:&#039;direction:ltr;color:black;font-size:8pt;overflow:visible;border-style:none;margin:0;padding:0;"><span style="color:#606060;" id="lnum1">   1:</span> <span style="color:#008000;">//template function.</span></pre><br><!--CRLF--></div></div></p>
<pre><code>&lt;pre style=&quot;text-align:left;line-height:12pt;background-color:#f4f4f4;width:100%;font-family:&amp;#039;direction:ltr;color:black;font-size:8pt;overflow:visible;border-style:none;margin:0;padding:0;&quot;&gt;&lt;span style=&quot;color:#606060;&quot; id=&quot;lnum2&quot;&gt;   2:&lt;/span&gt; &lt;span style=&quot;color:#0000ff;&quot;&gt;template&lt;/span&gt;&amp;lt;&lt;span style=&quot;color:#0000ff;&quot;&gt;class&lt;/span&gt; T&amp;gt;&lt;/pre&gt;
</code></pre><!--CRLF-->
<pre><code>&lt;pre style=&quot;text-align:left;line-height:12pt;background-color:white;width:100%;font-family:&amp;#039;direction:ltr;color:black;font-size:8pt;overflow:visible;border-style:none;margin:0;padding:0;&quot;&gt;&lt;span style=&quot;color:#606060;&quot; id=&quot;lnum3&quot;&gt;   3:&lt;/span&gt; &lt;span style=&quot;color:#0000ff;&quot;&gt;void&lt;/span&gt; swap(T &amp;amp;a, T &amp;amp;b)&lt;/pre&gt;
</code></pre><!--CRLF-->
<pre><code>&lt;pre style=&quot;text-align:left;line-height:12pt;background-color:#f4f4f4;width:100%;font-family:&amp;#039;direction:ltr;color:black;font-size:8pt;overflow:visible;border-style:none;margin:0;padding:0;&quot;&gt;&lt;span style=&quot;color:#606060;&quot; id=&quot;lnum4&quot;&gt;   4:&lt;/span&gt; {&lt;/pre&gt;
</code></pre><!--CRLF-->
<pre><code>&lt;pre style=&quot;text-align:left;line-height:12pt;background-color:white;width:100%;font-family:&amp;#039;direction:ltr;color:black;font-size:8pt;overflow:visible;border-style:none;margin:0;padding:0;&quot;&gt;&lt;span style=&quot;color:#606060;&quot; id=&quot;lnum5&quot;&gt;   5:&lt;/span&gt;     T temp = a;&lt;/pre&gt;
</code></pre><!--CRLF-->
<pre><code>&lt;pre style=&quot;text-align:left;line-height:12pt;background-color:#f4f4f4;width:100%;font-family:&amp;#039;direction:ltr;color:black;font-size:8pt;overflow:visible;border-style:none;margin:0;padding:0;&quot;&gt;&lt;span style=&quot;color:#606060;&quot; id=&quot;lnum6&quot;&gt;   6:&lt;/span&gt;     a = b;&lt;/pre&gt;
</code></pre><!--CRLF-->
<pre><code>&lt;pre style=&quot;text-align:left;line-height:12pt;background-color:white;width:100%;font-family:&amp;#039;direction:ltr;color:black;font-size:8pt;overflow:visible;border-style:none;margin:0;padding:0;&quot;&gt;&lt;span style=&quot;color:#606060;&quot; id=&quot;lnum7&quot;&gt;   7:&lt;/span&gt;     b = temp;&lt;/pre&gt;
</code></pre><!--CRLF-->
<pre><code>&lt;pre style=&quot;text-align:left;line-height:12pt;background-color:#f4f4f4;width:100%;font-family:&amp;#039;direction:ltr;color:black;font-size:8pt;overflow:visible;border-style:none;margin:0;padding:0;&quot;&gt;&lt;span style=&quot;color:#606060;&quot; id=&quot;lnum8&quot;&gt;   8:&lt;/span&gt; };&lt;/pre&gt;
</code></pre><!--CRLF-->
<pre><code>&lt;pre style=&quot;text-align:left;line-height:12pt;background-color:white;width:100%;font-family:&amp;#039;direction:ltr;color:black;font-size:8pt;overflow:visible;border-style:none;margin:0;padding:0;&quot;&gt;&lt;span style=&quot;color:#606060;&quot; id=&quot;lnum9&quot;&gt;   9:&lt;/span&gt;&amp;#160; &lt;/pre&gt;
</code></pre><!--CRLF-->
<pre><code>&lt;pre style=&quot;text-align:left;line-height:12pt;background-color:#f4f4f4;width:100%;font-family:&amp;#039;direction:ltr;color:black;font-size:8pt;overflow:visible;border-style:none;margin:0;padding:0;&quot;&gt;&lt;span style=&quot;color:#606060;&quot; id=&quot;lnum10&quot;&gt;  10:&lt;/span&gt; &lt;span style=&quot;color:#008000;&quot;&gt;//template class&lt;/span&gt;&lt;/pre&gt;
</code></pre><!--CRLF-->
<pre><code>&lt;pre style=&quot;text-align:left;line-height:12pt;background-color:white;width:100%;font-family:&amp;#039;direction:ltr;color:black;font-size:8pt;overflow:visible;border-style:none;margin:0;padding:0;&quot;&gt;&lt;span style=&quot;color:#606060;&quot; id=&quot;lnum11&quot;&gt;  11:&lt;/span&gt; &lt;span style=&quot;color:#0000ff;&quot;&gt;template&lt;/span&gt;&amp;lt;&lt;span style=&quot;color:#0000ff;&quot;&gt;class&lt;/span&gt; T&amp;gt;&lt;/pre&gt;
</code></pre><!--CRLF-->
<pre><code>&lt;pre style=&quot;text-align:left;line-height:12pt;background-color:#f4f4f4;width:100%;font-family:&amp;#039;direction:ltr;color:black;font-size:8pt;overflow:visible;border-style:none;margin:0;padding:0;&quot;&gt;&lt;span style=&quot;color:#606060;&quot; id=&quot;lnum12&quot;&gt;  12:&lt;/span&gt; &lt;span style=&quot;color:#0000ff;&quot;&gt;class&lt;/span&gt; Arrary&lt;/pre&gt;
</code></pre><!--CRLF-->
<pre><code>&lt;pre style=&quot;text-align:left;line-height:12pt;background-color:white;width:100%;font-family:&amp;#039;direction:ltr;color:black;font-size:8pt;overflow:visible;border-style:none;margin:0;padding:0;&quot;&gt;&lt;span style=&quot;color:#606060;&quot; id=&quot;lnum13&quot;&gt;  13:&lt;/span&gt; {&lt;/pre&gt;
</code></pre><!--CRLF-->
<pre><code>&lt;pre style=&quot;text-align:left;line-height:12pt;background-color:#f4f4f4;width:100%;font-family:&amp;#039;direction:ltr;color:black;font-size:8pt;overflow:visible;border-style:none;margin:0;padding:0;&quot;&gt;&lt;span style=&quot;color:#606060;&quot; id=&quot;lnum14&quot;&gt;  14:&lt;/span&gt; &lt;span style=&quot;color:#0000ff;&quot;&gt;private&lt;/span&gt;:&lt;/pre&gt;
</code></pre><!--CRLF-->
<pre><code>&lt;pre style=&quot;text-align:left;line-height:12pt;background-color:white;width:100%;font-family:&amp;#039;direction:ltr;color:black;font-size:8pt;overflow:visible;border-style:none;margin:0;padding:0;&quot;&gt;&lt;span style=&quot;color:#606060;&quot; id=&quot;lnum15&quot;&gt;  15:&lt;/span&gt;     T* ar;&lt;/pre&gt;
</code></pre><!--CRLF-->
<pre><code>&lt;pre style=&quot;text-align:left;line-height:12pt;background-color:#f4f4f4;width:100%;font-family:&amp;#039;direction:ltr;color:black;font-size:8pt;overflow:visible;border-style:none;margin:0;padding:0;&quot;&gt;&lt;span style=&quot;color:#606060;&quot; id=&quot;lnum16&quot;&gt;  16:&lt;/span&gt;     &lt;span style=&quot;color:#0000ff;&quot;&gt;int&lt;/span&gt; l;&lt;/pre&gt;
</code></pre><!--CRLF-->
<pre><code>&lt;pre style=&quot;text-align:left;line-height:12pt;background-color:white;width:100%;font-family:&amp;#039;direction:ltr;color:black;font-size:8pt;overflow:visible;border-style:none;margin:0;padding:0;&quot;&gt;&lt;span style=&quot;color:#606060;&quot; id=&quot;lnum17&quot;&gt;  17:&lt;/span&gt;     ...&lt;/pre&gt;
</code></pre><!--CRLF-->
<pre><code>&lt;pre style=&quot;text-align:left;line-height:12pt;background-color:#f4f4f4;width:100%;font-family:&amp;#039;direction:ltr;color:black;font-size:8pt;overflow:visible;border-style:none;margin:0;padding:0;&quot;&gt;&lt;span style=&quot;color:#606060;&quot; id=&quot;lnum18&quot;&gt;  18:&lt;/span&gt; };&lt;/pre&gt;
</code></pre><!--CRLF--><br><br><br><font size="2" face="Verdana">实例化可以分为<strong>显示实例化</strong>、<strong>隐式实例化</strong>；显示的实例化通过指定某一特定类型，使编译器强制的生成该类型的实例化代码；隐式实例化则是编译器通过对代码调用的解析，根据模板的使用情况生成相应的实例化代码；隐式实例化类模板时，同时也实例化了模板的每个成员声明，但并没有实例化相应的定义，然而存在例外：如果类模板包含了一个<u>匿名的union</u>，那么该union定义的成员同时也被实例化了；作为实例化类模板的结果，<u>虚函数</u>的定义可能被实例化，也可能没有，这依赖于具体的实现。 </font><br><br><div style="border-bottom:silver 1px solid;text-align:left;border-left:silver 1px solid;line-height:12pt;background-color:#f4f4f4;width:97.5%;font-family:&#039;direction:ltr;max-height:200px;font-size:8pt;overflow:auto;border-top:silver 1px solid;cursor:text;border-right:silver 1px solid;margin:20px 0 10px;padding:4px;" id="codeSnippetWrapper"><br>  <div style="text-align:left;line-height:12pt;background-color:#f4f4f4;width:100%;font-family:&#039;direction:ltr;color:black;font-size:8pt;overflow:visible;border-style:none;padding:0;" id="codeSnippet"><br>    <pre style="text-align:left;line-height:12pt;background-color:white;width:100%;font-family:&#039;direction:ltr;color:black;font-size:8pt;overflow:visible;border-style:none;margin:0;padding:0;"><span style="color:#606060;" id="lnum1">   1:</span> <span style="color:#008000;">//explicit instantiation.</span></pre><br><!--CRLF-->
<pre><code>&lt;pre style=&quot;text-align:left;line-height:12pt;background-color:#f4f4f4;width:100%;font-family:&amp;#039;direction:ltr;color:black;font-size:8pt;overflow:visible;border-style:none;margin:0;padding:0;&quot;&gt;&lt;span style=&quot;color:#606060;&quot; id=&quot;lnum2&quot;&gt;   2:&lt;/span&gt; &lt;span style=&quot;color:#0000ff;&quot;&gt;template&lt;/span&gt; &lt;span style=&quot;color:#0000ff;&quot;&gt;void&lt;/span&gt; swap&amp;lt;&lt;span style=&quot;color:#0000ff;&quot;&gt;int&lt;/span&gt;&amp;gt;(&lt;span style=&quot;color:#0000ff;&quot;&gt;int&lt;/span&gt; &amp;amp;a, &lt;span style=&quot;color:#0000ff;&quot;&gt;int&lt;/span&gt; &amp;amp;b); &lt;/pre&gt;
</code></pre><!--CRLF-->
<pre><code>&lt;pre style=&quot;text-align:left;line-height:12pt;background-color:white;width:100%;font-family:&amp;#039;direction:ltr;color:black;font-size:8pt;overflow:visible;border-style:none;margin:0;padding:0;&quot;&gt;&lt;span style=&quot;color:#606060;&quot; id=&quot;lnum3&quot;&gt;   3:&lt;/span&gt; &lt;span style=&quot;color:#0000ff;&quot;&gt;template&lt;/span&gt; &lt;span style=&quot;color:#0000ff;&quot;&gt;class&lt;/span&gt; Array&amp;lt;&lt;span style=&quot;color:#0000ff;&quot;&gt;int&lt;/span&gt;&amp;gt;; &lt;/pre&gt;
</code></pre><!--CRLF--></div><br></div><br><br><font size="2" face="Verdana">那么也有一种情况，比如我们希望给job类型提供一份特殊的实例化代码，这就需要使用模板的<strong>显示具体化</strong>，使编译器下面的实现，而不是通过上面的模板实例化。</font><br><br><div style="border-bottom:silver 1px solid;text-align:left;border-left:silver 1px solid;line-height:12pt;background-color:#f4f4f4;width:97.5%;font-family:&#039;direction:ltr;max-height:200px;font-size:8pt;overflow:auto;border-top:silver 1px solid;cursor:text;border-right:silver 1px solid;margin:20px 0 10px;padding:4px;" id="codeSnippetWrapper"><br>  <div style="text-align:left;line-height:12pt;background-color:#f4f4f4;width:100%;font-family:&#039;direction:ltr;color:black;font-size:8pt;overflow:visible;border-style:none;padding:0;" id="codeSnippet"><br>    <pre style="text-align:left;line-height:12pt;background-color:white;width:100%;font-family:&#039;direction:ltr;color:black;font-size:8pt;overflow:visible;border-style:none;margin:0;padding:0;"><span style="color:#606060;" id="lnum1">   1:</span> <span style="color:#008000;">//explicit specialization.</span></pre><br><!--CRLF-->
<pre><code>&lt;pre style=&quot;text-align:left;line-height:12pt;background-color:#f4f4f4;width:100%;font-family:&amp;#039;direction:ltr;color:black;font-size:8pt;overflow:visible;border-style:none;margin:0;padding:0;&quot;&gt;&lt;span style=&quot;color:#606060;&quot; id=&quot;lnum2&quot;&gt;   2:&lt;/span&gt; &lt;span style=&quot;color:#0000ff;&quot;&gt;template&lt;/span&gt;&amp;lt;&amp;gt; &lt;span style=&quot;color:#0000ff;&quot;&gt;void&lt;/span&gt; swap&amp;lt;job&amp;gt;(job &amp;amp;a, job &amp;amp;b)&lt;/pre&gt;
</code></pre><!--CRLF-->
<pre><code>&lt;pre style=&quot;text-align:left;line-height:12pt;background-color:white;width:100%;font-family:&amp;#039;direction:ltr;color:black;font-size:8pt;overflow:visible;border-style:none;margin:0;padding:0;&quot;&gt;&lt;span style=&quot;color:#606060;&quot; id=&quot;lnum3&quot;&gt;   3:&lt;/span&gt; {&lt;/pre&gt;
</code></pre><!--CRLF-->
<pre><code>&lt;pre style=&quot;text-align:left;line-height:12pt;background-color:#f4f4f4;width:100%;font-family:&amp;#039;direction:ltr;color:black;font-size:8pt;overflow:visible;border-style:none;margin:0;padding:0;&quot;&gt;&lt;span style=&quot;color:#606060;&quot; id=&quot;lnum4&quot;&gt;   4:&lt;/span&gt;     &lt;span style=&quot;color:#0000ff;&quot;&gt;int&lt;/span&gt; salary = a.salary;&lt;/pre&gt;
</code></pre><!--CRLF-->
<pre><code>&lt;pre style=&quot;text-align:left;line-height:12pt;background-color:white;width:100%;font-family:&amp;#039;direction:ltr;color:black;font-size:8pt;overflow:visible;border-style:none;margin:0;padding:0;&quot;&gt;&lt;span style=&quot;color:#606060;&quot; id=&quot;lnum5&quot;&gt;   5:&lt;/span&gt;     a.salary = b.salary;&lt;/pre&gt;
</code></pre><!--CRLF-->
<pre><code>&lt;pre style=&quot;text-align:left;line-height:12pt;background-color:#f4f4f4;width:100%;font-family:&amp;#039;direction:ltr;color:black;font-size:8pt;overflow:visible;border-style:none;margin:0;padding:0;&quot;&gt;&lt;span style=&quot;color:#606060;&quot; id=&quot;lnum6&quot;&gt;   6:&lt;/span&gt;     b.salary = salary;&lt;/pre&gt;
</code></pre><!--CRLF-->
<pre><code>&lt;pre style=&quot;text-align:left;line-height:12pt;background-color:white;width:100%;font-family:&amp;#039;direction:ltr;color:black;font-size:8pt;overflow:visible;border-style:none;margin:0;padding:0;&quot;&gt;&lt;span style=&quot;color:#606060;&quot; id=&quot;lnum7&quot;&gt;   7:&lt;/span&gt; };&lt;/pre&gt;
</code></pre><!--CRLF-->
<pre><code>&lt;pre style=&quot;text-align:left;line-height:12pt;background-color:#f4f4f4;width:100%;font-family:&amp;#039;direction:ltr;color:black;font-size:8pt;overflow:visible;border-style:none;margin:0;padding:0;&quot;&gt;&lt;span style=&quot;color:#606060;&quot; id=&quot;lnum8&quot;&gt;   8:&lt;/span&gt; &lt;span style=&quot;color:#0000ff;&quot;&gt;template&lt;/span&gt;&amp;lt;&amp;gt; &lt;span style=&quot;color:#0000ff;&quot;&gt;class&lt;/span&gt; Array&amp;lt;job&amp;gt;&lt;/pre&gt;
</code></pre><!--CRLF-->
<pre><code>&lt;pre style=&quot;text-align:left;line-height:12pt;background-color:white;width:100%;font-family:&amp;#039;direction:ltr;color:black;font-size:8pt;overflow:visible;border-style:none;margin:0;padding:0;&quot;&gt;&lt;span style=&quot;color:#606060;&quot; id=&quot;lnum9&quot;&gt;   9:&lt;/span&gt; {&lt;/pre&gt;
</code></pre><!--CRLF-->
<pre><code>&lt;pre style=&quot;text-align:left;line-height:12pt;background-color:#f4f4f4;width:100%;font-family:&amp;#039;direction:ltr;color:black;font-size:8pt;overflow:visible;border-style:none;margin:0;padding:0;&quot;&gt;&lt;span style=&quot;color:#606060;&quot; id=&quot;lnum10&quot;&gt;  10:&lt;/span&gt;     ...&lt;/pre&gt;
</code></pre><!--CRLF-->
<pre><code>&lt;pre style=&quot;text-align:left;line-height:12pt;background-color:white;width:100%;font-family:&amp;#039;direction:ltr;color:black;font-size:8pt;overflow:visible;border-style:none;margin:0;padding:0;&quot;&gt;&lt;span style=&quot;color:#606060;&quot; id=&quot;lnum11&quot;&gt;  11:&lt;/span&gt; };&lt;/pre&gt;
</code></pre><p><!--CRLF--></p></div><br></div><p></p>
<font size="2"><font face="Verdana"><strong>3. C++模板实例化详解</strong> （请参考《</font></font><a href="http://blog.csdn.net/flowshell/article/details/6285711" target="_blank" rel="external"><font size="2" face="Verdana">C++模板实例化</font></a><font size="2" face="Verdana">》）</font>

<font size="2" face="Verdana">略。</font>

<font size="2" face="Verdana"><br><br><em> </em> *<br></font>

<p><strong><font size="2" face="Verdana">1. C#泛型的介绍</font></strong></p>
<font size="2" face="Verdana">C#的模板包括接口模板、类模板、成员函数模板。正确的说，C#的模板应该是指CLR的泛型，所以C++ CLR的模板实现和C#是一模一样的。在介绍C#泛型之前，让我们先看下Java的泛型实现；Java的泛型采用了代码共享技术，所有的实例化类型共享同一套强类型的代码。如List&lt;int&gt;和List&lt;string&gt;共享同一套强类型的代码List&lt;Object&gt;，这样实现有效的减少了代码生成量，但是因为涉及到</font><a href="http://www.cnblogs.com/huashanlin/archive/2007/05/16/749359.html" target="_blank" rel="external"><font size="2" face="Verdana">装箱、拆箱</font></a><font size="2" face="Verdana">，效率低且不够灵活。</font>

<font size="2" face="Verdana"></font>

<h5 id=""><a href="#" class="headerlink" title=""></a><font face="Verdana"></font></h5><font size="2" face="Verdana"></font>

<p><strong><font size="2" face="Verdana">2. C#泛型的实现</font></strong></p>
<font size="2" face="Verdana">C#的模板综合了C++和Java的泛型技术。采用了两阶段延迟特化的方式，从C#源码到IL的静态编译采用Java的代码共享思想，只生成一套抽象的IL代码，在CLR运行时JIT编译时，将IL的抽象代码即时编译，根据每个特化实参生成一个特化的强类型，如图：</font>

<font size="2" face="Verdana"><img src="http://www.99inf.net/SoftwareDev/UploadFiles_9259/200708/20078119191749.bmp" alt=""></font>

<font size="2" face="Verdana">C#的泛型兼备了C++模板和Java泛型的优点，代码简洁方便重用。值得一提的是，CLR对于引用类型，其泛型的工作方式略有不同。第一次使用任何引用类型构造泛型类型时，运行库会创建<strong>专用泛型类型</strong>，用对象引用替换IL中的参数。然后，每次使用引用类型实例化构造类型时，无论引用类型的具体类型是什么，运行库都会重用以前创建的泛型类型的专用版本。之所以可以这样，是因为所有引用的大小相同。</font>

<font size="2" face="Verdana">假设您有两个引用类型Customer和Order，并且您创建了Customer类型的一个泛型实例：Stack&lt;Customer&gt; customers；在此情况下，运行库生成Stack&lt;T&gt;类的一个专用版本，该版本不是存储数据，而是存储稍后将填写的对象引用。假设下一行代码创建另一个引用类型的堆栈泛型实例：Stack&lt;Order&gt; orders；不同于值类型，对于Order类型不创建Stack&lt;T&gt;类的另一个专用版本，而是创建Stack&lt;T&gt;类专用版本的一个实例，并将Order变量设置为引用它。因为引用类型的数量会随程序的不同而大幅变化，C#泛型将编译器为引用类型泛型类创建的专用类的数量减小到一个，大幅减少了代码量。</font>

<font size="2" face="Verdana"><br><br><em> </em> *<br></font>

<font size="2"><font face="Verdana"><strong>1.</strong> <strong>C++和C#泛型模型对比</strong></font></font>

<font size="2" face="Verdana">从整体上来说，因为C#为程序员提供了一致的编程方式，而且它在泛型编程的实现上借鉴了C++，所以相对C++，C#的泛型实现更简单、直接，但与此同时，C#在泛型实现并没有C++强大。下面是正对C++和C#在泛型实现方面的一个简单的对比：</font>

<p><strong><font size="2" face="Verdana"></font></strong></p>
<p><a href="http://kevinxi.files.wordpress.com/2012/03/image3.png" target="_blank" rel="external"><font size="2" face="Verdana"><img src="http://kevinxi.files.wordpress.com/2012/03/image_thumb3.png" alt="image" title="image"></font></a></p>
<font size="2" face="Verdana"><strong>2. 《</strong></font><a href="http://msdn.microsoft.com/zh-cn/library/c6cyy67b(v=vs.80" target="_blank" rel="external"><font size="2" face="Verdana"><strong>C++ 模板和 C# 泛型之间的区别</strong></font></a>.aspx)<font size="2" face="Verdana"><strong>》选自MSDN</strong></font>

<font size="2" face="Verdana">C#泛型和C++模板都是用于提供参数化类型支持的语言功能。然而，这两者之间存在许多差异。在语法层面上，C#泛型是实现参数化类型的更简单方法，不具有C++模板的复杂性。此外，C#并不尝试提供C++模板所提供的所有功能。在实现层面，主要区别在于，C#泛型类型替换是在运行时执行的，从而为实例化的对象保留了泛型类型信息。有关更多信息，请参见</font><a href="http://msdn.microsoft.com/zh-cn/library/f4a6ta2h(v=vs.80" target="_blank" rel="external"><font size="2" face="Verdana">运行库中的泛型（C# 编程指南）</font></a>.aspx)<br><br><font size="2">以下是C#泛型和C++模板之间的主要差异：</font>

<ul>
<li><font size="2" face="Verdana">C#泛型未提供与C++模板相同程度的灵活性。例如，尽管在C#泛型类中可以调用用户定义的运算符，但不能调用算术运算符。 </font></li>
<li><font size="2" face="Verdana">C#不允许非类型模板参数，如template C&lt;int i&gt;{}。 </font></li>
<li><font size="2" face="Verdana">C#不支持显式专用化，即特定类型的模板的自定义实现。 </font></li>
<li><font size="2" face="Verdana">C#不支持部分专用化：类型参数子集的自定义实现。 </font></li>
<li><font size="2" face="Verdana">C#不允许将类型参数用作泛型类型的基类。 </font></li>
<li><font size="2" face="Verdana">C#不允许类型参数具有默认类型。 </font></li>
<li><font size="2" face="Verdana">在C#中，尽管构造类型可用作泛型，但泛型类型参数自身不能是泛型。C++却是允许模板参数。 </font></li>
<li><font size="2" face="Verdana">C++允许那些可能并非对模板中的所有类型参数都有效的代码，然后将检查该代码中是否有用作类型参数的特定类型。C#要求相应地编写类中的代码，使之能够使用任何满足约束的类型。例如，可以在C++中编写对类型参数的对象使用算术运算符+和-的函数，这会在使用不支持这些运算符的类型来实例化模板时产生错误。C#不允许这样；唯一允许的语言构造是那些可从约束推导出来的构造。 </font>

</li>
</ul>
<font size="2" face="Verdana"></font>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;strong&gt;&lt;font size=&quot;2&quot; face=&quot;Verdana&quot;&gt;1. C++模板的介绍&lt;/font&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;font size=&quot;2&quot; face=&quot;Verdana&quot;&gt;C++模板主要包括类（包括class和union）模板以及函数模板。编译器
    
    </summary>
    
      <category term="Programming" scheme="http://yoursite.com/categories/Programming/"/>
    
      <category term="Warm Up" scheme="http://yoursite.com/categories/Programming/Warm-Up/"/>
    
    
      <category term="C#" scheme="http://yoursite.com/tags/C/"/>
    
      <category term="Generic" scheme="http://yoursite.com/tags/Generic/"/>
    
      <category term="Template" scheme="http://yoursite.com/tags/Template/"/>
    
  </entry>
  
  <entry>
    <title>SUM(1/N!) problem</title>
    <link href="http://yoursite.com/2012/03/07/sum1n-problem/"/>
    <id>http://yoursite.com/2012/03/07/sum1n-problem/</id>
    <published>2012-03-07T04:28:43.000Z</published>
    <updated>2016-10-23T13:39:54.000Z</updated>
    
    <content type="html"><![CDATA[<p>Hello, Anton</p>
<p>Here is my solution of the <a href="http://jetcracker.wordpress.com/2012/03/07/mpi-calculating-sum/" target="_blank" rel="external">SUM(1/N!)</a> problem, as for the low accuracy of a 32bit double value, there is no need to calculate 1/N! when N &gt;= 178.</p>
<p><u><em>Sample Code</em></u><br>  <div style="border-bottom:silver 1px solid;text-align:left;border-left:silver 1px solid;line-height:12pt;background-color:#f4f4f4;width:97.5%;font-family:&#039;direction:ltr;max-height:800px;font-size:8pt;overflow:auto;border-top:silver 1px solid;cursor:text;border-right:silver 1px solid;margin:20px 0 10px;padding:4px;" id="codeSnippetWrapper">   <div style="text-align:left;line-height:12pt;background-color:#f4f4f4;width:100%;font-family:&#039;direction:ltr;color:black;font-size:8pt;overflow:visible;border-style:none;padding:0;" id="codeSnippet">     <pre style="text-align:left;line-height:12pt;background-color:white;width:100%;font-family:&#039;direction:ltr;color:black;font-size:8pt;overflow:visible;border-style:none;margin:0;padding:0;"><span style="color:#606060;" id="lnum1">   1:</span> <span style="color:#008000;">//<em>QUESTION</em></span></pre><br><!--CRLF--></div></div></p>
<pre><code>&lt;pre style=&quot;text-align:left;line-height:12pt;background-color:#f4f4f4;width:100%;font-family:&amp;#039;direction:ltr;color:black;font-size:8pt;overflow:visible;border-style:none;margin:0;padding:0;&quot;&gt;&lt;span style=&quot;color:#606060;&quot; id=&quot;lnum2&quot;&gt;   2:&lt;/span&gt; &lt;span style=&quot;color:#008000;&quot;&gt;//Calculate the SUM(1/N!), this problem is from Anton&apos;s blog, see:&lt;/span&gt;&lt;/pre&gt;
</code></pre><!--CRLF-->
<pre><code>&lt;pre style=&quot;text-align:left;line-height:12pt;background-color:white;width:100%;font-family:&amp;#039;direction:ltr;color:black;font-size:8pt;overflow:visible;border-style:none;margin:0;padding:0;&quot;&gt;&lt;span style=&quot;color:#606060;&quot; id=&quot;lnum3&quot;&gt;   3:&lt;/span&gt; &lt;span style=&quot;color:#008000;&quot;&gt;//http://jetcracker.wordpress.com/2012/03/07/mpi-calculating-sum/&lt;/span&gt;&lt;/pre&gt;
</code></pre><!--CRLF-->
<pre><code>&lt;pre style=&quot;text-align:left;line-height:12pt;background-color:#f4f4f4;width:100%;font-family:&amp;#039;direction:ltr;color:black;font-size:8pt;overflow:visible;border-style:none;margin:0;padding:0;&quot;&gt;&lt;span style=&quot;color:#606060;&quot; id=&quot;lnum4&quot;&gt;   4:&lt;/span&gt;&amp;#160; &lt;/pre&gt;
</code></pre><!--CRLF-->
<pre><code>&lt;pre style=&quot;text-align:left;line-height:12pt;background-color:white;width:100%;font-family:&amp;#039;direction:ltr;color:black;font-size:8pt;overflow:visible;border-style:none;margin:0;padding:0;&quot;&gt;&lt;span style=&quot;color:#606060;&quot; id=&quot;lnum5&quot;&gt;   5:&lt;/span&gt; &lt;span style=&quot;color:#cc6633;&quot;&gt;#include&lt;/span&gt; &amp;lt;stdio.h&amp;gt;&lt;/pre&gt;
</code></pre><!--CRLF-->
<pre><code>&lt;pre style=&quot;text-align:left;line-height:12pt;background-color:#f4f4f4;width:100%;font-family:&amp;#039;direction:ltr;color:black;font-size:8pt;overflow:visible;border-style:none;margin:0;padding:0;&quot;&gt;&lt;span style=&quot;color:#606060;&quot; id=&quot;lnum6&quot;&gt;   6:&lt;/span&gt; &lt;span style=&quot;color:#cc6633;&quot;&gt;#include&lt;/span&gt; &amp;lt;omp.h&amp;gt; &lt;/pre&gt;
</code></pre><!--CRLF-->
<pre><code>&lt;pre style=&quot;text-align:left;line-height:12pt;background-color:white;width:100%;font-family:&amp;#039;direction:ltr;color:black;font-size:8pt;overflow:visible;border-style:none;margin:0;padding:0;&quot;&gt;&lt;span style=&quot;color:#606060;&quot; id=&quot;lnum7&quot;&gt;   7:&lt;/span&gt; &lt;span style=&quot;color:#cc6633;&quot;&gt;#include&lt;/span&gt; &amp;lt;ctime&amp;gt;&lt;/pre&gt;
</code></pre><!--CRLF-->
<pre><code>&lt;pre style=&quot;text-align:left;line-height:12pt;background-color:#f4f4f4;width:100%;font-family:&amp;#039;direction:ltr;color:black;font-size:8pt;overflow:visible;border-style:none;margin:0;padding:0;&quot;&gt;&lt;span style=&quot;color:#606060;&quot; id=&quot;lnum8&quot;&gt;   8:&lt;/span&gt; &lt;span style=&quot;color:#cc6633;&quot;&gt;#include&lt;/span&gt; &amp;lt;cmath&amp;gt;&lt;/pre&gt;
</code></pre><!--CRLF-->
<pre><code>&lt;pre style=&quot;text-align:left;line-height:12pt;background-color:white;width:100%;font-family:&amp;#039;direction:ltr;color:black;font-size:8pt;overflow:visible;border-style:none;margin:0;padding:0;&quot;&gt;&lt;span style=&quot;color:#606060;&quot; id=&quot;lnum9&quot;&gt;   9:&lt;/span&gt; &lt;span style=&quot;color:#cc6633;&quot;&gt;#include&lt;/span&gt; &amp;lt;cstdlib&amp;gt;&lt;/pre&gt;
</code></pre><!--CRLF-->
<pre><code>&lt;pre style=&quot;text-align:left;line-height:12pt;background-color:#f4f4f4;width:100%;font-family:&amp;#039;direction:ltr;color:black;font-size:8pt;overflow:visible;border-style:none;margin:0;padding:0;&quot;&gt;&lt;span style=&quot;color:#606060;&quot; id=&quot;lnum10&quot;&gt;  10:&lt;/span&gt;&amp;#160; &lt;/pre&gt;
</code></pre><!--CRLF-->
<pre><code>&lt;pre style=&quot;text-align:left;line-height:12pt;background-color:white;width:100%;font-family:&amp;#039;direction:ltr;color:black;font-size:8pt;overflow:visible;border-style:none;margin:0;padding:0;&quot;&gt;&lt;span style=&quot;color:#606060;&quot; id=&quot;lnum11&quot;&gt;  11:&lt;/span&gt; &lt;span style=&quot;color:#008000;&quot;&gt;//threads&apos; number set to openmp.&lt;/span&gt;&lt;/pre&gt;
</code></pre><!--CRLF-->
<pre><code>&lt;pre style=&quot;text-align:left;line-height:12pt;background-color:#f4f4f4;width:100%;font-family:&amp;#039;direction:ltr;color:black;font-size:8pt;overflow:visible;border-style:none;margin:0;padding:0;&quot;&gt;&lt;span style=&quot;color:#606060;&quot; id=&quot;lnum12&quot;&gt;  12:&lt;/span&gt; &lt;span style=&quot;color:#008000;&quot;&gt;//#define NUMBER_THREADS 4&lt;/span&gt;&lt;/pre&gt;
</code></pre><!--CRLF-->
<pre><code>&lt;pre style=&quot;text-align:left;line-height:12pt;background-color:white;width:100%;font-family:&amp;#039;direction:ltr;color:black;font-size:8pt;overflow:visible;border-style:none;margin:0;padding:0;&quot;&gt;&lt;span style=&quot;color:#606060;&quot; id=&quot;lnum13&quot;&gt;  13:&lt;/span&gt;&amp;#160; &lt;/pre&gt;
</code></pre><!--CRLF-->
<pre><code>&lt;pre style=&quot;text-align:left;line-height:12pt;background-color:#f4f4f4;width:100%;font-family:&amp;#039;direction:ltr;color:black;font-size:8pt;overflow:visible;border-style:none;margin:0;padding:0;&quot;&gt;&lt;span style=&quot;color:#606060;&quot; id=&quot;lnum14&quot;&gt;  14:&lt;/span&gt; &lt;span style=&quot;color:#008000;&quot;&gt;//*FACTORIAL*&lt;/span&gt;&lt;/pre&gt;
</code></pre><!--CRLF-->
<pre><code>&lt;pre style=&quot;text-align:left;line-height:12pt;background-color:white;width:100%;font-family:&amp;#039;direction:ltr;color:black;font-size:8pt;overflow:visible;border-style:none;margin:0;padding:0;&quot;&gt;&lt;span style=&quot;color:#606060;&quot; id=&quot;lnum15&quot;&gt;  15:&lt;/span&gt; &lt;span style=&quot;color:#008000;&quot;&gt;//Theory 1: While N &amp;gt;= 178, the value of 1/N! would be nearly to 0 and won&apos;t be &lt;/span&gt;&lt;/pre&gt;
</code></pre><!--CRLF-->
<pre><code>&lt;pre style=&quot;text-align:left;line-height:12pt;background-color:#f4f4f4;width:100%;font-family:&amp;#039;direction:ltr;color:black;font-size:8pt;overflow:visible;border-style:none;margin:0;padding:0;&quot;&gt;&lt;span style=&quot;color:#606060;&quot; id=&quot;lnum16&quot;&gt;  16:&lt;/span&gt; &lt;span style=&quot;color:#008000;&quot;&gt;//            saved as &apos;double&apos; in 32bit machine, so it is actually a 1ms task.&lt;/span&gt;&lt;/pre&gt;
</code></pre><!--CRLF-->
<pre><code>&lt;pre style=&quot;text-align:left;line-height:12pt;background-color:white;width:100%;font-family:&amp;#039;direction:ltr;color:black;font-size:8pt;overflow:visible;border-style:none;margin:0;padding:0;&quot;&gt;&lt;span style=&quot;color:#606060;&quot; id=&quot;lnum17&quot;&gt;  17:&lt;/span&gt; &lt;span style=&quot;color:#008000;&quot;&gt;//Theory 2: 1/(N-1)! can be used to calculate 1/N! by multiply 1/N.&lt;/span&gt;&lt;/pre&gt;
</code></pre><!--CRLF-->
<pre><code>&lt;pre style=&quot;text-align:left;line-height:12pt;background-color:#f4f4f4;width:100%;font-family:&amp;#039;direction:ltr;color:black;font-size:8pt;overflow:visible;border-style:none;margin:0;padding:0;&quot;&gt;&lt;span style=&quot;color:#606060;&quot; id=&quot;lnum18&quot;&gt;  18:&lt;/span&gt; &lt;span style=&quot;color:#0000ff;&quot;&gt;double&lt;/span&gt; factorial()&lt;/pre&gt;
</code></pre><!--CRLF-->
<pre><code>&lt;pre style=&quot;text-align:left;line-height:12pt;background-color:white;width:100%;font-family:&amp;#039;direction:ltr;color:black;font-size:8pt;overflow:visible;border-style:none;margin:0;padding:0;&quot;&gt;&lt;span style=&quot;color:#606060;&quot; id=&quot;lnum19&quot;&gt;  19:&lt;/span&gt; {&lt;/pre&gt;
</code></pre><!--CRLF-->
<pre><code>&lt;pre style=&quot;text-align:left;line-height:12pt;background-color:#f4f4f4;width:100%;font-family:&amp;#039;direction:ltr;color:black;font-size:8pt;overflow:visible;border-style:none;margin:0;padding:0;&quot;&gt;&lt;span style=&quot;color:#606060;&quot; id=&quot;lnum20&quot;&gt;  20:&lt;/span&gt;     &lt;span style=&quot;color:#0000ff;&quot;&gt;int&lt;/span&gt; n = 177;&lt;/pre&gt;
</code></pre><!--CRLF-->
<pre><code>&lt;pre style=&quot;text-align:left;line-height:12pt;background-color:white;width:100%;font-family:&amp;#039;direction:ltr;color:black;font-size:8pt;overflow:visible;border-style:none;margin:0;padding:0;&quot;&gt;&lt;span style=&quot;color:#606060;&quot; id=&quot;lnum21&quot;&gt;  21:&lt;/span&gt;&amp;#160; &lt;/pre&gt;
</code></pre><!--CRLF-->
<pre><code>&lt;pre style=&quot;text-align:left;line-height:12pt;background-color:#f4f4f4;width:100%;font-family:&amp;#039;direction:ltr;color:black;font-size:8pt;overflow:visible;border-style:none;margin:0;padding:0;&quot;&gt;&lt;span style=&quot;color:#606060;&quot; id=&quot;lnum22&quot;&gt;  22:&lt;/span&gt;     &lt;span style=&quot;color:#0000ff;&quot;&gt;double&lt;/span&gt; factor = 1;&lt;/pre&gt;
</code></pre><!--CRLF-->
<pre><code>&lt;pre style=&quot;text-align:left;line-height:12pt;background-color:white;width:100%;font-family:&amp;#039;direction:ltr;color:black;font-size:8pt;overflow:visible;border-style:none;margin:0;padding:0;&quot;&gt;&lt;span style=&quot;color:#606060;&quot; id=&quot;lnum23&quot;&gt;  23:&lt;/span&gt;     &lt;span style=&quot;color:#0000ff;&quot;&gt;double&lt;/span&gt; retval = 1;&lt;/pre&gt;
</code></pre><!--CRLF-->
<pre><code>&lt;pre style=&quot;text-align:left;line-height:12pt;background-color:#f4f4f4;width:100%;font-family:&amp;#039;direction:ltr;color:black;font-size:8pt;overflow:visible;border-style:none;margin:0;padding:0;&quot;&gt;&lt;span style=&quot;color:#606060;&quot; id=&quot;lnum24&quot;&gt;  24:&lt;/span&gt;&amp;#160; &lt;/pre&gt;
</code></pre><!--CRLF-->
<pre><code>&lt;pre style=&quot;text-align:left;line-height:12pt;background-color:white;width:100%;font-family:&amp;#039;direction:ltr;color:black;font-size:8pt;overflow:visible;border-style:none;margin:0;padding:0;&quot;&gt;&lt;span style=&quot;color:#606060;&quot; id=&quot;lnum25&quot;&gt;  25:&lt;/span&gt;     &lt;span style=&quot;color:#008000;&quot;&gt;//#pragma omp parallel for&lt;/span&gt;&lt;/pre&gt;
</code></pre><!--CRLF-->
<pre><code>&lt;pre style=&quot;text-align:left;line-height:12pt;background-color:#f4f4f4;width:100%;font-family:&amp;#039;direction:ltr;color:black;font-size:8pt;overflow:visible;border-style:none;margin:0;padding:0;&quot;&gt;&lt;span style=&quot;color:#606060;&quot; id=&quot;lnum26&quot;&gt;  26:&lt;/span&gt;     &lt;span style=&quot;color:#0000ff;&quot;&gt;for&lt;/span&gt; (&lt;span style=&quot;color:#0000ff;&quot;&gt;int&lt;/span&gt; i = 2; i &amp;lt;= n; i++)&lt;/pre&gt;
</code></pre><!--CRLF-->
<pre><code>&lt;pre style=&quot;text-align:left;line-height:12pt;background-color:white;width:100%;font-family:&amp;#039;direction:ltr;color:black;font-size:8pt;overflow:visible;border-style:none;margin:0;padding:0;&quot;&gt;&lt;span style=&quot;color:#606060;&quot; id=&quot;lnum27&quot;&gt;  27:&lt;/span&gt;     {&lt;/pre&gt;
</code></pre><!--CRLF-->
<pre><code>&lt;pre style=&quot;text-align:left;line-height:12pt;background-color:#f4f4f4;width:100%;font-family:&amp;#039;direction:ltr;color:black;font-size:8pt;overflow:visible;border-style:none;margin:0;padding:0;&quot;&gt;&lt;span style=&quot;color:#606060;&quot; id=&quot;lnum28&quot;&gt;  28:&lt;/span&gt;         factor *= (1.0 / (&lt;span style=&quot;color:#0000ff;&quot;&gt;double&lt;/span&gt;)i);&lt;/pre&gt;
</code></pre><!--CRLF-->
<pre><code>&lt;pre style=&quot;text-align:left;line-height:12pt;background-color:white;width:100%;font-family:&amp;#039;direction:ltr;color:black;font-size:8pt;overflow:visible;border-style:none;margin:0;padding:0;&quot;&gt;&lt;span style=&quot;color:#606060;&quot; id=&quot;lnum29&quot;&gt;  29:&lt;/span&gt;         retval += factor;&lt;/pre&gt;
</code></pre><!--CRLF-->
<pre><code>&lt;pre style=&quot;text-align:left;line-height:12pt;background-color:#f4f4f4;width:100%;font-family:&amp;#039;direction:ltr;color:black;font-size:8pt;overflow:visible;border-style:none;margin:0;padding:0;&quot;&gt;&lt;span style=&quot;color:#606060;&quot; id=&quot;lnum30&quot;&gt;  30:&lt;/span&gt;     }&lt;/pre&gt;
</code></pre><!--CRLF-->
<pre><code>&lt;pre style=&quot;text-align:left;line-height:12pt;background-color:white;width:100%;font-family:&amp;#039;direction:ltr;color:black;font-size:8pt;overflow:visible;border-style:none;margin:0;padding:0;&quot;&gt;&lt;span style=&quot;color:#606060;&quot; id=&quot;lnum31&quot;&gt;  31:&lt;/span&gt;&amp;#160; &lt;/pre&gt;
</code></pre><!--CRLF-->
<pre><code>&lt;pre style=&quot;text-align:left;line-height:12pt;background-color:#f4f4f4;width:100%;font-family:&amp;#039;direction:ltr;color:black;font-size:8pt;overflow:visible;border-style:none;margin:0;padding:0;&quot;&gt;&lt;span style=&quot;color:#606060;&quot; id=&quot;lnum32&quot;&gt;  32:&lt;/span&gt;     &lt;span style=&quot;color:#0000ff;&quot;&gt;return&lt;/span&gt; retval;&lt;/pre&gt;
</code></pre><!--CRLF-->
<pre><code>&lt;pre style=&quot;text-align:left;line-height:12pt;background-color:white;width:100%;font-family:&amp;#039;direction:ltr;color:black;font-size:8pt;overflow:visible;border-style:none;margin:0;padding:0;&quot;&gt;&lt;span style=&quot;color:#606060;&quot; id=&quot;lnum33&quot;&gt;  33:&lt;/span&gt; }&lt;/pre&gt;
</code></pre><!--CRLF-->
<pre><code>&lt;pre style=&quot;text-align:left;line-height:12pt;background-color:#f4f4f4;width:100%;font-family:&amp;#039;direction:ltr;color:black;font-size:8pt;overflow:visible;border-style:none;margin:0;padding:0;&quot;&gt;&lt;span style=&quot;color:#606060;&quot; id=&quot;lnum34&quot;&gt;  34:&lt;/span&gt;&amp;#160; &lt;/pre&gt;
</code></pre><!--CRLF-->
<pre><code>&lt;pre style=&quot;text-align:left;line-height:12pt;background-color:white;width:100%;font-family:&amp;#039;direction:ltr;color:black;font-size:8pt;overflow:visible;border-style:none;margin:0;padding:0;&quot;&gt;&lt;span style=&quot;color:#606060;&quot; id=&quot;lnum35&quot;&gt;  35:&lt;/span&gt; &lt;span style=&quot;color:#008000;&quot;&gt;//*TEST MAIN*&lt;/span&gt;&lt;/pre&gt;
</code></pre><!--CRLF-->
<pre><code>&lt;pre style=&quot;text-align:left;line-height:12pt;background-color:#f4f4f4;width:100%;font-family:&amp;#039;direction:ltr;color:black;font-size:8pt;overflow:visible;border-style:none;margin:0;padding:0;&quot;&gt;&lt;span style=&quot;color:#606060;&quot; id=&quot;lnum36&quot;&gt;  36:&lt;/span&gt; &lt;span style=&quot;color:#008000;&quot;&gt;//Caculate the result, and then print out to console.&lt;/span&gt;&lt;/pre&gt;
</code></pre><!--CRLF-->
<pre><code>&lt;pre style=&quot;text-align:left;line-height:12pt;background-color:white;width:100%;font-family:&amp;#039;direction:ltr;color:black;font-size:8pt;overflow:visible;border-style:none;margin:0;padding:0;&quot;&gt;&lt;span style=&quot;color:#606060;&quot; id=&quot;lnum37&quot;&gt;  37:&lt;/span&gt; &lt;span style=&quot;color:#0000ff;&quot;&gt;void&lt;/span&gt; main()&lt;/pre&gt;
</code></pre><!--CRLF-->
<pre><code>&lt;pre style=&quot;text-align:left;line-height:12pt;background-color:#f4f4f4;width:100%;font-family:&amp;#039;direction:ltr;color:black;font-size:8pt;overflow:visible;border-style:none;margin:0;padding:0;&quot;&gt;&lt;span style=&quot;color:#606060;&quot; id=&quot;lnum38&quot;&gt;  38:&lt;/span&gt; {    &lt;/pre&gt;
</code></pre><!--CRLF-->
<pre><code>&lt;pre style=&quot;text-align:left;line-height:12pt;background-color:white;width:100%;font-family:&amp;#039;direction:ltr;color:black;font-size:8pt;overflow:visible;border-style:none;margin:0;padding:0;&quot;&gt;&lt;span style=&quot;color:#606060;&quot; id=&quot;lnum39&quot;&gt;  39:&lt;/span&gt;     clock_t start = clock();&lt;/pre&gt;
</code></pre><!--CRLF-->
<pre><code>&lt;pre style=&quot;text-align:left;line-height:12pt;background-color:#f4f4f4;width:100%;font-family:&amp;#039;direction:ltr;color:black;font-size:8pt;overflow:visible;border-style:none;margin:0;padding:0;&quot;&gt;&lt;span style=&quot;color:#606060;&quot; id=&quot;lnum40&quot;&gt;  40:&lt;/span&gt;&amp;#160; &lt;/pre&gt;
</code></pre><!--CRLF-->
<pre><code>&lt;pre style=&quot;text-align:left;line-height:12pt;background-color:white;width:100%;font-family:&amp;#039;direction:ltr;color:black;font-size:8pt;overflow:visible;border-style:none;margin:0;padding:0;&quot;&gt;&lt;span style=&quot;color:#606060;&quot; id=&quot;lnum41&quot;&gt;  41:&lt;/span&gt;     &lt;span style=&quot;color:#008000;&quot;&gt;//setup the threads number.&lt;/span&gt;&lt;/pre&gt;
</code></pre><!--CRLF-->
<pre><code>&lt;pre style=&quot;text-align:left;line-height:12pt;background-color:#f4f4f4;width:100%;font-family:&amp;#039;direction:ltr;color:black;font-size:8pt;overflow:visible;border-style:none;margin:0;padding:0;&quot;&gt;&lt;span style=&quot;color:#606060;&quot; id=&quot;lnum42&quot;&gt;  42:&lt;/span&gt;     &lt;span style=&quot;color:#008000;&quot;&gt;//omp_set_num_threads(NUMBER_THREADS);&lt;/span&gt;&lt;/pre&gt;
</code></pre><!--CRLF-->
<pre><code>&lt;pre style=&quot;text-align:left;line-height:12pt;background-color:white;width:100%;font-family:&amp;#039;direction:ltr;color:black;font-size:8pt;overflow:visible;border-style:none;margin:0;padding:0;&quot;&gt;&lt;span style=&quot;color:#606060;&quot; id=&quot;lnum43&quot;&gt;  43:&lt;/span&gt;     &lt;/pre&gt;
</code></pre><!--CRLF-->
<pre><code>&lt;pre style=&quot;text-align:left;line-height:12pt;background-color:#f4f4f4;width:100%;font-family:&amp;#039;direction:ltr;color:black;font-size:8pt;overflow:visible;border-style:none;margin:0;padding:0;&quot;&gt;&lt;span style=&quot;color:#606060;&quot; id=&quot;lnum44&quot;&gt;  44:&lt;/span&gt;     &lt;span style=&quot;color:#008000;&quot;&gt;//calculate the result of sum.&lt;/span&gt;&lt;/pre&gt;
</code></pre><!--CRLF-->
<pre><code>&lt;pre style=&quot;text-align:left;line-height:12pt;background-color:white;width:100%;font-family:&amp;#039;direction:ltr;color:black;font-size:8pt;overflow:visible;border-style:none;margin:0;padding:0;&quot;&gt;&lt;span style=&quot;color:#606060;&quot; id=&quot;lnum45&quot;&gt;  45:&lt;/span&gt;     printf(&lt;span style=&quot;color:#006080;&quot;&gt;&amp;quot;SUM(1/N!): %.15f\n&amp;quot;&lt;/span&gt;, factorial());&lt;/pre&gt;
</code></pre><!--CRLF-->
<pre><code>&lt;pre style=&quot;text-align:left;line-height:12pt;background-color:#f4f4f4;width:100%;font-family:&amp;#039;direction:ltr;color:black;font-size:8pt;overflow:visible;border-style:none;margin:0;padding:0;&quot;&gt;&lt;span style=&quot;color:#606060;&quot; id=&quot;lnum46&quot;&gt;  46:&lt;/span&gt;&amp;#160; &lt;/pre&gt;
</code></pre><!--CRLF-->
<pre><code>&lt;pre style=&quot;text-align:left;line-height:12pt;background-color:white;width:100%;font-family:&amp;#039;direction:ltr;color:black;font-size:8pt;overflow:visible;border-style:none;margin:0;padding:0;&quot;&gt;&lt;span style=&quot;color:#606060;&quot; id=&quot;lnum47&quot;&gt;  47:&lt;/span&gt;     &lt;span style=&quot;color:#008000;&quot;&gt;//print the executing period.&lt;/span&gt;&lt;/pre&gt;
</code></pre><!--CRLF-->
<pre><code>&lt;pre style=&quot;text-align:left;line-height:12pt;background-color:#f4f4f4;width:100%;font-family:&amp;#039;direction:ltr;color:black;font-size:8pt;overflow:visible;border-style:none;margin:0;padding:0;&quot;&gt;&lt;span style=&quot;color:#606060;&quot; id=&quot;lnum48&quot;&gt;  48:&lt;/span&gt;     printf(&lt;span style=&quot;color:#006080;&quot;&gt;&amp;quot;Total execute: %ldms\n&amp;quot;&lt;/span&gt;, clock() - start);&lt;/pre&gt;
</code></pre><!--CRLF-->
<pre><code>&lt;pre style=&quot;text-align:left;line-height:12pt;background-color:white;width:100%;font-family:&amp;#039;direction:ltr;color:black;font-size:8pt;overflow:visible;border-style:none;margin:0;padding:0;&quot;&gt;&lt;span style=&quot;color:#606060;&quot; id=&quot;lnum49&quot;&gt;  49:&lt;/span&gt; }&lt;/pre&gt;
</code></pre><p><!--CRLF--><br></p>
<p>And here is the result of execution:</p>
<blockquote>
<font face="Courier New">SUM(1/N!): 1.718281828459046<br><br>Total execute: 1ms</font>

</blockquote>
<p>If you use a hi-accuracy float type, then you might need to parallelize the code, but as for ‘double’ type here, such algorithm should be fast enough.</p>
<p>Thanks!</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Hello, Anton&lt;/p&gt;
&lt;p&gt;Here is my solution of the &lt;a href=&quot;http://jetcracker.wordpress.com/2012/03/07/mpi-calculating-sum/&quot; target=&quot;_blank&quot; 
    
    </summary>
    
      <category term="Algorithms" scheme="http://yoursite.com/categories/Algorithms/"/>
    
      <category term="Programming" scheme="http://yoursite.com/categories/Algorithms/Programming/"/>
    
    
      <category term="Algorithms" scheme="http://yoursite.com/tags/Algorithms/"/>
    
      <category term="C#" scheme="http://yoursite.com/tags/C/"/>
    
  </entry>
  
  <entry>
    <title>Warm Up Series (4) – Memory Allocation in CSharp</title>
    <link href="http://yoursite.com/2012/03/04/warm-up-series-4-memory-allocation-in-csharp/"/>
    <id>http://yoursite.com/2012/03/04/warm-up-series-4-memory-allocation-in-csharp/</id>
    <published>2012-03-04T13:45:34.000Z</published>
    <updated>2016-10-23T13:39:54.000Z</updated>
    
    <content type="html"><![CDATA[<p>在写完上一篇文章后，开始联想到.NET的内存管理机制，于是继续Google出一些文章，大概对C#中的内存管理有了了解。C#的内存管理的实现是在操作系统内存管理之上的，特别是托管堆的3 generations的设计，既保护了代码编写的方便性，也充分考虑了性能的优化。</p>
<p>按照MSDN文档介绍，除stackalloc运算符外，C#不提供其他任何方法来操作非托管的内存。所以这些服务通常只能由基础操作系统导入。<a href="http://msdn.microsoft.com/zh-cn/library/aa664786(v=vs.71" target="_blank" rel="external">这里的例子</a>.aspx)通过非安全代码调用系统API实现了托管堆以外的内存管理。</p>
<p>&#160;</p>
<p>转自《<a href="http://www.cnblogs.com/yangjunwl/archive/2008/01/08/1029903.html" target="_blank" rel="external">C#的内存管理：堆栈、托管堆与指针</a>》</p>
<p>在32位的Windows操作系统中，每个进程都可以使用4GB的内存，这得益于虚拟寻址技术，在C#中，虚拟内存有个两个存储变量的区域，堆栈和托管堆；堆栈存储值类型数据，每个线程都有自己的堆栈。而托管堆存储引用类型如类、对象，并受垃圾收集器的管理。当一个类对象不再被使用时，这个对象被存储在堆栈中的引用变量将被删除，但是在托管堆中的对象实例仍然存在，其空间何时被释放取决垃圾收集器。</p>
<p>在C/C++中，程序运行久了可能会产生大量的内存碎片，寻址这些碎片数据也会增加系统开销。在.NET中这种情况得到很大改善，因为垃圾收集器会压缩托管堆的内存空间，保证可用变量在一个连续的内存空间内，同时将堆栈中引用变量中的地址更新为新的地址，虽然这会带来额外的系统开销，但是，其降低了内存碎片程度和内存泄露问题。</p>
<p>另一方面，在某些时候C#程序也需要追求速度，比如对一个含用大量成员的数组操作，因为数组在C#中是System.Array的实例，会存储在托管堆中，这将会对运算造成大量的额外的操作，因为除了垃圾收集器除了会压缩托管堆、更新引用地址、还会维护托管堆的信息列表。所幸的是C#中同样能够通过使用标记为unsafe的代码块调用指针，比如声明一个存储有50个double类型的数组：</p>
<font face="Courier New"><span class="kwrd">double</span> *pDouble = <span class="kwrd">stackalloc</span> <span class="kwrd">double</span>[50];</font>

<p>垃圾收集器和堆管理系统常常涉及为提高性能而作的优化设计。举例来说，垃圾收集遍历整个内存池具有很高的开销。然而，研究表明大部分在托管堆上分配的对象只有很短的生存期，因此堆被分成三个段，称作generations。新分配的对象被放在generation 0中。这个generation是最先被回收的，在这个generation中最有可能找到不再使用的内存，由于它的尺寸很小（小到足以放进处理器的L2 cache中），因此它里面的回收将是最高效的。托管堆的另外一种优化操作与locality of reference规则有关。该规则表明，一起分配的对象经常被一起使用。如果对象们在堆中位置很紧凑的话，高速缓存的性能将会得到提高。由于托管堆的天性，对象们总是被分配在连续的地址上，使得对象们始终彼此靠近。这一点与非托管代码形成了鲜明的对比，在标准堆中，堆很容易变成碎片，而且一起分配的对象经常分得很远。还有一种优化与大对象有关，大对象堆用来放置尺寸超过85K的对象，这部分数据一般不会被GC，但当generation 2发生垃圾会收时，意味着系统可能无法分配所需的内存，这时大对象堆上也需要进行垃圾回收。</p>
<p>再说内存分配，当对象被分配的时候，它们一开始被放在generation 0中。当generation 0的大小快要达到它的上限的时候，一个只在generation 0中执行的回收操作被触发。由于其大小很小，因此这将是一个非常快的过程，其不再使用的对象将被释放，正被使用的对象被整理并移入generation 1中。当generation 1的大小随着从generation 0中移入的对象数量的增加而接近上限时，一个回收动作将会在generation 0和generation 1中执行，不再使用的对象被释放，正在被使用的对象被整理并移入下一个generation中。大部分GC过程的主要目标是generation 0，因为在generation 0中最有可能存在大量的已不再使用的临时对象。对generation 2的回收过程具有很高的开销，此过程只有在generation 0和generation 1的GC过程不能释放足够的内存时才会被触发。如果对generation 2的GC过程仍然不能释放足够的内存，那么系统就会抛出OutOfMemoryException异常。</p>
<p>当然，C#程序中也存在值类型和托管堆不能管理的对象，比如文件名柄、网络连接和数据库连接，这些变量的释放仍需要程序员通过析构函数或IDispose接口来做。对于所有拥有外部资源的类，在这些资源已经不再用到的时候，都应当执行Close或者Dispose方法。Dispose模式通过IDisposable接口来实现，需要清理外部资源的类还应当实现一个终止操作。在C#中，创建终止操作的首选方式是在析构函数中实现，而在Framework层，终止操作的实现则是通过重载System.Object.Finalize 方法。</p>
<p>带有终止操作的对象的垃圾收集过程要稍微复杂一些。当一个带有终止操作的对象被标记为垃圾时，它并不会被立即释放。相反，它会被放置在一个终止队列中，此队列为这个对象建立一个引用，来避免这个对象被回收。后台线程为队列中的每个对象执行它们各自的终止操作，并且将已经执行过终止操作的对象从终止队列中删除。只有那些已经执行过终止操作的对象才会在下一次垃圾回收过程中被从内存中删除。</p>
<p>&#160;</p>
<p>转自《<a href="http://blog.csdn.net/songkexin/article/details/5376389" target="_blank" rel="external">.NET内存分配浅析</a>》</p>
<p>这篇文章中阐述的内容大多和上一篇类似，而且文本比较差，故只摘录一小部分：</p>
<p>托管堆被触发GC的三个可能条件：</p>
<ul>
<li>1、当在托管堆上的generation 0分配内存被耗尽时（最常见），或者分配一个大对象超过了大对象堆的阀值。<em>   2、当显示调用GC.Collect()的时候。</em>   3、当操作系统的内存比较紧张时，这时操作系统会通知垃圾收集器进行GC。  </li>
</ul>
<p>&#160;</p>
<p>转自《<a href="http://www.cnblogs.com/instance/archive/2011/05/24/2056091.html" target="_blank" rel="external">原来是这样：C#中字符串的内存分配与驻留池</a>》</p>
<p>这篇文章主要是对.NET中CLR对String类内存管理上的优化处理进行分析：</p>
<p>CLR维护一个叫做驻留池（Intern Pool）的表。这个表记录了所有在代码中使用字面量声明的字符串实例的引用。使用字面量声明的字符串会进入驻留池，而其他方式声明的字符串则不会进入，也就不会自动享受到CLR防止字符串冗余的机制的好处了。请看这个例子：</p>
<font face="Courier New">StringBuilder sb = new StringBuilder();<br>sb.Append(&quot;He&quot;).Append(&quot;llo&quot;);<br>string s1 = &quot;Hello&quot;;<br>string s2 = sb.ToString();<br>bool same = (object) s1 == (object) s2;</font>

<p>这时由于s2不是通过字面量声明的，CLR在为sb.ToString()方法的返回值分配内存时，并不会到驻留池中检查是否有值为“Hello”的字符串已经存在，所以不会让s2指向驻留池内的对象。为了让编程者能够强制CLR检查驻留池，以避免冗余的字符串副本，String类的设计者提供了一个名为Intern的类方法。下面是该方法的一个示例：</p>
<font face="Courier New">StringBuilder sb = new StringBuilder();<br>sb.Append(&quot;He&quot;).Append(&quot;llo&quot;);<br>string s1 = &quot;Hello&quot;;<br>string s2 = String.Intern(sb.ToString());<br>bool same = (object) s1 == (object) s2;</font>

<p>好了，same又是true了。Intern方法接受一个字符串作为参数，它会在驻留池中检查是否存在参数所表示的字符串。如果存在，则返回那个驻留池中的字符串的引用；否则向驻留池中加入一个新的表示相同值的字符串，并返回这个字符串的引用。不过要注意的是，就算Intern方法在驻留池中找到了相同值的字符串，也不能让您省却一次字符串内存分配的操作，因为作为参数的字符串已经被分配了一次内存了。而使用Intern方法的好处在于，如果Intern方法在驻留池中找到了相同值的字符串，此时虽然在内存中存在两份该字符串的副本（一份是参数，一份是驻留池中的），但是随着时间的流逝，参数所引用的那个副本会被垃圾回收掉，这样对于该字符串内存中就不存在冗余了。</p>
<p>当您的程序中存在某个方法，可以根据不同的上下文环境创建并返回一个很长的字符串，而在程序运行的过程中它有会经常返回同样的字符串时，您可能就要考虑考虑使用Intern方法来提高内存的利用率了。不过同样值得注意的是，使用Intern方法让一个字符串存活于驻留池中也有一个副作用：即使已经不存在任何其它引用指向驻留池中的字符串了，这个字符串仍然不一定会被垃圾回收掉。也就是说即使驻留池中的字符串已经没有用处了，它可能也要等到CLR终结时才被销毁。当您使用Intern方法的时候，也应该考虑到这个特殊的行为。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;在写完上一篇文章后，开始联想到.NET的内存管理机制，于是继续Google出一些文章，大概对C#中的内存管理有了了解。C#的内存管理的实现是在操作系统内存管理之上的，特别是托管堆的3 generations的设计，既保护了代码编写的方便性，也充分考虑了性能的优化。&lt;/p&gt;

    
    </summary>
    
      <category term="Programming" scheme="http://yoursite.com/categories/Programming/"/>
    
      <category term="Warm Up" scheme="http://yoursite.com/categories/Programming/Warm-Up/"/>
    
    
      <category term="C#" scheme="http://yoursite.com/tags/C/"/>
    
  </entry>
  
  <entry>
    <title>Warm Up Series (3) – Dynamic Memory Allocation</title>
    <link href="http://yoursite.com/2012/03/04/warm-up-series-3-dynamic-memory-allocation/"/>
    <id>http://yoursite.com/2012/03/04/warm-up-series-3-dynamic-memory-allocation/</id>
    <published>2012-03-04T09:48:11.000Z</published>
    <updated>2016-10-23T13:39:54.000Z</updated>
    
    <content type="html"><![CDATA[<p>在摘抄完<a href="http://kevinxi.wordpress.com/2012/03/02/warm-up-series-2-process-memory-allocation/" target="_blank" rel="external">第二篇文章</a>后，我又在国外的<a href="http://www.cprogramming.com" target="_blank" rel="external">C编程网站</a>上看到了关于内存管理的系列文章，自认为比从国内论坛上东拼西凑出一套结论更有说服力，故摘抄和翻译部分内容如下：</p>
<p>&#160;</p>
<p>1. 高级内存管理（<a href="http://www.cprogramming.com/tutorial/dynamic_memory_allocation.html" target="_blank" rel="external"><font size="1">Advanced Memory Management</font></a> ）<br>在C++中不提倡使用void<em>指针，在使用多层继承时，基类中对不同子类对象看到的值可能是不一样的（多态，基类指针位置相同，但对象大小的偏移不同）。如果使用void</em>指针，则会破坏C++的多态性，这里应尽早使用dynamic_cast或者static_cast自动纠正指针指向的数据。</p>
<p>使用new[]将动态分配整数组的目标对象的内存，并调用该对象的默认构造函数，返回第一个对象的指针；使用new[]操作符时，只能够使用默认构造函数，无法调用带参数的构造函数。</p>
<p>&#160;</p>
<p>2. 动态内存分配和虚拟内存（<a href="http://www.cprogramming.com/tutorial/virtual_memory_and_heaps.html" target="_blank" rel="external"><font size="1">Dynamic Memory Allocation and Virtual Memory</font></a> ）</p>
<p>一般来说，每个进程的内存地址空间可以分为6个部分：环境区，用于保存环境变量和命令行参数；栈区，用于保存函数参数、返回值、内部变量等；堆区（自由存储区），用于动态分配内存；未初始化的静态或全局变量；初始化的静态或全局变量；代码区，加载代码的区域。</p>
<p><a href="http://kevinxi.files.wordpress.com/2012/03/image.png" target="_blank" rel="external"><img src="http://kevinxi.files.wordpress.com/2012/03/image_thumb.png" alt="image" title="image"></a></p>
<p>堆区实质上是一块连续的有碎片的内存区域。当程序请求动态内存时，系统从堆区剩余未分配的内存空间中，查找满足要求的连续内存块，并返回找到的内存区域的指针。对于堆区内存分配的算法，有的是遍历空余内存并找出最小的满足要求的内存块，有的是找出第一个满足要求的内存块。通常，系统会维护一个空闲内存的二叉数，方便快速的发现和合理分配内存。</p>
<p><a href="http://kevinxi.files.wordpress.com/2012/03/image1.png" target="_blank" rel="external"><img src="http://kevinxi.files.wordpress.com/2012/03/image_thumb1.png" alt="image" title="image"></a>    </p>
<p>3. 用new/delete自定义内存分配（<a href="http://www.cprogramming.com/tutorial/operator_new.html" target="_blank" rel="external"><font size="1">Customized Allocators with Operator New and Operator Delete</font></a> ）</p>
<p>假设你有一个链表，并且你希望提高节点内存分配的速度。那么一种可行的方法是维护一组已经被删除的节点，并且在需要添加新节点的时候重用它们的内存。在此前提下，我们可以重载new运算符，并且试图从删除的节点列表中找到可重用的节点，只有当删除的节点列表为空时，我们再真正的动态申请内存。而delete运算符则简单的将节点加入删除的节点列表中。</p>
<p>另一个重载new/delete运算符的应用是实现内存的垃圾回收，你可以实现一套类似与Java或者C#的内存回收器，这样，当你分配的内存不再被使用时，可以被自动的回收。</p>
<p>&#160;</p>
<p>4. C++常见内存管理问题（<a href="http://www.cprogramming.com/tutorial/c++_memory_problems.html" target="_blank" rel="external"><font size="1">Common Memory Management Problems in C++</font></a>）</p>
<p>这篇文章主要提供了一些检查内存泄露的工具，比如IBM的<a href="http://www-01.ibm.com/software/awdtools/purify/" target="_blank" rel="external">Purify</a>，以及建议使用自定义堆或者智能指针（标准库里面的auto_ptr）来防止内存泄露。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;在摘抄完&lt;a href=&quot;http://kevinxi.wordpress.com/2012/03/02/warm-up-series-2-process-memory-allocation/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;第二篇文章&lt;/a
    
    </summary>
    
      <category term="Programming" scheme="http://yoursite.com/categories/Programming/"/>
    
      <category term="Warm Up" scheme="http://yoursite.com/categories/Programming/Warm-Up/"/>
    
    
      <category term="C#" scheme="http://yoursite.com/tags/C/"/>
    
  </entry>
  
  <entry>
    <title>Warm Up Series (2) – Process Memory Allocation</title>
    <link href="http://yoursite.com/2012/03/02/warm-up-series-2-process-memory-allocation/"/>
    <id>http://yoursite.com/2012/03/02/warm-up-series-2-process-memory-allocation/</id>
    <published>2012-03-02T09:27:07.000Z</published>
    <updated>2016-10-23T13:39:54.000Z</updated>
    
    <content type="html"><![CDATA[<p>C和C++编译器对内存分配的处理并不完全相同，但大致都可以分为两个部分：代码区和数据区；代码区是用来放置代码的，这部分内存在程序加载时就会被分配好；数据区根据网上很多说法，C和C++在这方面也只有很小的差别。</p>
<p>1. C程序数据区内存</p>
<p><strong>栈</strong> - 由编译器自动分配释放，存放为运行函数而分配的局部变量、函数参数、返回数据、返回地址等，其操作方式类似于数据结构中的栈。通过alloca方法可以在栈上手动的分配内存，栈的动态分配和堆是不同的，他的动态分配是由编译器进行释放，无需我们手工实现。不过此举并不被推荐，详见<a href="http://stackoverflow.com/questions/1018853/why-is-alloca-not-considered-good-practice" target="_blank" rel="external">此</a>文章。<br><strong>堆</strong> - 由程序分配释放，若程序不释放，在程序结束时操作系统一般会回收泄露的内存。一般是在堆的头部用一个字节存放堆的大小。堆中的具体内容有程序员安排。<br><strong>全局/静态区</strong> - 全局变量和静态变量的存储是在一块的，初始化的全局变量和静态变量在一块区域，未初始化的在相邻的一块区域，均在程序结束时释放。<br><strong>常量</strong> - 放置程序中的常量，程序结束时释放。</p>
<p>2. C++程序数据区内存</p>
<p><strong>栈 </strong>- 同上。<br><strong>堆 </strong>- 程序中由malloc和free来控制分配和回收的内存块，若程序不释放，在程序结束时由操作系统回收。<br><strong>自由存储区</strong> – 程序中由new和delete来控制分配和回收的内存块，若程序不释放，在程序结束时由操作系统回收。<br><strong>全局/静态区</strong> - 全局变量和静态变量被分配到同一块内存中，在以前的C语言中，全局变量又分为初始化的和未初始化的，在C++里面没有这个区分了，他们共同占用同一块内存区。<br><strong>常量 </strong>- 同上。</p>
<p>3. 自由存储区和堆区的区别</p>
<font color="#000000">以上内容从</font><a href="http://www.cppblog.com/zhaoyg/archive/2008/05/30/51587.html" target="_blank" rel="external"><font color="#000000">此</font></a><font color="#000000">文章整理而出，原文对C++中自由存储区和堆的介绍有错误，正确的介绍可以参考</font><a href="http://www.gotw.ca/gotw/009.htm" target="_blank" rel="external"><font color="#000000">英文原文</font></a><font color="#000000">，相关部分中文翻译如下：</font><br>  &gt; 自由存储区是C++两个动态内存区域之一，使用new和delete来予以分配和释放。在自由存储区中，对象的生存周期可以比存放它的内存区的生存周期短；也就是说，我们可以获得一片内存区而不用马上对其进行初始化；同时，在对象被销毁之后，也不用马上收回其占用的内存区。在对象被销毁而其占用的内存区还未被收回的这段时间内，我们可以通过void*的指针访问这片区域，但是其原始对象的非静态成员以及成员函数（即使我们知道了它们的地址）都不能被访问或者操纵。<br>&gt;<br>&gt; 堆区是另一个动态存储区域，使用malloc和free以及他们的变形体来进行分配和回收。要注意，虽然在特定的编译器里缺省的全局运算符new和delete也许会按照malloc和free的方式来被实现，但是堆与自由存储区是不同的——<font color="#666666">在某一个区域内被分配的内存不能在另一个区域内被安全的回收。</font>堆中被分配的内存一般用于对类对象进行placement-new的构造和explicit的析构。堆中对象的生存周期与自由存储区中的类似。<br><br><font color="#000000">C++中关于自由存储区和堆区的区别并不能统一而论，在写代码时，只要保证new-delete和malloc-free的对应关系，已经可以有效防止编译器实现差异造成的问题。</font>

<p>4. 堆区和栈区的主要区别 </p>
<p><strong>管理方式</strong>：对于栈来讲，是由编译器自动管理，无需我们手工控制；对于堆来说，释放工作由程序员控制，操作不当会产生内存泄露。 </p>
<p><strong>空间大小</strong>：一般来讲在32位系统下，堆内存可以达到4G的空间，从这个角度来看堆内存几乎是没有什么限制的。但是对于栈来讲，一般都是有一定的空间大小的，在WINDOWS下，栈的大小是2M（VC6下默认的栈空间大小是1M，总之是一个编译时就确定的常数），如果申请的空间超过栈的剩余空间，将提示栈溢出。因此，能从栈获得的空间较小。当然，这个值可以修改。 </p>
<p><strong>碎片问题</strong>：对于堆来讲，频繁的new/delete势必会造成内存空间的不连续，从而造成大量的碎片，使程序效率降低。对于栈来讲，则不会存在这个问题，因为栈是先进后出的队列。 </p>
<p><strong>生长方向</strong>：对于堆来讲，生长方向是向上的，也就是向着内存地址增加的方向；对于栈来讲，它的生长方向是向下的，是向着内存地址减小的方向增长。 </p>
<p><strong>分配方式</strong>：堆都是动态分配的，没有静态分配的堆。栈有2种分配方式：静态分配和动态分配。静态分配是编译器完成的，比如局部变量的分配。动态分配由alloca函数进行分配，但是栈的动态分配和堆是不同的，他的动态分配是由编译器进行释放，无需我们手工实现。 </p>
<p><strong>分配效率</strong>：栈是机器系统提供的数据结构，计算机会在底层对栈提供支持：分配专门的寄存器存放栈的地址，压栈出栈都有专门的指令执行，这就决定了栈的效率比较高。堆则是C/C++函数库提供的，它的机制是很复杂的，例如为了分配一块内存，库函数会按照一定的算法在堆内存中搜索可用的足够大小的空间，如果没有足够大小的空间（可能是由于内存碎片太多），就有可能调用系统功能去增加程序数据段的内存空间，这样就有机会分到足够大小的内存，然后返回。显然，堆的效率比栈要低得多。</p>
<p>从这里我们可以看到，堆和栈相比，由于大量new/delete的使用，容易造成大量的内存碎片；由于没有专门的系统支持，效率很低；由于可能引发用户态和核心态的切换，内存的申请，代价变得更加昂贵。所以栈在程序中是应用最广泛的，就算是函数的调用也利用栈去完成，函数调用过程中的参数，返回地址，EBP和局部变量都采用栈的方式存放。</p>
<p>虽然栈有如此众多的好处，但是由于和堆相比不是那么灵活，有时候分配大量的内存空间，还是用堆好一些。另外，如果有人把堆栈合起来说，那它的意思是栈，可不是堆。</p>
<p>5. new/delete与malloc/free比较</p>
<p>从C++角度上说，使用new分配堆空间<font color="#ff0000">可以调用类的构造函数</font>，而malloc()函数仅仅是一个函数调用，它不会调用构造函数，它所接受的参数是一个unsigned long类型。同样，delete在释放堆空间之前<font color="#ff0000">会调用析构函数</font>，而free函数则不会。</p>
<p>从结果可以看出，使用new/delete可以调用对象的构造函数与析构函数，并且示例中调用的是一个非默认构造函数。在堆上分配对象数组时，只能调用默认构造函数，不能调用其他任何构造函数。</p>
<p>&#160;</p>
<font color="#ff0000">Update: 关于程序内存结构的说明众说纷纭，在看了国外权威网站的英文介绍后，我认为</font><a href="http://www.diybl.com/course/3_program/c++/cppjs/20110103/552239.html" target="_blank" rel="external"><font color="#ff0000">这一篇</font></a><font color="#ff0000">中文文章的解释与英文版比较接近，另外，也可以参考</font><a href="http://www.cprogramming.com/tutorial/virtual_memory_and_heaps.html" target="_blank" rel="external"><font color="#ff0000">这篇</font></a><font color="#ff0000">英文原文。</font>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;C和C++编译器对内存分配的处理并不完全相同，但大致都可以分为两个部分：代码区和数据区；代码区是用来放置代码的，这部分内存在程序加载时就会被分配好；数据区根据网上很多说法，C和C++在这方面也只有很小的差别。&lt;/p&gt;
&lt;p&gt;1. C程序数据区内存&lt;/p&gt;
&lt;p&gt;&lt;stron
    
    </summary>
    
      <category term="Programming" scheme="http://yoursite.com/categories/Programming/"/>
    
      <category term="Warm Up" scheme="http://yoursite.com/categories/Programming/Warm-Up/"/>
    
    
      <category term="C#" scheme="http://yoursite.com/tags/C/"/>
    
  </entry>
  
  <entry>
    <title>Warm Up Series (1) – C/C++ Compilation Procedure</title>
    <link href="http://yoursite.com/2012/03/02/warm-up-series-1-cc-compilation-procedure/"/>
    <id>http://yoursite.com/2012/03/02/warm-up-series-1-cc-compilation-procedure/</id>
    <published>2012-03-02T07:12:17.000Z</published>
    <updated>2016-10-23T13:39:54.000Z</updated>
    
    <content type="html"><![CDATA[<p>转自：<a href="http://www.52rd.com/Blog/Detail_RD.Blog_hustsimoon_5196.html" target="_blank" rel="external">hustsimoon的专栏《源程序怎么变成可执行文件—初学C语言难免碰到的困惑》</a></p>
<p>&#160;</p>
<p>电子计算机所使用的是由“0”和“1”组成的二进制数，二进制是计算机的语言的基础。计算机发明之初，人们只能用计算机语言去命令计算机干这干那，写出一串串由“0”和“1”组成的指令序列交由计算机执行，这就是机器语言。</p>
<p>为了减轻使用机器语言编程的痛苦，人们进行了一种有益的改进：用一些简洁的英文字母、符号串来替代一些特定的指令的二进制串，比如，用“ADD”代表加法，“MOV”代表数据传递等，这样一来，人们很容易读懂并理解程序在干什么，纠错及维护都变得方便了，这种程序设计语言就称为汇编语言，即第二代计算机语言。然而计算机是不认识这些符号的，这就需要一个专门的程序，专门负责将这些符号翻译成二进制数的机器语言，这种翻译程序被称为汇编程序。<u>汇编指令和机器语言之间有着一一对应的关系</u>。</p>
<p>高级语言是偏向人，按照人的思维方式设计的，机器对这些可是莫名奇妙，不知所谓。于是必须要有一个桥梁来衔接两者。当你越想方便，那桥就得越复杂。那高级语言是如何变成机器语言的呢，这个过程让我慢慢道来。</p>
<p>编译：将源代码转换为机器可认识代码的过程。编译程序读取源程序（字符流），对之进行<u>词法和语法的分析</u>，<u>将高级语言指令转换为功能等效的汇编代码</u>，再由汇编程序转换为机器语言，并且按照操作系统对可执行文件格式的要求链接生成可执行程序。</p>
<font color="#ff0000">C源程序－&gt;编译预处理－&gt;编译－&gt;优化程序－&gt;汇编程序－&gt;链接程序－&gt;可执行文件</font>

<p>1. 编译预处理</p>
<p>伪指令主要包括以下四个方面</p>
<p>（1）宏定义指令，如 #define,#undef等。对于前一个伪指令，预编译所要作得的是字符串替换，注意其中字符串常量不会被替换。对于后者，则将取消对某个宏的定义，以后该串的出现将不再被替换。</p>
<p>（2）条件编译指令，如#ifdef,#ifndef,#else,#elif,#endif等等。这些伪指令的引入使得程序员可以通过定义不同的宏来决定编译程序对哪些代码进行处理。预编译程序将根据有关的文件，将那些不必要的代码过滤掉。</p>
<p>（3）头文件包含指令，如#include &quot;xxx&quot;或者#include &lt;xxx&gt;等。预编译程序将把头文件中的定义统统都加入到它所产生的输出文件中，以供编译程序对之进行处理。</p>
<p>（4）特殊符号，预编译程序可以识别一些特殊的符号。例如在源程序中出现的LINE标识将被解释为当前行号（十进制数），FILE则被解释为当前被编译的C源程序的名称。预编译程序对于在源程序中出现的这些串将用合适的值进行替换。</p>
<p>预编译程序所完成的基本上是对源程序的“替代”工作。经过此种替代，生成一个没有宏定义、条件编译指令、特殊符号的输出文件。这个文件的含义同没有经过预处理的源文件是相同的，但内容有所不同。下一步，此输出文件将作为编译程序的输入而被翻译成为机器指令。</p>
<p>2. 编译阶段</p>
<p>编译程序所要作得工作就是通过词法分析和语法分析，在确认所有的指令都符合语法规则之后，将其翻译成等价的中间代码表示或汇编代码。</p>
<p>3.优化阶段</p>
<p>优化处理是编译系统中一项比较艰深的技术。它涉及到的问题不仅同编译技术本身有关，而且同机器的硬件环境也有很大的关系。优化一部分是对中间代码的优化。这种优化不依赖于具体的计算机。另一种优化则主要针对目标代码的生成而进行的。</p>
<p>对于前一种优化，主要的工作是删除公共表达式、循环优化（代码外提、强度削弱、变换循环控制条件、已知量的合并等）、复写传播，以及无用赋值的删除，等等。</p>
<p>后一种类型的优化同机器的硬件结构密切相关，最主要的是考虑是如何充分利用机器的各个硬件寄存器存放的有关变量的值，以减少对于内存的访问次数。另外，根据机器硬件执行指令的特点（如流水线、RISC、CISC、VLIW等）而对指令进行一些调整使得目标代码较短，执行的效率较高。</p>
<p>4.汇编过程</p>
<p>汇编过程实际上指把汇编语言代码翻译成目标机器指令的过程。对于被翻译系统处理的每一个C语言源程序，都将最终经过这一处理而得到相应的目标文件。目标文件中所存放的也就是与源程序等效的目标的机器语言代码。</p>
<p>目标文件由段组成。通常一个目标文件中至少有两个段：</p>
<p>代码段 该段中所包含的主要是程序的指令。该段一般是可读和可执行的，但一般却不可写。</p>
<p>数据段 主要存放程序中要用到的各种全局变量或静态的数据。一般数据段都是可读，可写，可执行的。</p>
<p>5.链接程序</p>
<p>由汇编程序生成的目标文件并不能立即就被执行，其中可能还有许多没有解决的问题。例如，某个源文件中的函数可能引用了另一个源文件中定义的某个符号（如变量或者函数调用等）；在程序中可能调用了某个库文件中的函数，等等。所有的这些问题，都需要经链接程序的处理方能得以解决。</p>
<p>链接程序的主要工作就是将有关的目标文件彼此相连接，也即将在一个文件中引用的符号同该符号在另外一个文件中的定义连接起来，使得所有的这些目标文件成为一个能够被操作系统装入执行的统一整体。</p>
<p>根据开发人员指定的同库函数的链接方式的不同，链接处理可分为两种：</p>
<p>（1）静态链接 在这种链接方式下，函数的代码将从其所在地静态链接库中被拷贝到最终的可执行程序中。这样该程序在被执行时这些代码将被装入到该进程的虚拟地址空间中。静态链接库实际上是一个目标文件的集合，其中的每个文件含有库中的一个或者一组相关函数的代码。</p>
<p>（2）动态链接 在此种方式下，函数的代码被放到称作是动态链接库或共享对象的某个目标文件中。链接程序此时所作的只是在最终的可执行程序中记录下共享对象的名字以及其它少量的登记信息。在此可执行文件被执行时，动态链接库的全部内容将被映射到运行时相应进程的虚地址空间。动态链接程序将根据可执行程序中记录的信息找到相应的函数代码。</p>
<p>对于可执行文件中的函数调用，可分别采用动态链接或静态链接的方法。使用动态链接能够使最终的可执行文件比较短小，并且当共享对象被多个进程使用时能节约一些内存，因为在内存中只需要保存一份此共享对象的代码。但并不是使用动态链接就一定比使用静态链接要优越。在某些情况下动态链接可能带来一些性能上损害。</p>
<p>经过上述五个过程，C源程序就最终被转换成可执行文件了。</p>
<p>&#160;</p>
<font color="#ff0000">Update: C++语言中提供了模板功能，模板实例化的过程发生在上述第二阶段，编译阶段。</font>

<p>程序员在使用模板类时最常犯的错误是将模板类视为某种数据类型。模板不是数据类型，模板就是模板；编译器使用模板，通过更换模板参数来创建数据类型，这个过程就是模板实例化；从模板类创建得到的类型称之为特例；模板实例化取决于编译器能够找到可用代码来创建特例(称之为实例化要素)；要创建特例，编译器不但要看到模板的声明，还要看到模板的定义；<u>模板实例化过程是迟钝的，即只能用函数的定义来实现实例化</u>。</p>
<p>对于传统C/C++的开发人员，一个好的习惯是将类的定义写在.h文件中，将类的实现写在.cpp文件中，这种做法在实现C++模板类时，则可以会在链接阶段遇到问题。解决问题的简单方法是将模板类的实现写成内联的形式，或者显示的实例化需要的模板实例，详细可参考<a href="http://blog.csdn.net/look01/article/details/3228134" target="_blank" rel="external">这篇</a>文章。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;转自：&lt;a href=&quot;http://www.52rd.com/Blog/Detail_RD.Blog_hustsimoon_5196.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;hustsimoon的专栏《源程序怎么变成可执行文件—初学C语言
    
    </summary>
    
      <category term="Programming" scheme="http://yoursite.com/categories/Programming/"/>
    
      <category term="Warm Up" scheme="http://yoursite.com/categories/Programming/Warm-Up/"/>
    
    
      <category term="C#" scheme="http://yoursite.com/tags/C/"/>
    
  </entry>
  
  <entry>
    <title>A conclusion on managing ShengYiJie project</title>
    <link href="http://yoursite.com/2012/02/17/a-conclusion-on-managing-shengyijie-project/"/>
    <id>http://yoursite.com/2012/02/17/a-conclusion-on-managing-shengyijie-project/</id>
    <published>2012-02-17T07:19:59.000Z</published>
    <updated>2016-10-23T13:39:54.000Z</updated>
    
    <content type="html"><![CDATA[<p>本文主要对我在管理生意街手机项目过程中犯得一些错误进行记录，方便以后查阅，防止再犯同样的错误。</p>
<p>项目的成败，管理者要负全部的责任。因为项目的第一步是选择要不要做，对于一个有选择权的项目（不是上级压下来的），管理者需要全面的考虑项目的可行性、利润点、潜在风险。</p>
<p>在接手此项目之前，我并没有开发或者管理iPhone和Android项目的经验。因此，在项目过程中，我犯了很多错误，好在最终项目能够顺利结项，而我也从中学到了很多。</p>
<p><strong>面对问题、掌握难点</strong></p>
<p>首当其冲的是“回避问题”，外包软件开发者大多会依赖管理者对项目进度的追踪，往往自己被盯得紧一点，办事效率也会高一点。这次自己做管理者，最大的教训就是：如果管理者不主动尽早把潜在问题看透、说透，在开发后期，从预算、时间上，管理者都要付出几倍的代价。</p>
<p>管理者的另一方是客户，在与客户沟通的时候，不能够吝啬时间；特别是类似生意街手机应用这样的小项目，一定要尽可能的把需求的重点谈清楚，比如一个动画效果、社交网站分享、各个按钮的行为，要做到心中有数，否则这些模糊点，很可能就是后来令你发疯的问题点。</p>
<p><strong>沟通需求、强调后果</strong></p>
<p>本项目种，我在和客户谈好了价格、周期后，才开始从网上找开发者。这样做可能会耽误几天的时间，但其好处在于，可以把需求谈清楚。对于外包项目，开发成本（价格、时间）往往更容易受到需求变动的影响。需求变动的次数越多，开发成本就越昂贵。另外一点，管理者与外包开发者往往是通过IM和邮件沟通，管理者对开发者的能力并不是十分了解；比较保险的做法是尽可能的强调项目中的技术难点，以及无法完成的后果；通过外包平台的On Board记录这些内容，以便于在管理、沟通中掌握主动。</p>
<p><strong>了解能力、沟通时间</strong></p>
<p>尽可能的选择有较多项目经验的开发者。当然，这也要考虑到预算、运气的成分。保守的做法，是选择自己合作过的开发者，因为彼此都比较了解。这一次在选人上，错误的选择了一个在校大学生，虽然他的开发能力、做事态度都满足了我的要求，但项目的周期是在年末，学生因为考试无法抽出充分的时间在项目上，间接的对项目预算、周期造成了负面影响。</p>
<p><strong>分析依赖、确定预期</strong></p>
<p>对依赖关系的了解不够，在本项目中，手机端需要依赖网站的接口。在签订合同时，网站接口并没有实现，而是需要我方提供一个接口需求文档。由此，大致可以分析出客户公司的开发人员与市场人员的沟通并不流畅，管理者理应讲明此问题，并降低对接口部分开发效率、完成质量的预期。事实证明，接口方负责人严重的影响了本项目的开发进度，而我方变相的成为了接口的测试者，并因此耽误了很多时间。在签订合同时，管理者理应对此方面做出详细的说明：谁负责接口开发，谁负责功能性测试，谁负责稳定性测试，谁编写接口文档；因客户方的原因，导致开发进度受影响时，开发周期、项目预算是否可以调整；甚至，管理者可以考虑延期签订合同。</p>
<p><strong>一些细节、减少沟通代价</strong></p>
<p>对于开发者，可以要求提供紧急联系方式，方便在遇到严重问题时，及时联系。可以要求客户提供一个代码托管平台，或者要求其允许使用如Google Code的免费平台，在项目测试阶段，可以要求测试人员使用Issues功能，降低管理者在项目沟通上的权重。</p>
<p><strong>好的心态、第一步很重要</strong></p>
<p>项目的成败是由管理者主导的，所以管理者本人要具备一些积极的心态：掌握主导地位、主动面对困难、保持思维清晰、善于沟通和化解矛盾。在本项目签订合同时，我对项目时间的估计过于乐观，在价格谈判中也稍微软弱，这些导致后来在成本控制、时间管理上的困难。这些问题在生意街手机应用这样的小项目中，暴露的并不明显；不过我认为，如果项目规模较大，这些问题的负面影响将会明显的暴露出来；那时，在时间、价格上的妥协无异于自讨苦吃。</p>
<p>&#160;</p>
<p>最后贴上一段我认为还蛮不错的做人道理，是我父亲发给我的，以示自勉：</p>
<blockquote>
<p>人生三大遗憾：不会选择，不坚持选择，不断地选择；人生三不斗：不与君子斗名，不与小人斗利，不与天地斗巧；人生三大陷阱：大意，轻信，贪婪；人生三大悲哀：遇良师不学，遇良友不交，遇良机不握。人生三大不争：不与领导争锋，不与同事争宠，不与下级争功。</p>
</blockquote>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;本文主要对我在管理生意街手机项目过程中犯得一些错误进行记录，方便以后查阅，防止再犯同样的错误。&lt;/p&gt;
&lt;p&gt;项目的成败，管理者要负全部的责任。因为项目的第一步是选择要不要做，对于一个有选择权的项目（不是上级压下来的），管理者需要全面的考虑项目的可行性、利润点、潜在风险。&lt;
    
    </summary>
    
      <category term="Kevin&#39;s Life" scheme="http://yoursite.com/categories/Kevin-s-Life/"/>
    
      <category term="Phone" scheme="http://yoursite.com/categories/Kevin-s-Life/Phone/"/>
    
      <category term="Programming" scheme="http://yoursite.com/categories/Kevin-s-Life/Phone/Programming/"/>
    
      <category term="Rework" scheme="http://yoursite.com/categories/Kevin-s-Life/Phone/Programming/Rework/"/>
    
      <category term="Summary" scheme="http://yoursite.com/categories/Kevin-s-Life/Phone/Programming/Rework/Summary/"/>
    
    
      <category term="Android" scheme="http://yoursite.com/tags/Android/"/>
    
      <category term="iPhone" scheme="http://yoursite.com/tags/iPhone/"/>
    
      <category term="Rework" scheme="http://yoursite.com/tags/Rework/"/>
    
      <category term="ShengYiJie" scheme="http://yoursite.com/tags/ShengYiJie/"/>
    
  </entry>
  
  <entry>
    <title>An approach to list all Mutex in Windows system.</title>
    <link href="http://yoursite.com/2011/07/12/an-approach-to-list-all-mutex-in-windows-system/"/>
    <id>http://yoursite.com/2011/07/12/an-approach-to-list-all-mutex-in-windows-system/</id>
    <published>2011-07-12T08:16:56.000Z</published>
    <updated>2016-10-23T13:39:54.000Z</updated>
    
    <content type="html"><![CDATA[<p>I found two reference books which are useful in system internal programming: <a href="http://www.amazon.com/Windows-2000-Native-API-Reference/dp/1578701996" target="_blank" rel="external"><em>Windows NT-2000 Native API Reference</em></a>_ _and <a href="http://www.amazon.com/Undocumented-Windows-NT%C2%AE-Prasad-Dabak/dp/0764545698" target="_blank" rel="external"><em>Undocumented Windows NT</em></a><em>.</em></p>
<p>My approach below is copied from sample in book <em>Windows NT-2000 Native API Reference</em>, it lists all system Mutex by tracking Mutex created per process, the 1st part declares all depend structures and methods, then the 2nd part shows a sample usage.</p>
<p>Hope this article be helpful to guys who have such requirement in their apps, any discussions followed up are welcome!</p>
<h3 id="Declarations"><a href="#Declarations" class="headerlink" title="Declarations"></a><em>Declarations</em></h3> <div style="border-bottom:silver 1px solid;text-align:left;border-left:silver 1px solid;line-height:12pt;background-color:#f4f4f4;width:97.5%;font-family:'Courier New', courier, monospace;direction:ltr;max-height:200px;font-size:8pt;overflow:auto;border-top:silver 1px solid;cursor:text;border-right:silver 1px solid;margin:20px 0 10px;padding:4px;" id="codeSnippetWrapper"> <div style="text-align:left;line-height:12pt;background-color:#f4f4f4;width:100%;font-family:'Courier New', courier, monospace;direction:ltr;color:black;font-size:8pt;overflow:visible;border-style:none;padding:0;" id="codeSnippet"><pre style="text-align:left;line-height:12pt;background-color:white;width:100%;font-family:'Courier New', courier, monospace;direction:ltr;color:black;font-size:8pt;overflow:visible;border-style:none;margin:0;padding:0;"><span style="color:#cc6633;">#pragma</span> <span style="color:#cc6633;">warning</span> (disable:4005)</pre><!--CRLF--><pre style="text-align:left;line-height:12pt;background-color:#f4f4f4;width:100%;font-family:'Courier New', courier, monospace;direction:ltr;color:black;font-size:8pt;overflow:visible;border-style:none;margin:0;padding:0;"><span style="color:#cc6633;">#include</span> &lt;windows.h&gt;</pre><!--CRLF--><pre style="text-align:left;line-height:12pt;background-color:white;width:100%;font-family:'Courier New', courier, monospace;direction:ltr;color:black;font-size:8pt;overflow:visible;border-style:none;margin:0;padding:0;"><span style="color:#cc6633;">#include</span> &lt;stdio.h&gt;</pre><!--CRLF--><pre style="text-align:left;line-height:12pt;background-color:#f4f4f4;width:100%;font-family:'Courier New', courier, monospace;direction:ltr;color:black;font-size:8pt;overflow:visible;border-style:none;margin:0;padding:0;"><span style="color:#cc6633;">#include</span> &lt;ntstatus.h&gt;</pre><!--CRLF--><pre style="text-align:left;line-height:12pt;background-color:white;width:100%;font-family:'Courier New', courier, monospace;direction:ltr;color:black;font-size:8pt;overflow:visible;border-style:none;margin:0;padding:0;"><span style="color:#cc6633;">#pragma</span> <span style="color:#cc6633;">warning</span> (<span style="color:#0000ff;">default</span>:4005)</pre><!--CRLF--><pre style="text-align:left;line-height:12pt;background-color:#f4f4f4;width:100%;font-family:'Courier New', courier, monospace;direction:ltr;color:black;font-size:8pt;overflow:visible;border-style:none;margin:0;padding:0;"> </pre><!--CRLF--><pre style="text-align:left;line-height:12pt;background-color:white;width:100%;font-family:'Courier New', courier, monospace;direction:ltr;color:black;font-size:8pt;overflow:visible;border-style:none;margin:0;padding:0;"><span style="color:#008000;">///////////////////////////////////////////////////////////////////////</span></pre><!--CRLF--><pre style="text-align:left;line-height:12pt;background-color:#f4f4f4;width:100%;font-family:'Courier New', courier, monospace;direction:ltr;color:black;font-size:8pt;overflow:visible;border-style:none;margin:0;padding:0;">&nbsp;</pre><!--CRLF--><pre style="text-align:left;line-height:12pt;background-color:white;width:100%;font-family:'Courier New', courier, monospace;direction:ltr;color:black;font-size:8pt;overflow:visible;border-style:none;margin:0;padding:0;"><span style="color:#0000ff;">typedef</span> <span style="color:#0000ff;">struct</span> _LSA_UNICODE_STRING {</pre><!--CRLF--><pre style="text-align:left;line-height:12pt;background-color:#f4f4f4;width:100%;font-family:'Courier New', courier, monospace;direction:ltr;color:black;font-size:8pt;overflow:visible;border-style:none;margin:0;padding:0;">    USHORT Length;</pre><!--CRLF--><pre style="text-align:left;line-height:12pt;background-color:white;width:100%;font-family:'Courier New', courier, monospace;direction:ltr;color:black;font-size:8pt;overflow:visible;border-style:none;margin:0;padding:0;">    USHORT MaximumLength;</pre><!--CRLF--><pre style="text-align:left;line-height:12pt;background-color:#f4f4f4;width:100%;font-family:'Courier New', courier, monospace;direction:ltr;color:black;font-size:8pt;overflow:visible;border-style:none;margin:0;padding:0;">    PWSTR  Buffer;</pre><!--CRLF--><pre style="text-align:left;line-height:12pt;background-color:white;width:100%;font-family:'Courier New', courier, monospace;direction:ltr;color:black;font-size:8pt;overflow:visible;border-style:none;margin:0;padding:0;">} LSA_UNICODE_STRING, <em>PLSA_UNICODE_STRING, UNICODE_STRING, </em>PUNICODE_STRING; </pre><!--CRLF--><pre style="text-align:left;line-height:12pt;background-color:#f4f4f4;width:100%;font-family:'Courier New', courier, monospace;direction:ltr;color:black;font-size:8pt;overflow:visible;border-style:none;margin:0;padding:0;"> </pre><!--CRLF--><pre style="text-align:left;line-height:12pt;background-color:white;width:100%;font-family:'Courier New', courier, monospace;direction:ltr;color:black;font-size:8pt;overflow:visible;border-style:none;margin:0;padding:0;"><span style="color:#0000ff;">typedef</span> <span style="color:#0000ff;">struct</span> _OBJECT_NAME_INFORMATION { </pre><!--CRLF--><pre style="text-align:left;line-height:12pt;background-color:#f4f4f4;width:100%;font-family:'Courier New', courier, monospace;direction:ltr;color:black;font-size:8pt;overflow:visible;border-style:none;margin:0;padding:0;">    UNICODE_STRING Name;</pre><!--CRLF--><pre style="text-align:left;line-height:12pt;background-color:white;width:100%;font-family:'Courier New', courier, monospace;direction:ltr;color:black;font-size:8pt;overflow:visible;border-style:none;margin:0;padding:0;">} OBJECT_NAME_INFORMATION, <em>POBJECT_NAME_INFORMATION;</em></pre><!--CRLF--><pre style="text-align:left;line-height:12pt;background-color:#f4f4f4;width:100%;font-family:'Courier New', courier, monospace;direction:ltr;color:black;font-size:8pt;overflow:visible;border-style:none;margin:0;padding:0;">&nbsp;</pre><!--CRLF--><pre style="text-align:left;line-height:12pt;background-color:white;width:100%;font-family:'Courier New', courier, monospace;direction:ltr;color:black;font-size:8pt;overflow:visible;border-style:none;margin:0;padding:0;"><span style="color:#0000ff;">typedef</span> <span style="color:#0000ff;">enum</span> _POOL_TYPE {</pre><!--CRLF--><pre style="text-align:left;line-height:12pt;background-color:#f4f4f4;width:100%;font-family:'Courier New', courier, monospace;direction:ltr;color:black;font-size:8pt;overflow:visible;border-style:none;margin:0;padding:0;">    NonPagedPool,</pre><!--CRLF--><pre style="text-align:left;line-height:12pt;background-color:white;width:100%;font-family:'Courier New', courier, monospace;direction:ltr;color:black;font-size:8pt;overflow:visible;border-style:none;margin:0;padding:0;">    PagedPool,</pre><!--CRLF--><pre style="text-align:left;line-height:12pt;background-color:#f4f4f4;width:100%;font-family:'Courier New', courier, monospace;direction:ltr;color:black;font-size:8pt;overflow:visible;border-style:none;margin:0;padding:0;">    NonPagedPoolMustSucceed,</pre><!--CRLF--><pre style="text-align:left;line-height:12pt;background-color:white;width:100%;font-family:'Courier New', courier, monospace;direction:ltr;color:black;font-size:8pt;overflow:visible;border-style:none;margin:0;padding:0;">    DontUseThisType,</pre><!--CRLF--><pre style="text-align:left;line-height:12pt;background-color:#f4f4f4;width:100%;font-family:'Courier New', courier, monospace;direction:ltr;color:black;font-size:8pt;overflow:visible;border-style:none;margin:0;padding:0;">    NonPagedPoolCacheAligned,</pre><!--CRLF--><pre style="text-align:left;line-height:12pt;background-color:white;width:100%;font-family:'Courier New', courier, monospace;direction:ltr;color:black;font-size:8pt;overflow:visible;border-style:none;margin:0;padding:0;">    PagedPoolCacheAligned,</pre><!--CRLF--><pre style="text-align:left;line-height:12pt;background-color:#f4f4f4;width:100%;font-family:'Courier New', courier, monospace;direction:ltr;color:black;font-size:8pt;overflow:visible;border-style:none;margin:0;padding:0;">    NonPagedPoolCacheAlignedMustS,</pre><!--CRLF--><pre style="text-align:left;line-height:12pt;background-color:white;width:100%;font-family:'Courier New', courier, monospace;direction:ltr;color:black;font-size:8pt;overflow:visible;border-style:none;margin:0;padding:0;">    MaxPoolType,</pre><!--CRLF--><pre style="text-align:left;line-height:12pt;background-color:#f4f4f4;width:100%;font-family:'Courier New', courier, monospace;direction:ltr;color:black;font-size:8pt;overflow:visible;border-style:none;margin:0;padding:0;">    NonPagedPoolSession = 32,</pre><!--CRLF--><pre style="text-align:left;line-height:12pt;background-color:white;width:100%;font-family:'Courier New', courier, monospace;direction:ltr;color:black;font-size:8pt;overflow:visible;border-style:none;margin:0;padding:0;">    PagedPoolSession,</pre><!--CRLF--><pre style="text-align:left;line-height:12pt;background-color:#f4f4f4;width:100%;font-family:'Courier New', courier, monospace;direction:ltr;color:black;font-size:8pt;overflow:visible;border-style:none;margin:0;padding:0;">    NonPagedPoolMustSucceedSession,</pre><!--CRLF--><pre style="text-align:left;line-height:12pt;background-color:white;width:100%;font-family:'Courier New', courier, monospace;direction:ltr;color:black;font-size:8pt;overflow:visible;border-style:none;margin:0;padding:0;">    DontUseThisTypeSession,</pre><!--CRLF--><pre style="text-align:left;line-height:12pt;background-color:#f4f4f4;width:100%;font-family:'Courier New', courier, monospace;direction:ltr;color:black;font-size:8pt;overflow:visible;border-style:none;margin:0;padding:0;">    NonPagedPoolCacheAlignedSession,</pre><!--CRLF--><pre style="text-align:left;line-height:12pt;background-color:white;width:100%;font-family:'Courier New', courier, monospace;direction:ltr;color:black;font-size:8pt;overflow:visible;border-style:none;margin:0;padding:0;">    PagedPoolCacheAlignedSession,</pre><!--CRLF--><pre style="text-align:left;line-height:12pt;background-color:#f4f4f4;width:100%;font-family:'Courier New', courier, monospace;direction:ltr;color:black;font-size:8pt;overflow:visible;border-style:none;margin:0;padding:0;">    NonPagedPoolCacheAlignedMustSSession</pre><!--CRLF--><pre style="text-align:left;line-height:12pt;background-color:white;width:100%;font-family:'Courier New', courier, monospace;direction:ltr;color:black;font-size:8pt;overflow:visible;border-style:none;margin:0;padding:0;">} POOL_TYPE;</pre><!--CRLF--><pre style="text-align:left;line-height:12pt;background-color:#f4f4f4;width:100%;font-family:'Courier New', courier, monospace;direction:ltr;color:black;font-size:8pt;overflow:visible;border-style:none;margin:0;padding:0;">&nbsp;</pre><!--CRLF--><pre style="text-align:left;line-height:12pt;background-color:white;width:100%;font-family:'Courier New', courier, monospace;direction:ltr;color:black;font-size:8pt;overflow:visible;border-style:none;margin:0;padding:0;"><span style="color:#0000ff;">typedef</span> <span style="color:#0000ff;">enum</span> _SYSTEM_INFORMATION_CLASS {</pre><!--CRLF--><pre style="text-align:left;line-height:12pt;background-color:#f4f4f4;width:100%;font-family:'Courier New', courier, monospace;direction:ltr;color:black;font-size:8pt;overflow:visible;border-style:none;margin:0;padding:0;">    SystemHandleInformation = 16,</pre><!--CRLF--><pre style="text-align:left;line-height:12pt;background-color:white;width:100%;font-family:'Courier New', courier, monospace;direction:ltr;color:black;font-size:8pt;overflow:visible;border-style:none;margin:0;padding:0;">} SYSTEM_INFORMATION_CLASS;</pre><!--CRLF--><pre style="text-align:left;line-height:12pt;background-color:#f4f4f4;width:100%;font-family:'Courier New', courier, monospace;direction:ltr;color:black;font-size:8pt;overflow:visible;border-style:none;margin:0;padding:0;"> </pre><!--CRLF--><pre style="text-align:left;line-height:12pt;background-color:white;width:100%;font-family:'Courier New', courier, monospace;direction:ltr;color:black;font-size:8pt;overflow:visible;border-style:none;margin:0;padding:0;"><span style="color:#0000ff;">typedef</span> <span style="color:#0000ff;">struct</span>  _SYSTEM_HANDLE_INFORMATION {</pre><!--CRLF--><pre style="text-align:left;line-height:12pt;background-color:#f4f4f4;width:100%;font-family:'Courier New', courier, monospace;direction:ltr;color:black;font-size:8pt;overflow:visible;border-style:none;margin:0;padding:0;">    ULONG       ProcessId;</pre><!--CRLF--><pre style="text-align:left;line-height:12pt;background-color:white;width:100%;font-family:'Courier New', courier, monospace;direction:ltr;color:black;font-size:8pt;overflow:visible;border-style:none;margin:0;padding:0;">    UCHAR       ObjectTypeNumber;</pre><!--CRLF--><pre style="text-align:left;line-height:12pt;background-color:#f4f4f4;width:100%;font-family:'Courier New', courier, monospace;direction:ltr;color:black;font-size:8pt;overflow:visible;border-style:none;margin:0;padding:0;">    UCHAR       Flags;</pre><!--CRLF--><pre style="text-align:left;line-height:12pt;background-color:white;width:100%;font-family:'Courier New', courier, monospace;direction:ltr;color:black;font-size:8pt;overflow:visible;border-style:none;margin:0;padding:0;">    USHORT      Handle;</pre><!--CRLF--><pre style="text-align:left;line-height:12pt;background-color:#f4f4f4;width:100%;font-family:'Courier New', courier, monospace;direction:ltr;color:black;font-size:8pt;overflow:visible;border-style:none;margin:0;padding:0;">    PVOID       Object;</pre><!--CRLF--><pre style="text-align:left;line-height:12pt;background-color:white;width:100%;font-family:'Courier New', courier, monospace;direction:ltr;color:black;font-size:8pt;overflow:visible;border-style:none;margin:0;padding:0;">    ACCESS_MASK GrantedAccess;</pre><!--CRLF--><pre style="text-align:left;line-height:12pt;background-color:#f4f4f4;width:100%;font-family:'Courier New', courier, monospace;direction:ltr;color:black;font-size:8pt;overflow:visible;border-style:none;margin:0;padding:0;">} SYSTEM_HANDLE_INFORMATION,  PSYSTEM_HANDLE_INFORMATION;</pre><!--CRLF--><pre style="text-align:left;line-height:12pt;background-color:white;width:100%;font-family:'Courier New', courier, monospace;direction:ltr;color:black;font-size:8pt;overflow:visible;border-style:none;margin:0;padding:0;"> </pre><!--CRLF--><pre style="text-align:left;line-height:12pt;background-color:#f4f4f4;width:100%;font-family:'Courier New', courier, monospace;direction:ltr;color:black;font-size:8pt;overflow:visible;border-style:none;margin:0;padding:0;"><span style="color:#0000ff;">typedef</span> <span style="color:#0000ff;">enum</span> _OBJECT_INFORMATION_CLASS {</pre><!--CRLF--><pre style="text-align:left;line-height:12pt;background-color:white;width:100%;font-family:'Courier New', courier, monospace;direction:ltr;color:black;font-size:8pt;overflow:visible;border-style:none;margin:0;padding:0;">    ObjectBasicInformation,</pre><!--CRLF--><pre style="text-align:left;line-height:12pt;background-color:#f4f4f4;width:100%;font-family:'Courier New', courier, monospace;direction:ltr;color:black;font-size:8pt;overflow:visible;border-style:none;margin:0;padding:0;">    ObjectNameInformation,</pre><!--CRLF--><pre style="text-align:left;line-height:12pt;background-color:white;width:100%;font-family:'Courier New', courier, monospace;direction:ltr;color:black;font-size:8pt;overflow:visible;border-style:none;margin:0;padding:0;">    ObjectTypeInformation,</pre><!--CRLF--><pre style="text-align:left;line-height:12pt;background-color:#f4f4f4;width:100%;font-family:'Courier New', courier, monospace;direction:ltr;color:black;font-size:8pt;overflow:visible;border-style:none;margin:0;padding:0;">    ObjectAllTypesInformation,</pre><!--CRLF--><pre style="text-align:left;line-height:12pt;background-color:white;width:100%;font-family:'Courier New', courier, monospace;direction:ltr;color:black;font-size:8pt;overflow:visible;border-style:none;margin:0;padding:0;">    ObjectHandleInformation</pre><!--CRLF--><pre style="text-align:left;line-height:12pt;background-color:#f4f4f4;width:100%;font-family:'Courier New', courier, monospace;direction:ltr;color:black;font-size:8pt;overflow:visible;border-style:none;margin:0;padding:0;">} OBJECT_INFORMATION_CLASS;</pre><!--CRLF--><pre style="text-align:left;line-height:12pt;background-color:white;width:100%;font-family:'Courier New', courier, monospace;direction:ltr;color:black;font-size:8pt;overflow:visible;border-style:none;margin:0;padding:0;">&nbsp;</pre><!--CRLF--><pre style="text-align:left;line-height:12pt;background-color:#f4f4f4;width:100%;font-family:'Courier New', courier, monospace;direction:ltr;color:black;font-size:8pt;overflow:visible;border-style:none;margin:0;padding:0;"><span style="color:#0000ff;">typedef</span> <span style="color:#0000ff;">struct</span>  _OBJECT_BASIC_INFORMATION {</pre><!--CRLF--><pre style="text-align:left;line-height:12pt;background-color:white;width:100%;font-family:'Courier New', courier, monospace;direction:ltr;color:black;font-size:8pt;overflow:visible;border-style:none;margin:0;padding:0;">    ULONG           Attributes;</pre><!--CRLF--><pre style="text-align:left;line-height:12pt;background-color:#f4f4f4;width:100%;font-family:'Courier New', courier, monospace;direction:ltr;color:black;font-size:8pt;overflow:visible;border-style:none;margin:0;padding:0;">    ACCESS_MASK     GrantedAccess;</pre><!--CRLF--><pre style="text-align:left;line-height:12pt;background-color:white;width:100%;font-family:'Courier New', courier, monospace;direction:ltr;color:black;font-size:8pt;overflow:visible;border-style:none;margin:0;padding:0;">    ULONG           HandleCount;</pre><!--CRLF--><pre style="text-align:left;line-height:12pt;background-color:#f4f4f4;width:100%;font-family:'Courier New', courier, monospace;direction:ltr;color:black;font-size:8pt;overflow:visible;border-style:none;margin:0;padding:0;">    ULONG           PointerCount;</pre><!--CRLF--><pre style="text-align:left;line-height:12pt;background-color:white;width:100%;font-family:'Courier New', courier, monospace;direction:ltr;color:black;font-size:8pt;overflow:visible;border-style:none;margin:0;padding:0;">    ULONG           PagedPoolUsage;</pre><!--CRLF--><pre style="text-align:left;line-height:12pt;background-color:#f4f4f4;width:100%;font-family:'Courier New', courier, monospace;direction:ltr;color:black;font-size:8pt;overflow:visible;border-style:none;margin:0;padding:0;">    ULONG           NonPagedPoolUsage;</pre><!--CRLF--><pre style="text-align:left;line-height:12pt;background-color:white;width:100%;font-family:'Courier New', courier, monospace;direction:ltr;color:black;font-size:8pt;overflow:visible;border-style:none;margin:0;padding:0;">    ULONG           Reserved    [   3];</pre><!--CRLF--><pre style="text-align:left;line-height:12pt;background-color:#f4f4f4;width:100%;font-family:'Courier New', courier, monospace;direction:ltr;color:black;font-size:8pt;overflow:visible;border-style:none;margin:0;padding:0;">    ULONG           NameInformationLength;</pre><!--CRLF--><pre style="text-align:left;line-height:12pt;background-color:white;width:100%;font-family:'Courier New', courier, monospace;direction:ltr;color:black;font-size:8pt;overflow:visible;border-style:none;margin:0;padding:0;">    ULONG           TypeInformationLength;</pre><!--CRLF--><pre style="text-align:left;line-height:12pt;background-color:#f4f4f4;width:100%;font-family:'Courier New', courier, monospace;direction:ltr;color:black;font-size:8pt;overflow:visible;border-style:none;margin:0;padding:0;">    ULONG           SecurityDescriptorLength;</pre><!--CRLF--><pre style="text-align:left;line-height:12pt;background-color:white;width:100%;font-family:'Courier New', courier, monospace;direction:ltr;color:black;font-size:8pt;overflow:visible;border-style:none;margin:0;padding:0;">    LARGE_INTEGER   CreateTime;</pre><!--CRLF--><pre style="text-align:left;line-height:12pt;background-color:#f4f4f4;width:100%;font-family:'Courier New', courier, monospace;direction:ltr;color:black;font-size:8pt;overflow:visible;border-style:none;margin:0;padding:0;">} OBJECT_BASIC_INFORMATION,   <em>POBJECT_BASIC_INFORMATION;</em></pre><!--CRLF--><pre style="text-align:left;line-height:12pt;background-color:white;width:100%;font-family:'Courier New', courier, monospace;direction:ltr;color:black;font-size:8pt;overflow:visible;border-style:none;margin:0;padding:0;">&nbsp;</pre><!--CRLF--><pre style="text-align:left;line-height:12pt;background-color:#f4f4f4;width:100%;font-family:'Courier New', courier, monospace;direction:ltr;color:black;font-size:8pt;overflow:visible;border-style:none;margin:0;padding:0;"><span style="color:#0000ff;">typedef</span> <span style="color:#0000ff;">struct</span>  _OBJECT_TYPE_INFORMATION {</pre><!--CRLF--><pre style="text-align:left;line-height:12pt;background-color:white;width:100%;font-family:'Courier New', courier, monospace;direction:ltr;color:black;font-size:8pt;overflow:visible;border-style:none;margin:0;padding:0;">    UNICODE_STRING  Name;</pre><!--CRLF--><pre style="text-align:left;line-height:12pt;background-color:#f4f4f4;width:100%;font-family:'Courier New', courier, monospace;direction:ltr;color:black;font-size:8pt;overflow:visible;border-style:none;margin:0;padding:0;">    ULONG           ObjectCount;</pre><!--CRLF--><pre style="text-align:left;line-height:12pt;background-color:white;width:100%;font-family:'Courier New', courier, monospace;direction:ltr;color:black;font-size:8pt;overflow:visible;border-style:none;margin:0;padding:0;">    ULONG           HandleCount;</pre><!--CRLF--><pre style="text-align:left;line-height:12pt;background-color:#f4f4f4;width:100%;font-family:'Courier New', courier, monospace;direction:ltr;color:black;font-size:8pt;overflow:visible;border-style:none;margin:0;padding:0;">    ULONG           Reserved1   [   4];</pre><!--CRLF--><pre style="text-align:left;line-height:12pt;background-color:white;width:100%;font-family:'Courier New', courier, monospace;direction:ltr;color:black;font-size:8pt;overflow:visible;border-style:none;margin:0;padding:0;">    ULONG           PeakObjectCount;</pre><!--CRLF--><pre style="text-align:left;line-height:12pt;background-color:#f4f4f4;width:100%;font-family:'Courier New', courier, monospace;direction:ltr;color:black;font-size:8pt;overflow:visible;border-style:none;margin:0;padding:0;">    ULONG           PeakHandleCount;</pre><!--CRLF--><pre style="text-align:left;line-height:12pt;background-color:white;width:100%;font-family:'Courier New', courier, monospace;direction:ltr;color:black;font-size:8pt;overflow:visible;border-style:none;margin:0;padding:0;">    ULONG           Reserved2   [   4];</pre><!--CRLF--><pre style="text-align:left;line-height:12pt;background-color:#f4f4f4;width:100%;font-family:'Courier New', courier, monospace;direction:ltr;color:black;font-size:8pt;overflow:visible;border-style:none;margin:0;padding:0;">    ULONG           InvalidAttributes;</pre><!--CRLF--><pre style="text-align:left;line-height:12pt;background-color:white;width:100%;font-family:'Courier New', courier, monospace;direction:ltr;color:black;font-size:8pt;overflow:visible;border-style:none;margin:0;padding:0;">    GENERIC_MAPPING GenericMapping;</pre><!--CRLF--><pre style="text-align:left;line-height:12pt;background-color:#f4f4f4;width:100%;font-family:'Courier New', courier, monospace;direction:ltr;color:black;font-size:8pt;overflow:visible;border-style:none;margin:0;padding:0;">    ULONG           ValidAccess;</pre><!--CRLF--><pre style="text-align:left;line-height:12pt;background-color:white;width:100%;font-family:'Courier New', courier, monospace;direction:ltr;color:black;font-size:8pt;overflow:visible;border-style:none;margin:0;padding:0;">    UCHAR           Unknown;</pre><!--CRLF--><pre style="text-align:left;line-height:12pt;background-color:#f4f4f4;width:100%;font-family:'Courier New', courier, monospace;direction:ltr;color:black;font-size:8pt;overflow:visible;border-style:none;margin:0;padding:0;">    BOOLEAN         MaintainHandleDatabase;</pre><!--CRLF--><pre style="text-align:left;line-height:12pt;background-color:white;width:100%;font-family:'Courier New', courier, monospace;direction:ltr;color:black;font-size:8pt;overflow:visible;border-style:none;margin:0;padding:0;">    POOL_TYPE        PoolType;</pre><!--CRLF--><pre style="text-align:left;line-height:12pt;background-color:#f4f4f4;width:100%;font-family:'Courier New', courier, monospace;direction:ltr;color:black;font-size:8pt;overflow:visible;border-style:none;margin:0;padding:0;">    ULONG           PagedPoolUsage;</pre><!--CRLF--><pre style="text-align:left;line-height:12pt;background-color:white;width:100%;font-family:'Courier New', courier, monospace;direction:ltr;color:black;font-size:8pt;overflow:visible;border-style:none;margin:0;padding:0;">    ULONG           NonPagedPoolUsage;</pre><!--CRLF--><pre style="text-align:left;line-height:12pt;background-color:#f4f4f4;width:100%;font-family:'Courier New', courier, monospace;direction:ltr;color:black;font-size:8pt;overflow:visible;border-style:none;margin:0;padding:0;">} OBJECT_TYPE_INFORMATION,    POBJECT_TYPE_INFORMATION;</pre><!--CRLF--><pre style="text-align:left;line-height:12pt;background-color:white;width:100%;font-family:'Courier New', courier, monospace;direction:ltr;color:black;font-size:8pt;overflow:visible;border-style:none;margin:0;padding:0;">&nbsp;</pre><!--CRLF--><pre style="text-align:left;line-height:12pt;background-color:#f4f4f4;width:100%;font-family:'Courier New', courier, monospace;direction:ltr;color:black;font-size:8pt;overflow:visible;border-style:none;margin:0;padding:0;"><span style="color:#0000ff;">typedef</span> NTSTATUS (_stdcall <em>PZWQUERYSYSTEMINFORMATION) (</em></pre><!--CRLF--><pre style="text-align:left;line-height:12pt;background-color:white;width:100%;font-family:'Courier New', courier, monospace;direction:ltr;color:black;font-size:8pt;overflow:visible;border-style:none;margin:0;padding:0;">    SYSTEM_INFORMATION_CLASS,</pre><!--CRLF--><pre style="text-align:left;line-height:12pt;background-color:#f4f4f4;width:100%;font-family:'Courier New', courier, monospace;direction:ltr;color:black;font-size:8pt;overflow:visible;border-style:none;margin:0;padding:0;">    PVOID,</pre><!--CRLF--><pre style="text-align:left;line-height:12pt;background-color:white;width:100%;font-family:'Courier New', courier, monospace;direction:ltr;color:black;font-size:8pt;overflow:visible;border-style:none;margin:0;padding:0;">    ULONG,</pre><!--CRLF--><pre style="text-align:left;line-height:12pt;background-color:#f4f4f4;width:100%;font-family:'Courier New', courier, monospace;direction:ltr;color:black;font-size:8pt;overflow:visible;border-style:none;margin:0;padding:0;">    PULONG</pre><!--CRLF--><pre style="text-align:left;line-height:12pt;background-color:white;width:100%;font-family:'Courier New', courier, monospace;direction:ltr;color:black;font-size:8pt;overflow:visible;border-style:none;margin:0;padding:0;">);</pre><!--CRLF--><pre style="text-align:left;line-height:12pt;background-color:#f4f4f4;width:100%;font-family:'Courier New', courier, monospace;direction:ltr;color:black;font-size:8pt;overflow:visible;border-style:none;margin:0;padding:0;">&nbsp;</pre><!--CRLF--><pre style="text-align:left;line-height:12pt;background-color:white;width:100%;font-family:'Courier New', courier, monospace;direction:ltr;color:black;font-size:8pt;overflow:visible;border-style:none;margin:0;padding:0;"><span style="color:#0000ff;">typedef</span> NTSTATUS (_stdcall PZWDUPLICATEOBJECT) (</pre><!--CRLF--><pre style="text-align:left;line-height:12pt;background-color:#f4f4f4;width:100%;font-family:'Courier New', courier, monospace;direction:ltr;color:black;font-size:8pt;overflow:visible;border-style:none;margin:0;padding:0;">    HANDLE,</pre><!--CRLF--><pre style="text-align:left;line-height:12pt;background-color:white;width:100%;font-family:'Courier New', courier, monospace;direction:ltr;color:black;font-size:8pt;overflow:visible;border-style:none;margin:0;padding:0;">    HANDLE,</pre><!--CRLF--><pre style="text-align:left;line-height:12pt;background-color:#f4f4f4;width:100%;font-family:'Courier New', courier, monospace;direction:ltr;color:black;font-size:8pt;overflow:visible;border-style:none;margin:0;padding:0;">    HANDLE,</pre><!--CRLF--><pre style="text-align:left;line-height:12pt;background-color:white;width:100%;font-family:'Courier New', courier, monospace;direction:ltr;color:black;font-size:8pt;overflow:visible;border-style:none;margin:0;padding:0;">    PHANDLE,</pre><!--CRLF--><pre style="text-align:left;line-height:12pt;background-color:#f4f4f4;width:100%;font-family:'Courier New', courier, monospace;direction:ltr;color:black;font-size:8pt;overflow:visible;border-style:none;margin:0;padding:0;">    ACCESS_MASK,</pre><!--CRLF--><pre style="text-align:left;line-height:12pt;background-color:white;width:100%;font-family:'Courier New', courier, monospace;direction:ltr;color:black;font-size:8pt;overflow:visible;border-style:none;margin:0;padding:0;">    ULONG,</pre><!--CRLF--><pre style="text-align:left;line-height:12pt;background-color:#f4f4f4;width:100%;font-family:'Courier New', courier, monospace;direction:ltr;color:black;font-size:8pt;overflow:visible;border-style:none;margin:0;padding:0;">    ULONG</pre><!--CRLF--><pre style="text-align:left;line-height:12pt;background-color:white;width:100%;font-family:'Courier New', courier, monospace;direction:ltr;color:black;font-size:8pt;overflow:visible;border-style:none;margin:0;padding:0;">);</pre><!--CRLF--><pre style="text-align:left;line-height:12pt;background-color:#f4f4f4;width:100%;font-family:'Courier New', courier, monospace;direction:ltr;color:black;font-size:8pt;overflow:visible;border-style:none;margin:0;padding:0;">&nbsp;</pre><!--CRLF--><pre style="text-align:left;line-height:12pt;background-color:white;width:100%;font-family:'Courier New', courier, monospace;direction:ltr;color:black;font-size:8pt;overflow:visible;border-style:none;margin:0;padding:0;"><span style="color:#0000ff;">typedef</span> NTSTATUS (_stdcall *PZWQUERYOBJECT) (</pre><!--CRLF--><pre style="text-align:left;line-height:12pt;background-color:#f4f4f4;width:100%;font-family:'Courier New', courier, monospace;direction:ltr;color:black;font-size:8pt;overflow:visible;border-style:none;margin:0;padding:0;">    HANDLE,</pre><!--CRLF--><pre style="text-align:left;line-height:12pt;background-color:white;width:100%;font-family:'Courier New', courier, monospace;direction:ltr;color:black;font-size:8pt;overflow:visible;border-style:none;margin:0;padding:0;">    OBJECT_INFORMATION_CLASS,</pre><!--CRLF--><pre style="text-align:left;line-height:12pt;background-color:#f4f4f4;width:100%;font-family:'Courier New', courier, monospace;direction:ltr;color:black;font-size:8pt;overflow:visible;border-style:none;margin:0;padding:0;">    PVOID,</pre><!--CRLF--><pre style="text-align:left;line-height:12pt;background-color:white;width:100%;font-family:'Courier New', courier, monospace;direction:ltr;color:black;font-size:8pt;overflow:visible;border-style:none;margin:0;padding:0;">    ULONG,</pre><!--CRLF--><pre style="text-align:left;line-height:12pt;background-color:#f4f4f4;width:100%;font-family:'Courier New', courier, monospace;direction:ltr;color:black;font-size:8pt;overflow:visible;border-style:none;margin:0;padding:0;">    PULONG</pre><!--CRLF--><pre style="text-align:left;line-height:12pt;background-color:white;width:100%;font-family:'Courier New', courier, monospace;direction:ltr;color:black;font-size:8pt;overflow:visible;border-style:none;margin:0;padding:0;">);</pre><!--CRLF--><pre style="text-align:left;line-height:12pt;background-color:#f4f4f4;width:100%;font-family:'Courier New', courier, monospace;direction:ltr;color:black;font-size:8pt;overflow:visible;border-style:none;margin:0;padding:0;">&nbsp;</pre><!--CRLF--><pre style="text-align:left;line-height:12pt;background-color:white;width:100%;font-family:'Courier New', courier, monospace;direction:ltr;color:black;font-size:8pt;overflow:visible;border-style:none;margin:0;padding:0;"><span style="color:#cc6633;">#define</span> NT_SUCCESS(Status) ((NTSTATUS)(Status) &gt;= 0)</pre><!--CRLF--><pre style="text-align:left;line-height:12pt;background-color:#f4f4f4;width:100%;font-family:'Courier New', courier, monospace;direction:ltr;color:black;font-size:8pt;overflow:visible;border-style:none;margin:0;padding:0;"><span style="color:#cc6633;">#define</span> DUPLICATE_SAME_ATTRIBUTES   0x00000004 </pre><!--CRLF--><pre style="text-align:left;line-height:12pt;background-color:white;width:100%;font-family:'Courier New', courier, monospace;direction:ltr;color:black;font-size:8pt;overflow:visible;border-style:none;margin:0;padding:0;"><span style="color:#cc6633;">#define</span> NtCurrentProcess() ( (HANDLE) -1 )</pre><!--CRLF--><pre style="text-align:left;line-height:12pt;background-color:#f4f4f4;width:100%;font-family:'Courier New', courier, monospace;direction:ltr;color:black;font-size:8pt;overflow:visible;border-style:none;margin:0;padding:0;"> </pre><!--CRLF--><pre style="text-align:left;line-height:12pt;background-color:white;width:100%;font-family:'Courier New', courier, monospace;direction:ltr;color:black;font-size:8pt;overflow:visible;border-style:none;margin:0;padding:0;"><span style="color:#008000;">///////////////////////////////////////////////////////////////////////</span></pre><!--CRLF--><pre style="text-align:left;line-height:12pt;background-color:#f4f4f4;width:100%;font-family:'Courier New', courier, monospace;direction:ltr;color:black;font-size:8pt;overflow:visible;border-style:none;margin:0;padding:0;">&nbsp;</pre><!--CRLF--><pre style="text-align:left;line-height:12pt;background-color:white;width:100%;font-family:'Courier New', courier, monospace;direction:ltr;color:black;font-size:8pt;overflow:visible;border-style:none;margin:0;padding:0;">BOOL EnablePrivilege(LPCWSTR name)</pre><!--CRLF--><pre style="text-align:left;line-height:12pt;background-color:#f4f4f4;width:100%;font-family:'Courier New', courier, monospace;direction:ltr;color:black;font-size:8pt;overflow:visible;border-style:none;margin:0;padding:0;">{</pre><!--CRLF--><pre style="text-align:left;line-height:12pt;background-color:white;width:100%;font-family:'Courier New', courier, monospace;direction:ltr;color:black;font-size:8pt;overflow:visible;border-style:none;margin:0;padding:0;">    TOKEN_PRIVILEGES priv = {1, {0, 0, SE_PRIVILEGE_ENABLED}};</pre><!--CRLF--><pre style="text-align:left;line-height:12pt;background-color:#f4f4f4;width:100%;font-family:'Courier New', courier, monospace;direction:ltr;color:black;font-size:8pt;overflow:visible;border-style:none;margin:0;padding:0;">    LookupPrivilegeValue(0, name, &amp;priv.Privileges[0].Luid);</pre><!--CRLF--><pre style="text-align:left;line-height:12pt;background-color:white;width:100%;font-family:'Courier New', courier, monospace;direction:ltr;color:black;font-size:8pt;overflow:visible;border-style:none;margin:0;padding:0;"> </pre><!--CRLF--><pre style="text-align:left;line-height:12pt;background-color:#f4f4f4;width:100%;font-family:'Courier New', courier, monospace;direction:ltr;color:black;font-size:8pt;overflow:visible;border-style:none;margin:0;padding:0;">    HANDLE hToken;</pre><!--CRLF--><pre style="text-align:left;line-height:12pt;background-color:white;width:100%;font-family:'Courier New', courier, monospace;direction:ltr;color:black;font-size:8pt;overflow:visible;border-style:none;margin:0;padding:0;">    OpenProcessToken(GetCurrentProcess(), TOKEN_ADJUST_PRIVILEGES, &amp;hToken);</pre><!--CRLF--><pre style="text-align:left;line-height:12pt;background-color:#f4f4f4;width:100%;font-family:'Courier New', courier, monospace;direction:ltr;color:black;font-size:8pt;overflow:visible;border-style:none;margin:0;padding:0;"> </pre><!--CRLF--><pre style="text-align:left;line-height:12pt;background-color:white;width:100%;font-family:'Courier New', courier, monospace;direction:ltr;color:black;font-size:8pt;overflow:visible;border-style:none;margin:0;padding:0;">    AdjustTokenPrivileges(hToken, <span style="color:#0000ff;">FALSE</span>, &amp;priv, <span style="color:#0000ff;">sizeof</span> priv, 0, 0);</pre><!--CRLF--><pre style="text-align:left;line-height:12pt;background-color:#f4f4f4;width:100%;font-family:'Courier New', courier, monospace;direction:ltr;color:black;font-size:8pt;overflow:visible;border-style:none;margin:0;padding:0;">    BOOL rv = GetLastError() == ERROR_SUCCESS;</pre><!--CRLF--><pre style="text-align:left;line-height:12pt;background-color:white;width:100%;font-family:'Courier New', courier, monospace;direction:ltr;color:black;font-size:8pt;overflow:visible;border-style:none;margin:0;padding:0;"> </pre><!--CRLF--><pre style="text-align:left;line-height:12pt;background-color:#f4f4f4;width:100%;font-family:'Courier New', courier, monospace;direction:ltr;color:black;font-size:8pt;overflow:visible;border-style:none;margin:0;padding:0;">    CloseHandle(hToken);</pre><!--CRLF--><pre style="text-align:left;line-height:12pt;background-color:white;width:100%;font-family:'Courier New', courier, monospace;direction:ltr;color:black;font-size:8pt;overflow:visible;border-style:none;margin:0;padding:0;">    <span style="color:#0000ff;">return</span> rv;</pre><!--CRLF--><pre style="text-align:left;line-height:12pt;background-color:#f4f4f4;width:100%;font-family:'Courier New', courier, monospace;direction:ltr;color:black;font-size:8pt;overflow:visible;border-style:none;margin:0;padding:0;">}</pre><!--CRLF--></div></div>

<h3 id="Sample-Usage"><a href="#Sample-Usage" class="headerlink" title="Sample Usage"></a><em>Sample Usage</em></h3><div style="border-bottom:silver 1px solid;text-align:left;border-left:silver 1px solid;line-height:12pt;background-color:#f4f4f4;width:97.5%;font-family:'Courier New', courier, monospace;direction:ltr;max-height:200px;font-size:8pt;overflow:auto;border-top:silver 1px solid;cursor:text;border-right:silver 1px solid;margin:20px 0 10px;padding:4px;" id="codeSnippetWrapper"><br><div style="text-align:left;line-height:12pt;background-color:#f4f4f4;width:100%;font-family:'Courier New', courier, monospace;direction:ltr;color:black;font-size:8pt;overflow:visible;border-style:none;padding:0;" id="codeSnippet"><pre style="text-align:left;line-height:12pt;background-color:white;width:100%;font-family:'Courier New', courier, monospace;direction:ltr;color:black;font-size:8pt;overflow:visible;border-style:none;margin:0;padding:0;"><span style="color:#008000;">// Test method for listing all mutex per process.</span></pre><!--CRLF--><pre style="text-align:left;line-height:12pt;background-color:#f4f4f4;width:100%;font-family:'Courier New', courier, monospace;direction:ltr;color:black;font-size:8pt;overflow:visible;border-style:none;margin:0;padding:0;"><span style="color:#0000ff;">int</span> main(<span style="color:#0000ff;">int</span> argc, <span style="color:#0000ff;">char</span> <em>argv[])</em></pre><!--CRLF--><pre style="text-align:left;line-height:12pt;background-color:white;width:100%;font-family:'Courier New', courier, monospace;direction:ltr;color:black;font-size:8pt;overflow:visible;border-style:none;margin:0;padding:0;">{</pre><!--CRLF--><pre style="text-align:left;line-height:12pt;background-color:#f4f4f4;width:100%;font-family:'Courier New', courier, monospace;direction:ltr;color:black;font-size:8pt;overflow:visible;border-style:none;margin:0;padding:0;">    <span style="color:#008000;">// provide your process id here.</span></pre><!--CRLF--><pre style="text-align:left;line-height:12pt;background-color:white;width:100%;font-family:'Courier New', courier, monospace;direction:ltr;color:black;font-size:8pt;overflow:visible;border-style:none;margin:0;padding:0;">    ULONG pid = 612;</pre><!--CRLF--><pre style="text-align:left;line-height:12pt;background-color:#f4f4f4;width:100%;font-family:'Courier New', courier, monospace;direction:ltr;color:black;font-size:8pt;overflow:visible;border-style:none;margin:0;padding:0;"> </pre><!--CRLF--><pre style="text-align:left;line-height:12pt;background-color:white;width:100%;font-family:'Courier New', courier, monospace;direction:ltr;color:black;font-size:8pt;overflow:visible;border-style:none;margin:0;padding:0;">    <span style="color:#008000;">// adjuat process privileges.</span></pre><!--CRLF--><pre style="text-align:left;line-height:12pt;background-color:#f4f4f4;width:100%;font-family:'Courier New', courier, monospace;direction:ltr;color:black;font-size:8pt;overflow:visible;border-style:none;margin:0;padding:0;">    EnablePrivilege(SE_DEBUG_NAME);</pre><!--CRLF--><pre style="text-align:left;line-height:12pt;background-color:white;width:100%;font-family:'Courier New', courier, monospace;direction:ltr;color:black;font-size:8pt;overflow:visible;border-style:none;margin:0;padding:0;"> </pre><!--CRLF--><pre style="text-align:left;line-height:12pt;background-color:#f4f4f4;width:100%;font-family:'Courier New', courier, monospace;direction:ltr;color:black;font-size:8pt;overflow:visible;border-style:none;margin:0;padding:0;">    <span style="color:#008000;">// load dll into memory.</span></pre><!--CRLF--><pre style="text-align:left;line-height:12pt;background-color:white;width:100%;font-family:'Courier New', courier, monospace;direction:ltr;color:black;font-size:8pt;overflow:visible;border-style:none;margin:0;padding:0;">    HMODULE hNtDll = LoadLibrary(TEXT(<span style="color:#006080;">“ntdll.dll”</span>));</pre><!--CRLF--><pre style="text-align:left;line-height:12pt;background-color:#f4f4f4;width:100%;font-family:'Courier New', courier, monospace;direction:ltr;color:black;font-size:8pt;overflow:visible;border-style:none;margin:0;padding:0;">    <span style="color:#0000ff;">if</span> (!hNtDll) <span style="color:#0000ff;">return</span> 0;</pre><!--CRLF--><pre style="text-align:left;line-height:12pt;background-color:white;width:100%;font-family:'Courier New', courier, monospace;direction:ltr;color:black;font-size:8pt;overflow:visible;border-style:none;margin:0;padding:0;">&nbsp;</pre><!--CRLF--><pre style="text-align:left;line-height:12pt;background-color:#f4f4f4;width:100%;font-family:'Courier New', courier, monospace;direction:ltr;color:black;font-size:8pt;overflow:visible;border-style:none;margin:0;padding:0;">    <span style="color:#008000;">// initial undocumented apis.</span></pre><!--CRLF--><pre style="text-align:left;line-height:12pt;background-color:white;width:100%;font-family:'Courier New', courier, monospace;direction:ltr;color:black;font-size:8pt;overflow:visible;border-style:none;margin:0;padding:0;">    PZWQUERYSYSTEMINFORMATION ZwQuerySystemInformation = </pre><!--CRLF--><pre style="text-align:left;line-height:12pt;background-color:#f4f4f4;width:100%;font-family:'Courier New', courier, monospace;direction:ltr;color:black;font-size:8pt;overflow:visible;border-style:none;margin:0;padding:0;">        (PZWQUERYSYSTEMINFORMATION)GetProcAddress(hNtDll, <span style="color:#006080;">“ZwQuerySystemInformation”</span>);</pre><!--CRLF--><pre style="text-align:left;line-height:12pt;background-color:white;width:100%;font-family:'Courier New', courier, monospace;direction:ltr;color:black;font-size:8pt;overflow:visible;border-style:none;margin:0;padding:0;">    PZWDUPLICATEOBJECT ZwDuplicateObject = </pre><!--CRLF--><pre style="text-align:left;line-height:12pt;background-color:#f4f4f4;width:100%;font-family:'Courier New', courier, monospace;direction:ltr;color:black;font-size:8pt;overflow:visible;border-style:none;margin:0;padding:0;">        (PZWDUPLICATEOBJECT)GetProcAddress(hNtDll, <span style="color:#006080;">“ZwDuplicateObject”</span>);</pre><!--CRLF--><pre style="text-align:left;line-height:12pt;background-color:white;width:100%;font-family:'Courier New', courier, monospace;direction:ltr;color:black;font-size:8pt;overflow:visible;border-style:none;margin:0;padding:0;">    PZWQUERYOBJECT ZwQueryObject = </pre><!--CRLF--><pre style="text-align:left;line-height:12pt;background-color:#f4f4f4;width:100%;font-family:'Courier New', courier, monospace;direction:ltr;color:black;font-size:8pt;overflow:visible;border-style:none;margin:0;padding:0;">        (PZWQUERYOBJECT)GetProcAddress(hNtDll, <span style="color:#006080;">“ZwQueryObject”</span>);</pre><!--CRLF--><pre style="text-align:left;line-height:12pt;background-color:white;width:100%;font-family:'Courier New', courier, monospace;direction:ltr;color:black;font-size:8pt;overflow:visible;border-style:none;margin:0;padding:0;">&nbsp;</pre><!--CRLF--><pre style="text-align:left;line-height:12pt;background-color:#f4f4f4;width:100%;font-family:'Courier New', courier, monospace;direction:ltr;color:black;font-size:8pt;overflow:visible;border-style:none;margin:0;padding:0;">    <span style="color:#008000;">// get system info, list all process info.</span></pre><!--CRLF--><pre style="text-align:left;line-height:12pt;background-color:white;width:100%;font-family:'Courier New', courier, monospace;direction:ltr;color:black;font-size:8pt;overflow:visible;border-style:none;margin:0;padding:0;">    ULONG n = 0x1000;</pre><!--CRLF--><pre style="text-align:left;line-height:12pt;background-color:#f4f4f4;width:100%;font-family:'Courier New', courier, monospace;direction:ltr;color:black;font-size:8pt;overflow:visible;border-style:none;margin:0;padding:0;">    PULONG p = <span style="color:#0000ff;">new</span> ULONG[n];</pre><!--CRLF--><pre style="text-align:left;line-height:12pt;background-color:white;width:100%;font-family:'Courier New', courier, monospace;direction:ltr;color:black;font-size:8pt;overflow:visible;border-style:none;margin:0;padding:0;">    <span style="color:#0000ff;">while</span> (ZwQuerySystemInformation(SystemHandleInformation, p, n  <span style="color:#0000ff;">sizeof</span> <em>p, 0)</em></pre><!--CRLF--><pre style="text-align:left;line-height:12pt;background-color:#f4f4f4;width:100%;font-family:'Courier New', courier, monospace;direction:ltr;color:black;font-size:8pt;overflow:visible;border-style:none;margin:0;padding:0;">           == STATUS_INFO_LENGTH_MISMATCH)</pre><!--CRLF--><pre style="text-align:left;line-height:12pt;background-color:white;width:100%;font-family:'Courier New', courier, monospace;direction:ltr;color:black;font-size:8pt;overflow:visible;border-style:none;margin:0;padding:0;">        <span style="color:#0000ff;">delete</span> [] p, p = <span style="color:#0000ff;">new</span> ULONG[n = 2];</pre><!--CRLF--><pre style="text-align:left;line-height:12pt;background-color:#f4f4f4;width:100%;font-family:'Courier New', courier, monospace;direction:ltr;color:black;font-size:8pt;overflow:visible;border-style:none;margin:0;padding:0;">    PSYSTEM_HANDLE_INFORMATION h = PSYSTEM_HANDLE_INFORMATION(p + 1);</pre><!--CRLF--><pre style="text-align:left;line-height:12pt;background-color:white;width:100%;font-family:'Courier New', courier, monospace;direction:ltr;color:black;font-size:8pt;overflow:visible;border-style:none;margin:0;padding:0;"> </pre><!--CRLF--><pre style="text-align:left;line-height:12pt;background-color:#f4f4f4;width:100%;font-family:'Courier New', courier, monospace;direction:ltr;color:black;font-size:8pt;overflow:visible;border-style:none;margin:0;padding:0;">    <span style="color:#008000;">// try to find target process by matching process id.</span></pre><!--CRLF--><pre style="text-align:left;line-height:12pt;background-color:white;width:100%;font-family:'Courier New', courier, monospace;direction:ltr;color:black;font-size:8pt;overflow:visible;border-style:none;margin:0;padding:0;">    <span style="color:#0000ff;">for</span> (ULONG i = 0; i &lt; <em>p; i++) </em></pre><!--CRLF--><pre style="text-align:left;line-height:12pt;background-color:#f4f4f4;width:100%;font-family:'Courier New', courier, monospace;direction:ltr;color:black;font-size:8pt;overflow:visible;border-style:none;margin:0;padding:0;">    {</pre><!--CRLF--><pre style="text-align:left;line-height:12pt;background-color:white;width:100%;font-family:'Courier New', courier, monospace;direction:ltr;color:black;font-size:8pt;overflow:visible;border-style:none;margin:0;padding:0;">        <span style="color:#0000ff;">if</span> (h[i].ProcessId == pid)</pre><!--CRLF--><pre style="text-align:left;line-height:12pt;background-color:#f4f4f4;width:100%;font-family:'Courier New', courier, monospace;direction:ltr;color:black;font-size:8pt;overflow:visible;border-style:none;margin:0;padding:0;">        {    </pre><!--CRLF--><pre style="text-align:left;line-height:12pt;background-color:white;width:100%;font-family:'Courier New', courier, monospace;direction:ltr;color:black;font-size:8pt;overflow:visible;border-style:none;margin:0;padding:0;">            HANDLE hObject;</pre><!--CRLF--><pre style="text-align:left;line-height:12pt;background-color:#f4f4f4;width:100%;font-family:'Courier New', courier, monospace;direction:ltr;color:black;font-size:8pt;overflow:visible;border-style:none;margin:0;padding:0;">            HANDLE hProcess = OpenProcess(PROCESS_DUP_HANDLE, <span style="color:#0000ff;">FALSE</span>, pid);</pre><!--CRLF--><pre style="text-align:left;line-height:12pt;background-color:white;width:100%;font-family:'Courier New', courier, monospace;direction:ltr;color:black;font-size:8pt;overflow:visible;border-style:none;margin:0;padding:0;">&nbsp;</pre><!--CRLF--><pre style="text-align:left;line-height:12pt;background-color:#f4f4f4;width:100%;font-family:'Courier New', courier, monospace;direction:ltr;color:black;font-size:8pt;overflow:visible;border-style:none;margin:0;padding:0;">            <span style="color:#0000ff;">if</span> (ZwDuplicateObject(hProcess, HANDLE(h[i].Handle), NtCurrentProcess(), </pre><!--CRLF--><pre style="text-align:left;line-height:12pt;background-color:white;width:100%;font-family:'Courier New', courier, monospace;direction:ltr;color:black;font-size:8pt;overflow:visible;border-style:none;margin:0;padding:0;">                    &amp;hObject, 0, 0, DUPLICATE_SAME_ATTRIBUTES)!= STATUS_SUCCESS) </pre><!--CRLF--><pre style="text-align:left;line-height:12pt;background-color:#f4f4f4;width:100%;font-family:'Courier New', courier, monospace;direction:ltr;color:black;font-size:8pt;overflow:visible;border-style:none;margin:0;padding:0;">                <span style="color:#0000ff;">continue</span>;</pre><!--CRLF--><pre style="text-align:left;line-height:12pt;background-color:white;width:100%;font-family:'Courier New', courier, monospace;direction:ltr;color:black;font-size:8pt;overflow:visible;border-style:none;margin:0;padding:0;"> </pre><!--CRLF--><pre style="text-align:left;line-height:12pt;background-color:#f4f4f4;width:100%;font-family:'Courier New', courier, monospace;direction:ltr;color:black;font-size:8pt;overflow:visible;border-style:none;margin:0;padding:0;">            <span style="color:#008000;">// print basic info of this process.</span></pre><!--CRLF--><pre style="text-align:left;line-height:12pt;background-color:white;width:100%;font-family:'Courier New', courier, monospace;direction:ltr;color:black;font-size:8pt;overflow:visible;border-style:none;margin:0;padding:0;">            OBJECT_BASIC_INFORMATION obi;</pre><!--CRLF--><pre style="text-align:left;line-height:12pt;background-color:#f4f4f4;width:100%;font-family:'Courier New', courier, monospace;direction:ltr;color:black;font-size:8pt;overflow:visible;border-style:none;margin:0;padding:0;">            ZwQueryObject(hObject, ObjectBasicInformation, &amp;obi, <span style="color:#0000ff;">sizeof</span> obi, &amp;n);</pre><!--CRLF--><pre style="text-align:left;line-height:12pt;background-color:white;width:100%;font-family:'Courier New', courier, monospace;direction:ltr;color:black;font-size:8pt;overflow:visible;border-style:none;margin:0;padding:0;">            printf(<span style="color:#006080;">“%p %ld %04hx %6lx %2x %3lx %3ld %4ld “</span>,</pre><!--CRLF--><pre style="text-align:left;line-height:12pt;background-color:#f4f4f4;width:100%;font-family:'Courier New', courier, monospace;direction:ltr;color:black;font-size:8pt;overflow:visible;border-style:none;margin:0;padding:0;">                   h[i].Object, h[i].ProcessId, h[i].Handle, h[i].GrantedAccess,</pre><!--CRLF--><pre style="text-align:left;line-height:12pt;background-color:white;width:100%;font-family:'Courier New', courier, monospace;direction:ltr;color:black;font-size:8pt;overflow:visible;border-style:none;margin:0;padding:0;">                   <span style="color:#0000ff;">int</span>(h[i].Flags), obi.Attributes,</pre><!--CRLF--><pre style="text-align:left;line-height:12pt;background-color:#f4f4f4;width:100%;font-family:'Courier New', courier, monospace;direction:ltr;color:black;font-size:8pt;overflow:visible;border-style:none;margin:0;padding:0;">                   obi.HandleCount - 1, obi.PointerCount - 2);</pre><!--CRLF--><pre style="text-align:left;line-height:12pt;background-color:white;width:100%;font-family:'Courier New', courier, monospace;direction:ltr;color:black;font-size:8pt;overflow:visible;border-style:none;margin:0;padding:0;"> </pre><!--CRLF--><pre style="text-align:left;line-height:12pt;background-color:#f4f4f4;width:100%;font-family:'Courier New', courier, monospace;direction:ltr;color:black;font-size:8pt;overflow:visible;border-style:none;margin:0;padding:0;">            <span style="color:#008000;">// print type info of this process.</span></pre><!--CRLF--><pre style="text-align:left;line-height:12pt;background-color:white;width:100%;font-family:'Courier New', courier, monospace;direction:ltr;color:black;font-size:8pt;overflow:visible;border-style:none;margin:0;padding:0;">            n = obi.TypeInformationLength + 2;</pre><!--CRLF--><pre style="text-align:left;line-height:12pt;background-color:#f4f4f4;width:100%;font-family:'Courier New', courier, monospace;direction:ltr;color:black;font-size:8pt;overflow:visible;border-style:none;margin:0;padding:0;">            POBJECT_TYPE_INFORMATION oti = POBJECT_TYPE_INFORMATION(<span style="color:#0000ff;">new</span> CHAR[n]);</pre><!--CRLF--><pre style="text-align:left;line-height:12pt;background-color:white;width:100%;font-family:'Courier New', courier, monospace;direction:ltr;color:black;font-size:8pt;overflow:visible;border-style:none;margin:0;padding:0;">            ZwQueryObject(hObject, ObjectTypeInformation, oti, n, &amp;n);</pre><!--CRLF--><pre style="text-align:left;line-height:12pt;background-color:#f4f4f4;width:100%;font-family:'Courier New', courier, monospace;direction:ltr;color:black;font-size:8pt;overflow:visible;border-style:none;margin:0;padding:0;">            printf(<span style="color:#006080;">“%-14.ws “</span>, oti[0].Name.Length / 2, oti[0].Name.Buffer);</pre><!--CRLF--><pre style="text-align:left;line-height:12pt;background-color:white;width:100%;font-family:'Courier New', courier, monospace;direction:ltr;color:black;font-size:8pt;overflow:visible;border-style:none;margin:0;padding:0;">&nbsp;</pre><!--CRLF--><pre style="text-align:left;line-height:12pt;background-color:#f4f4f4;width:100%;font-family:'Courier New', courier, monospace;direction:ltr;color:black;font-size:8pt;overflow:visible;border-style:none;margin:0;padding:0;">            <span style="color:#008000;">// print name info of this process.</span></pre><!--CRLF--><pre style="text-align:left;line-height:12pt;background-color:white;width:100%;font-family:'Courier New', courier, monospace;direction:ltr;color:black;font-size:8pt;overflow:visible;border-style:none;margin:0;padding:0;">            n = obi.NameInformationLength == 0</pre><!--CRLF--><pre style="text-align:left;line-height:12pt;background-color:#f4f4f4;width:100%;font-family:'Courier New', courier, monospace;direction:ltr;color:black;font-size:8pt;overflow:visible;border-style:none;margin:0;padding:0;">                ? MAX_PATH <em> <span style="color:#0000ff;">sizeof</span> (WCHAR) : obi.NameInformationLength;</em></pre><!--CRLF--><pre style="text-align:left;line-height:12pt;background-color:white;width:100%;font-family:'Courier New', courier, monospace;direction:ltr;color:black;font-size:8pt;overflow:visible;border-style:none;margin:0;padding:0;">            POBJECT_NAME_INFORMATION oni = POBJECT_NAME_INFORMATION(<span style="color:#0000ff;">new</span> CHAR[n]);</pre><!--CRLF--><pre style="text-align:left;line-height:12pt;background-color:#f4f4f4;width:100%;font-family:'Courier New', courier, monospace;direction:ltr;color:black;font-size:8pt;overflow:visible;border-style:none;margin:0;padding:0;">            NTSTATUS rv = ZwQueryObject(hObject, ObjectNameInformation, oni, n, &amp;n);</pre><!--CRLF--><pre style="text-align:left;line-height:12pt;background-color:white;width:100%;font-family:'Courier New', courier, monospace;direction:ltr;color:black;font-size:8pt;overflow:visible;border-style:none;margin:0;padding:0;">            <span style="color:#0000ff;">if</span> (NT_SUCCESS(rv))</pre><!--CRLF--><pre style="text-align:left;line-height:12pt;background-color:#f4f4f4;width:100%;font-family:'Courier New', courier, monospace;direction:ltr;color:black;font-size:8pt;overflow:visible;border-style:none;margin:0;padding:0;">                printf(<span style="color:#006080;">“%.ws”</span>, oni[0].Name.Length / 2, oni[0].Name.Buffer);</pre><!--CRLF--><pre style="text-align:left;line-height:12pt;background-color:white;width:100%;font-family:'Courier New', courier, monospace;direction:ltr;color:black;font-size:8pt;overflow:visible;border-style:none;margin:0;padding:0;"> </pre><!--CRLF--><pre style="text-align:left;line-height:12pt;background-color:#f4f4f4;width:100%;font-family:'Courier New', courier, monospace;direction:ltr;color:black;font-size:8pt;overflow:visible;border-style:none;margin:0;padding:0;">            <span style="color:#008000;">// close handles.</span></pre><!--CRLF--><pre style="text-align:left;line-height:12pt;background-color:white;width:100%;font-family:'Courier New', courier, monospace;direction:ltr;color:black;font-size:8pt;overflow:visible;border-style:none;margin:0;padding:0;">            printf(<span style="color:#006080;">“\n”</span>);</pre><!--CRLF--><pre style="text-align:left;line-height:12pt;background-color:#f4f4f4;width:100%;font-family:'Courier New', courier, monospace;direction:ltr;color:black;font-size:8pt;overflow:visible;border-style:none;margin:0;padding:0;">            CloseHandle(hObject);</pre><!--CRLF--><pre style="text-align:left;line-height:12pt;background-color:white;width:100%;font-family:'Courier New', courier, monospace;direction:ltr;color:black;font-size:8pt;overflow:visible;border-style:none;margin:0;padding:0;">            CloseHandle(hProcess);              </pre><!--CRLF--><pre style="text-align:left;line-height:12pt;background-color:#f4f4f4;width:100%;font-family:'Courier New', courier, monospace;direction:ltr;color:black;font-size:8pt;overflow:visible;border-style:none;margin:0;padding:0;">        }</pre><!--CRLF--><pre style="text-align:left;line-height:12pt;background-color:white;width:100%;font-family:'Courier New', courier, monospace;direction:ltr;color:black;font-size:8pt;overflow:visible;border-style:none;margin:0;padding:0;">    }</pre><!--CRLF--><pre style="text-align:left;line-height:12pt;background-color:#f4f4f4;width:100%;font-family:'Courier New', courier, monospace;direction:ltr;color:black;font-size:8pt;overflow:visible;border-style:none;margin:0;padding:0;">    <span style="color:#0000ff;">delete</span> [] p;</pre><!--CRLF--><pre style="text-align:left;line-height:12pt;background-color:white;width:100%;font-family:'Courier New', courier, monospace;direction:ltr;color:black;font-size:8pt;overflow:visible;border-style:none;margin:0;padding:0;">    <span style="color:#0000ff;">return</span> 0;</pre><!--CRLF--><pre style="text-align:left;line-height:12pt;background-color:#f4f4f4;width:100%;font-family:'Courier New', courier, monospace;direction:ltr;color:black;font-size:8pt;overflow:visible;border-style:none;margin:0;padding:0;">}</pre><!--CRLF--></div></div>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;I found two reference books which are useful in system internal programming: &lt;a href=&quot;http://www.amazon.com/Windows-2000-Native-API-Refer
    
    </summary>
    
      <category term="Programming" scheme="http://yoursite.com/categories/Programming/"/>
    
      <category term="Windows" scheme="http://yoursite.com/categories/Programming/Windows/"/>
    
    
      <category term="Mutex" scheme="http://yoursite.com/tags/Mutex/"/>
    
      <category term="Windows" scheme="http://yoursite.com/tags/Windows/"/>
    
  </entry>
  
  <entry>
    <title>Reverse Polish Notation – Infix to Postfix Notation</title>
    <link href="http://yoursite.com/2010/12/27/reverse-polish-notation-infix-to-postfix-notation/"/>
    <id>http://yoursite.com/2010/12/27/reverse-polish-notation-infix-to-postfix-notation/</id>
    <published>2010-12-27T08:08:19.000Z</published>
    <updated>2016-10-23T13:39:54.000Z</updated>
    
    <content type="html"><![CDATA[<blockquote>
<p>本文仅介绍中缀表达式转换为后缀表达式的原理。 </p>
</blockquote>
<p>例子： A+B<em>(C-D)-E/F =&gt; ABCD-</em>+EF/-  </p><p>在中缀表达式转换为后缀表达式的过程中，操作数的顺序是一致的。转换的过程首先自左向右读取中缀表达式，遇到操作数就直接输出。遇到操作符时，把操作符压入符号栈，根据优先级比较后决定是否弹栈。  </p>
<ul>
<li>isp: in stack priority. 栈内优先级  </li><li>icp: in coming priority. 栈外优先级 <p>优先级表格： </p></li>
</ul>
<hr>
  <table border="0" cellspacing="0" cellpadding="1" width="401"> <tbody> <tr> <td valign="top" width="57">操作符</td> <td valign="top" width="57">#</td> <td valign="top" width="57">(</td> <td valign="top" width="57">^</td> <td valign="top" width="57">* / %</td> <td valign="top" width="57">+ -</td> <td valign="top" width="57">)</td></tr> <tr> <td valign="top" width="57">isp</td> <td valign="top" width="57">0</td> <td valign="top" width="57">1</td> <td valign="top" width="57">7</td> <td valign="top" width="57">5</td> <td valign="top" width="57">3</td> <td valign="top" width="57">8</td></tr> <tr> <td valign="top" width="57">icp</td> <td valign="top" width="57">0</td> <td valign="top" width="57">8</td> <td valign="top" width="57">6</td> <td valign="top" width="57">4</td> <td valign="top" width="57">2</td> <td valign="top" width="57">1</td></tr></tbody></table> 

<hr>
<p>转换过程模拟：</p>
<hr>
  <table border="0" cellspacing="0" cellpadding="2" width="500"> <tbody> <tr> <td valign="top" width="41">步序</td> <td valign="top" width="56">扫描项</td> <td valign="top" width="203">动作</td> <td valign="top" width="100">栈内容</td> <td valign="top" width="100">输出</td></tr> <tr> <td valign="top" width="41">00</td> <td valign="top" width="56">&nbsp;</td> <td valign="top" width="203">PUT ‘#’</td> <td valign="top" width="100">#</td> <td valign="top" width="100">&nbsp;</td></tr> <tr> <td valign="top" width="41">01</td> <td valign="top" width="56">A</td> <td valign="top" width="203">&nbsp;</td> <td valign="top" width="100">#</td> <td valign="top" width="100">A</td></tr> <tr> <td valign="top" width="41">02</td> <td valign="top" width="56">+</td> <td valign="top" width="203">isp(‘#’) &lt; icp(‘+’), PUT</td> <td valign="top" width="100">#+</td> <td valign="top" width="100">A</td></tr> <tr> <td valign="top" width="41">03</td> <td valign="top" width="56">B</td> <td valign="top" width="203">&nbsp;</td> <td valign="top" width="100">#+</td> <td valign="top" width="100">AB</td></tr> <tr> <td valign="top" width="41">04</td> <td valign="top" width="56"><em></em></td> <td valign="top" width="203">isp(‘+’) &lt; icp(‘’), PUT</td> <td valign="top" width="100">#+<em></em></td> <td valign="top" width="100">AB</td></tr> <tr> <td valign="top" width="41">05</td> <td valign="top" width="56">(</td> <td valign="top" width="203">isp(‘’) &lt; icp(‘(’), PUT</td> <td valign="top" width="100">#+<em>(</em></td> <td valign="top" width="100">AB</td></tr> <tr> <td valign="top" width="41">06</td> <td valign="top" width="56">C</td> <td valign="top" width="203">&nbsp;</td> <td valign="top" width="100">#+(</td> <td valign="top" width="100">ABC</td></tr> <tr> <td valign="top" width="41">07</td> <td valign="top" width="56">-</td> <td valign="top" width="203">isp(‘(’) &lt; icp(‘-’), PUT</td> <td valign="top" width="100">#+<em>(-</em></td> <td valign="top" width="100">ABC</td></tr> <tr> <td valign="top" width="41">08</td> <td valign="top" width="56">D</td> <td valign="top" width="203">&nbsp;</td> <td valign="top" width="100">#+(-</td> <td valign="top" width="100">ABCD</td></tr> <tr> <td valign="top" width="41">09</td> <td valign="top" width="56">)</td> <td valign="top" width="203">isp(‘-’) &gt; icp(‘)’), POP<br>isp(‘(’) = icp(‘)’), POP</td> <td valign="top" width="100">#+<em>(</em></td> <td valign="top" width="100">ABCD-</td></tr> <tr> <td valign="top" width="41">10</td> <td valign="top" width="56">-</td> <td valign="top" width="203">isp(‘’) &gt; icp(‘-’), POP<br>isp(‘+’) &gt; icp(‘-’), POP<br>isp(‘#’) &lt; icp(‘-’), PUT</td> <td valign="top" width="100">#+<br>#<br>#-</td> <td valign="top" width="100">ABCD-<em><br>ABCD-</em>+<br>ABCD-<em>+</em></td></tr> <tr> <td valign="top" width="41">11</td> <td valign="top" width="56">E</td> <td valign="top" width="203">&nbsp;</td> <td valign="top" width="100">#-</td> <td valign="top" width="100">ABCD-+E</td></tr> <tr> <td valign="top" width="41">12</td> <td valign="top" width="56">/</td> <td valign="top" width="203">isp(‘-’) &lt; icp(‘/’), PUT</td> <td valign="top" width="100">#-/</td> <td valign="top" width="100">ABCD-<em>+E</em></td></tr> <tr> <td valign="top" width="41">13</td> <td valign="top" width="56">F</td> <td valign="top" width="203">&nbsp;</td> <td valign="top" width="100">#-/</td> <td valign="top" width="100">ABCD-+EF</td></tr> <tr> <td valign="top" width="41">14</td> <td valign="top" width="56">#</td> <td valign="top" width="203">isp(‘/’) &gt; icp(‘#’), POP<br>isp(‘-’) &gt; icp(‘#’), POP</td> <td valign="top" width="100">#-<br>#</td> <td valign="top" width="100">ABCD-<em>+EF/<br>ABCD-</em>+EF/-</td></tr></tbody></table> 

<hr>
]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;本文仅介绍中缀表达式转换为后缀表达式的原理。 &lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;例子： A+B&lt;em&gt;(C-D)-E/F =&amp;gt; ABCD-&lt;/em&gt;+EF/-  &lt;/p&gt;&lt;p&gt;在中缀表达式转换为后缀表达式的过程中，操作数的顺序是一致
    
    </summary>
    
      <category term="Algorithms" scheme="http://yoursite.com/categories/Algorithms/"/>
    
      <category term="Basic Theory" scheme="http://yoursite.com/categories/Algorithms/Basic-Theory/"/>
    
      <category term="Programming" scheme="http://yoursite.com/categories/Algorithms/Basic-Theory/Programming/"/>
    
    
      <category term="Algorithms" scheme="http://yoursite.com/tags/Algorithms/"/>
    
      <category term="Theory" scheme="http://yoursite.com/tags/Theory/"/>
    
      <category term="Reverse Polish Notation" scheme="http://yoursite.com/tags/Reverse-Polish-Notation/"/>
    
  </entry>
  
  <entry>
    <title>Reading Notes Of &lt;Introduction to Algorithms&gt;</title>
    <link href="http://yoursite.com/2010/12/25/reading-notes-of-introduction-to-algorithms/"/>
    <id>http://yoursite.com/2010/12/25/reading-notes-of-introduction-to-algorithms/</id>
    <published>2010-12-25T09:15:21.000Z</published>
    <updated>2016-10-23T13:39:54.000Z</updated>
    
    <content type="html"><![CDATA[<p><strong>Chapter 2</strong>(<a href="http://code.google.com/p/code-mirror/source/browse/trunk/common/clrs/chapter2.c" target="_blank" rel="external">source</a>): insertion sort, selection sort and merge sort.</p>
<p><strong>Chapter 6</strong>(<a href="http://code.google.com/p/code-mirror/source/browse/trunk/common/clrs/chapter6.c" target="_blank" rel="external">source</a>): heap sort.</p>
<p><strong>Chapter 7</strong>(<a href="http://code.google.com/p/code-mirror/source/browse/trunk/common/clrs/chapter7.c" target="_blank" rel="external">source</a>): quick sort.</p>
<p><strong>Chapter 9</strong>(<a href="http://code.google.com/p/code-mirror/source/browse/trunk/common/clrs/chapter9.c" target="_blank" rel="external">source</a>): randomized select.</p>
<p>&#160;</p>
<p>To be continued…</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;strong&gt;Chapter 2&lt;/strong&gt;(&lt;a href=&quot;http://code.google.com/p/code-mirror/source/browse/trunk/common/clrs/chapter2.c&quot; target=&quot;_blank&quot; rel=
    
    </summary>
    
      <category term="Algorithms" scheme="http://yoursite.com/categories/Algorithms/"/>
    
      <category term="Programming" scheme="http://yoursite.com/categories/Algorithms/Programming/"/>
    
      <category term="Reading" scheme="http://yoursite.com/categories/Algorithms/Programming/Reading/"/>
    
    
      <category term="Algorithms" scheme="http://yoursite.com/tags/Algorithms/"/>
    
      <category term="CLRS" scheme="http://yoursite.com/tags/CLRS/"/>
    
      <category term="Reading" scheme="http://yoursite.com/tags/Reading/"/>
    
  </entry>
  
  <entry>
    <title>JavaScript: The World&#39;s Most Misunderstood Programming Language Has Become the World&#39;s Most Popular Programming Language. (Translation)</title>
    <link href="http://yoursite.com/2010/12/25/javascript-the-worlds-most-misunderstood-programming-language-has-become-the-worlds-most-popular-programming-language-translation/"/>
    <id>http://yoursite.com/2010/12/25/javascript-the-worlds-most-misunderstood-programming-language-has-become-the-worlds-most-popular-programming-language-translation/</id>
    <published>2010-12-25T08:43:51.000Z</published>
    <updated>2016-10-23T13:39:54.000Z</updated>
    
    <content type="html"><![CDATA[<blockquote>
<p>译注：对这篇文章中关于编程语言发展性的观点很感兴趣，不能说完全认同，但可以接受，而且事实往往正如作者所言。  </p>
</blockquote>
<p>原文出处（<a href="http://javascript.crockford.com/popular.html" target="_blank" rel="external">The World’s Most Misunderstood Programming Language Has Become the World’s Most Popular Programming Language.</a>） </p>
<p>A programming language cobbles a model of computation with some sort of expressive syntax. Most languages will have a set of useful values such as numbers and texts (which most languages, strangely, call<var>strings</var>), and operations that mutate and synthesize values and some form of variation or repetition, and some way of packaging operations into more convenient idioms. The variations that are possible are endless, much like the variations possible in the preparation of a fine meal or a work of music. The art in language design is knowing what to leave out. The features of a good language work together harmoniously. A good language helps us to better understand a problem and to find the best expression of its solution.</p>
<p>编程语言通过对一系列的表达式的组合实现了自身的运算模型。这些编程语言绝大多数都是由一系列数值、字串以及它们之间的赋值运算组成的，这些操作富有可变性和可重用性，并且这一系列的操作能很方便的被打包成更简单的形式。编程语言的这种可变性就如做一顿美味佳肴或者创作一曲好的音乐一样，充满了变数和未知。设计编程语言的艺术在于懂得去保留什么。一个好的编程语言应该保证其各种特性之间协调的工作。一个好的编程语言能够帮助我们更好的理解问题并找到最佳的解决方案。</p>
<p>A good language is composed of a limited set of features. But there is little agreement on which features are best. Programmers can argue endlessly about features and whether they make one language better than another. This does not mean that the features don’t matter. They matter greatly. We just don’t understand yet how they matter.</p>
<p>一门好的编程语言具有一系列的特性。而人们貌似对哪个特性是最重要的还没有定论。程序员们往往在功能性上进行无休止的争吵，来证明一门语言要比另一们好。我这样的说法这并不意味着认为语言特性不重要，他们很重要，只是我们还不理解它们因何而重要。</p>
<p>Language design has more to do with fashion than technology. It may seem strange that fashion is a major factor in the nerdliest of arts, but it is true. A language with radically different syntax, for example, has no hope of finding broad adoption, regardless of the brilliance of its design. This tends to constrain the rate at which languages evolve.</p>
<p>相比于技术，编程语言的设计更容易受潮流的影响。说潮流是影响艺术的主要因素可能让人感觉怪怪的，但事实就是这样。在不考虑语言亮点之前，一门语法完全不同的新语言是不大可能有很广泛的受众的。这样的事实迫使现有编程语言加快改革的脚步。</p>
<p>Like music and food, a programming language can be a product of its time. The deep problem in language design is not technological, it is psychological. A programming language should equip us with structures that help us to reason more effectively.</p>
<p>和音乐、食物一样，一门编程语言是时间的产物。语言设计的最大问题不在于技术，而是实用性上。一门新的编程语言应该能够更有效的帮助我们解决问题。</p>
<p>Programming languages are like cats. It is easier to get a new cat than to get an old cat fixed. Most successful languages are ultimately replaced by upstarts. Remodeled languages rarely match the glory of the original. Fortran was once the king of languages. It has been revised several times over the years, but the modernized dialects experienced a fraction of the prestige of Fortran IV. Similarly, Pascal was a popular structured programming language, but none of the object oriented dialects ever approached Pascal’s glory. Instead, languages tend to be superseded.</p>
<p>开发编程语言跟买一只宠物猫很像。去买一只刚出生的小猫总是比去找一只打过疫苗的老猫容易。很多成功的语言最终都被后来者所替代。而这些改进的语言很少能够有原语言一样的风光。FORTRAN曾经是一门很主流的语言，数年来人们对FORTRAN的改进有很多次，但这些新改进产生的语言怎么也无法跟FORTRAN IV时代的光彩相比。Pascal也曾是一门很流行的结构式编程语言，但也没有一门面向对象语言向Pascal那样风光。当然，无论怎样，旧的语言总是会被取代的。</p>
<p>Specialized languages are fun to make, which partly explains why there are so many. If a language doesn’t get too big, it can be managed by a single designer. Most languages can be identified with a single designer. Pascal: Wirth. C: Ritchie. C++: Stroustrup. Java: Gosling. C#: Hejlsberg. Rebol: Sassenrath. Python: van Rossum. PHP: Lerdorf. Perl: Wall. Ruby: Matsumoto. Lua: Ierusalimschy. E: Miller. JavaScript: Eich.</p>
<p>编写特定的语言是一件很有趣的事情，这也部分的解释了为啥现在有这么多种编程语言。如果一门语言的规模不是很庞大，那么它通常只需由一个设计人员管理即可。大多数语言都可以找到一一对应的设计人员。</p>
<p>Most languages die in obscurity. Only a few are able to build a following beyond a single project or company. And only a very small number of languages become important.</p>
<p>大多数语言都会在不知不觉中被淘汰，其中只有一部分语言通过某个项目或者某个公司的支持存活下来，而这当中只有很小一部分成为了很重要的语言。</p>
<p>There are two ways that a language becomes important. The first is as a source or proving ground for important ideas. This includes languages like Smalltalk and Scheme. These languages are not widely used, but are generally recognized as brilliant, but out of fashion. They have a powerful influence on language designers.</p>
<p>一门语言要变得重要有两种途径。一是成为重要技术的基础和支撑，比如Smalltalk和Scheme就属于这种语言，这些语言不会被广泛使用，但是被公认为是优秀的语言，不会过时。这些语言对其设计者本身也产生了重要的影响。</p>
<p>The second way that a language becomes important is by becoming popular.There are many things that a programmer must consider when selecting a program language unless that programmer is writing for web browsers where the only choice currently is JavaScript.</p>
<p>另一种方法就是试图让语言变得流行。程序员通常在选择编程语言时都需要有很多种考虑，除了写Web程序，因为这时他们唯一的选择就是JavaScript。 </p>
<p>JavaScript is an astonishing language, in the very worst sense. Its astonishing nature led to a very bad reputation. JavaScript is also coupled with The DOM, a horrendous API. There is a lot of confusion about where JavaScript ends and the DOM begins. There is lots of chatter about improving JavaScript, but that by itself would do little to improve the lives of web developers. The language is burdened with too many features, including many that interact badly or were poorly designed. It is a language that has, as Emperor Joseph would say, too many notes.</p>
<p>JavaScript是一门非常灵活的语言，这一点让人们对它产生了很多负面的印象。而且JavaScript总是和DOM这个可怕的API一起出现，关于这点，总会有不少关于什么地方是JavaScript什么地方又是DOM的争论。总会有一些声音说要改进JavaScript，但是其本身的改进其实对Web开发者并没有多少帮助。这个语言负载了太多的特性，这其中也包括那些交互性差以及设计糟糕的功能。正如Emperor Joseph所说，这是一门有太多东西的语言。</p>
<p>So how did a language with such obvious deficiencies become the Sole Programming Language of the Web? Brendan Eich convinced his pointy-haired boss at Netscape that the Navigator browser should have its own scripting language, and that only a new language would do, a new language designed and implemented in big hurry, and that no existing language should be considered for that role. The Internet Explorer team at Microsoft wanted to capture Netscape’s market share, so they carefully reverse engineered Netscape’s language, huge hairy warts and all. The other browser makers followed Microsoft’s lead. There is no standard that says that a web browser must implement JavaScript; JavaScript is the only language implemented in all popular web browsers. There was no careful review of the language or its problem domain. There was no review of its suitability or the soundness of its design. It was slapped together at Netscape, and then copied elsewhere. Given the process that created JavaScript and made it a de facto standard, we deserve something far worse.</p>
<p>那么这门有诸多不足的语言为何成为了Web开发语言的唯一选择呢？Brendan Eich在Netscape时，他试图让那个无能的老板确信，浏览器应该有自己的脚本语言，而且只能是一门新的语言，在所有现存语言都还没有注意到这一点之前，很快的设计和实现的这门新的语言。而后来微软的IE团队想跟Netscape分一杯羹，所以他们认真的对Netscape的语言做了反向工程，毫不掩盖的抄袭过来，后来其他的浏览器厂商也开始跟微软一样。所以并没有一个标准要求浏览器必须要实现JavaScript，但JavaScript确实是唯一一个被所有浏览器实现的语言。也并没有人花太多心思去关心这门语言存在的问题，也没有人去留意他的设计是否合适以及稳定。它起先在Netscape迅速流行起来，并被其他浏览器模仿。当我们知道了JavaScript的产生过程以及如何成为标准后，我们应该知道事实应该远比现在这个样子糟糕才对。</p>
<p>But despite JavaScript’s astonishing shortcomings, deep down, in its core, it got something very right. When you peel away the cruft, there is an expressive and powerful programming language there. That language is being used well in many Ajax libraries to manage and augment the DOM, producing an application platform for interactive applications delivered as web pages. Ajax has become popular because JavaScript works. It works surprisingly well.</p>
<p>抛开JavaScript的这些缺点，深入到它的核心，其中有一些很正确的设计。当你剥离了它的表面，它便是一门强大而富有表现力的语言。这门语言被很多Ajax的程序库用于管理和完善DOM，创建了基于网页形式的交互性应用程序平台。因为JavaScript的良好表现，Ajax开始流行。</p>
<p><a href="http://javascript.crockford.com/javascript.html" target="_blank" rel="external">JavaScript was the world’s most misunderstood programming language</a>. Its obvious defects, its unfashionable programming model, intentional mispositioning at its introduction, and its ridiculous name caused it to be rejected as unworthy by most knowledgeable programmers. But Ajax gave JavaScript a second chance.</p>
<p>JavaScript是世上最被误解的语言。它诸多明显的缺陷、不流行的编程模型、错误的定位、荒谬的名字，种种不好的印象导致很多有优秀的程序员抵制JavaScript。但是Ajax给了JavaScript第二次生命。</p>
<p>Because JavaScript is the language of the web browser, and because the web browser has become the dominant application delivery system, and because JavaScript isn’t too bad, JavaScript has become the World’s Most Popular Programming Language. Its popularity is growing. It is now being embedded in other applications and contexts. JavaScript has become important.</p>
<p>因为JavaScript是浏览器的语言，因为浏览器成为了统治性的应用交付系统，因为JavaScript并不是那么烂，JavaScript已成为世界上最流行的编程语言。它的流行程度还在递增，它已经被很多程序使用，被嵌入到很多交互内容当中。JavaScript已经愈加重要。</p>
<p>It is better to be lucky than smart.</p>
<p>运气往往比聪明的头脑更重要。</p>
<blockquote>
<p>译注：网上有很多人喜欢讨论哪门语言更优秀，其实语言并不是关键，我们需要的只是去用它，如果它有足够的运气。</p>
</blockquote>
]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;译注：对这篇文章中关于编程语言发展性的观点很感兴趣，不能说完全认同，但可以接受，而且事实往往正如作者所言。  &lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;原文出处（&lt;a href=&quot;http://javascript.crockford.com/p
    
    </summary>
    
      <category term="Basic Theory" scheme="http://yoursite.com/categories/Basic-Theory/"/>
    
      <category term="Language" scheme="http://yoursite.com/categories/Basic-Theory/Language/"/>
    
      <category term="Programming" scheme="http://yoursite.com/categories/Basic-Theory/Language/Programming/"/>
    
    
      <category term="JavaScript" scheme="http://yoursite.com/tags/JavaScript/"/>
    
      <category term="Translation" scheme="http://yoursite.com/tags/Translation/"/>
    
  </entry>
  
  <entry>
    <title>Find System Directories Via Environment Variables</title>
    <link href="http://yoursite.com/2010/12/25/find-system-directories-via-environment-variables/"/>
    <id>http://yoursite.com/2010/12/25/find-system-directories-via-environment-variables/</id>
    <published>2010-12-25T08:37:39.000Z</published>
    <updated>2016-10-23T13:39:54.000Z</updated>
    
    <content type="html"><![CDATA[<p>所谓的Windows系统目录简写环境变量，就是为一些常用且固定的Windows系统目录的路径建立一个与之对应的相对简单的缩写，使之更容易输入或定位。   </p>
<p>下面列出一些常见的Windows系统目录简写环境变量：</p>
<ul>
<li>%SYSTEMDRIVE%: 这代表的是Windows系统所在磁盘分区，也就是Windows系统所安装到的盘符根目录，通常就是C盘的根目录了。</li>
<li>%HOMEDRIVE%: 这和上面介绍的%SYSTEMDRIVE%的功能是一样的。</li>
<li>%SYSTEMROOT%: 指向的是Windows系统所在的目录，通常就是C:\Windows。</li>
<li>%WINDIR%: 和%SYSTEMROOT%的功能相同，指向Windows所在目录。</li>
<li>%ProgramFiles%: 指向Program Files的路径，通常情况是C:\Program Files。</li>
<li>%CommonProgramFiles%: 指向公用文件(Common&#160; Files)目录，通常是C:\Program&#160; Files\Common Files。</li>
<li>%USERPROFILE%: 指向当前帐户的用户目录，通常是C:\Documents and Settings\当前用户名。</li>
<li>%HOMEPATH%: 功能和上面的%USERPROFILE%是一样的。</li>
<li>%ALLUSERSPROFILE%: 指向所有用户的用户目录，通常是C:\Documents and Settings\All Users。</li>
<li>%APPDATA%: 指向当前用户的Application&#160; Data目录，通常是C:\Documents&#160; and Settings\当前用户名\Application&#160; Data。</li>
<li>%TEMP%: 它指向的是当前用户的临时文件目录，通常是C:\Documents and Settings\当前用户名\Local Settings\Temp。</li>
<li>%TMP%: 与%TEMP%的指向相同。</li>
<li>%ComSpec%: 指向C:\WINDOWS\System32\cmd.exe，也就是命令提示符。  </li>
</ul>
<p>Windows系统默认情况下都是安装在电脑C盘的Windows目录下，但这并不是固定的，如果你的系统不是安装在这个目录下，那么程序想要定位你的某个系统目录的话，就需要使用到目录简写环境变量了。使用这些环境变量，程序员或系统管理员无需事先了解你的系统安装位置，就能轻易的找到所要使用的系统目录路径。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;所谓的Windows系统目录简写环境变量，就是为一些常用且固定的Windows系统目录的路径建立一个与之对应的相对简单的缩写，使之更容易输入或定位。   &lt;/p&gt;
&lt;p&gt;下面列出一些常见的Windows系统目录简写环境变量：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;%SYSTEMDRIV
    
    </summary>
    
      <category term="Programming" scheme="http://yoursite.com/categories/Programming/"/>
    
      <category term="Windows" scheme="http://yoursite.com/categories/Programming/Windows/"/>
    
    
      <category term="Windows" scheme="http://yoursite.com/tags/Windows/"/>
    
      <category term="Environment Variables" scheme="http://yoursite.com/tags/Environment-Variables/"/>
    
  </entry>
  
  <entry>
    <title>ACM-ICPC OJs Categories And References</title>
    <link href="http://yoursite.com/2010/12/25/acm-icpc-ojs-categories-and-references/"/>
    <id>http://yoursite.com/2010/12/25/acm-icpc-ojs-categories-and-references/</id>
    <published>2010-12-25T08:27:52.000Z</published>
    <updated>2016-10-23T13:39:54.000Z</updated>
    
    <content type="html"><![CDATA[<p><strong>ACM/ICPC在线题库集锦</strong></p>
<ul>
<li>网址：<a href="http://acm.uva.es/简称" target="_blank" rel="external">http://acm.uva.es/简称</a>: uva全称: Valladolid Programming Contest Site所在国：西班牙提交方式：web方式和email方式说明：可能是世界上名气最大，最古老的在线题库了。收集了N卷的题目，许多国家队的高手都是从这里练出来的。题目包括历届ACM/ICPC分区赛试题、总决赛试题以及很多其他网友自己出的题目。题目类型比较全面，难度较平均，但是测试数据非常刁钻，而且经常更新旧的数据，在别的地方能通过的程序到了uva就可能无法通过。定期有比赛，并且可以利用它的系统主办自己的比赛。唯一的缺点是系统太烂，比赛的时候经常系统崩溃（不过这和参加的人太多也有关）。</li>
<li>网址：<a href="http://acm.zju.edu.cn/" target="_blank" rel="external">http://acm.zju.edu.cn/</a>简称: zju/zoj全称: ZJU Online Judge Contests所在国：中国提交方式：web方式说明：目前国内唯一一个在线题库。NJU的Settler队主要就在这里训练，因为不要出国，很方便。目前有6卷题目了，题目大多数是以前的ACM/ICPC分区赛试题和一些浙大ACM队员自己出的题目。定期有比赛。</li>
<li>网址：<a href="http://acm.timus.ru/" target="_blank" rel="external">http://acm.timus.ru/</a>简称: ural全称: Ural State University Problem Set Archive with Online Judge System&#160;所在国：俄罗斯提交方式：web方式和email方式说明：这也是一个著名的题库，因为是俄罗斯人办的，题目的数学味道比较浓。定期有比赛。这里的题目风格和ACM/ICPC不太相同，题目数学趣味浓，有一定难度，很多题目都是那种需要一些小技巧的，一旦想出来了程序可能只有几十行。中国的很多搞OI的中学生在这里做题，这里的题目比较适合中学的OIer。</li>
<li>网址：<a href="http://acm.sgu.ru/" target="_blank" rel="external">http://acm.sgu.ru/</a>简称: sgu全称: Saratov State University :: Online Contester所在国：俄罗斯提交方式：web方式说明：一个比较新的题库，同样因为是俄罗斯人办的，题目的数学味道很浓。定期有比赛。  </li>
</ul>
<p>以上这几个是比较适合参加ACM/ICPC的同学训练用的题库，还有一些诸如USACO等题库，基本上就是面向中学生的，这里就不提了。</p>
<p>&#160;</p>
<p><strong>基本算法与数据结构中文索引</strong></p>
<ul>
<li>Data Structures 基本数据结构</li>
<li>Dictionaries 字典</li>
<li>Priority Queues 堆</li>
<li>Graph Data Structures 图</li>
<li>Set Data Structures 集合</li>
<li>Kd-Trees 线段树</li>
<li>Numerical Problems 数值问题</li>
<li>Solving Linear Equations 线性方程组</li>
<li>Bandwidth Reduction 带宽压缩</li>
<li>Matrix Multiplication 矩阵乘法</li>
<li>Determinants and Permanents 行列式</li>
<li>Constrained and Unconstrained Optimization 最值问题</li>
<li>Linear Programming 线性规划</li>
<li>Random Number Generation 随机数生成</li>
<li>Factoring and Primality Testing 因子分解/质数判定</li>
<li>Arbitrary Precision Arithmetic 高精度计算</li>
<li>Knapsack Problem 背包问题</li>
<li>Discrete Fourier Transform 离散Fourier变换</li>
<li>Combinatorial Problems 组合问题</li>
<li>Sorting 排序</li>
<li>Searching 查找</li>
<li>Median and Selection 中位数</li>
<li>Generating Permutations 排列生成</li>
<li>Generating Subsets 子集生成</li>
<li>Generating Partitions 划分生成</li>
<li>Generating Graphs 图的生成</li>
<li>Calendrical Calculations 日期</li>
<li>Job Scheduling 工程安排</li>
<li>Satisfiability 可满足性</li>
<li>Graph Problems – polynomial 图论-多项式算法</li>
<li>Connected Components 连通分支</li>
<li>Topological Sorting 拓扑排序</li>
<li>Minimum Spanning Tree 最小生成树</li>
<li>Shortest Path 最短路径</li>
<li>Transitive Closure and Reduction 传递闭包</li>
<li>Matching 匹配</li>
<li>Eulerian Cycle / Chinese Postman Euler回路/中国邮路</li>
<li>Edge and Vertex Connectivity 割边/割点</li>
<li>Network Flow 网络流</li>
<li>Drawing Graphs Nicely 图的描绘</li>
<li>Drawing Trees 树的描绘</li>
<li>Planarity Detection and Embedding 平面性检测和嵌入</li>
<li>Graph Problems – hard 图论-NP问题</li>
<li>Clique 最大团</li>
<li>Independent Set 独立集</li>
<li>Vertex Cover 点覆盖</li>
<li>Traveling Salesman Problem 旅行商问题</li>
<li>Hamiltonian Cycle Hamilton回路</li>
<li>Graph Partition 图的划分</li>
<li>Vertex Coloring 点染色</li>
<li>Edge Coloring 边染色</li>
<li>Graph Isomorphism 同构</li>
<li>Steiner Tree Steiner树</li>
<li>Feedback Edge/Vertex Set 最大无环子图</li>
<li>Computational Geometry 计算几何</li>
<li>Convex Hull 凸包</li>
<li>Triangulation 三角剖分</li>
<li>Voronoi Diagrams Voronoi图</li>
<li>Nearest Neighbor Search 最近点对查询</li>
<li>Range Search 范围查询</li>
<li>Point Location 位置查询</li>
<li>Intersection Detection 碰撞测试</li>
<li>Bin Packing 装箱问题</li>
<li>Medial-Axis Transformation 中轴变换</li>
<li>Polygon Partitioning 多边形分割</li>
<li>Simplifying Polygons 多边形化简</li>
<li>Shape Similarity 相似多边形</li>
<li>Motion Planning 运动规划</li>
<li>Maintaining Line Arrangements 平面分割</li>
<li>Minkowski Sum Minkowski和</li>
<li>Set and String Problems 集合与串的问题</li>
<li>Set Cover 集合覆盖</li>
<li>Set Packing 集合配置</li>
<li>String Matching 模式匹配</li>
<li>Approximate String Matching 模糊匹配</li>
<li>Text Compression 压缩</li>
<li>Cryptography 密码</li>
<li>Finite State Machine Minimization 有穷自动机简化</li>
<li>Longest Common Substring 最长公共子串</li>
<li>Shortest Common Superstring 最短公共父串  </li>
</ul>
<p><strong>算法类书籍</strong></p>
<ul>
<li>N. Wirth, Algorithms + Data Structures = Programs, Prentice-Hall, Englewood Cliffs, 1975.</li>
<li>N. Wirth, Systematic Programming An Introduction, Prentice Hall, 1973.</li>
<li>A. Engel, Exploring mathematics with your computer, The Mathematical Association of America, 1993.</li>
<li>H. Papadimitriou, K. Steigltz, Combinatorial optimization – Algorithms and complexity, Dover, PUBNS, 1998.</li>
<li>A. Vitek, I. Tvrda i dr., Problems in programming / experience through practice, John Wiley &amp; Sons Ltd., 1991.</li>
<li>T. H. Cormen, C. E. Leiserson, R. L. Rivest, S. Stein, Introduction to Algorithms, The MIT Press, 2001.</li>
<li>D. E. Knuth, The Art of Computer Programming, 2nd Edition, Addison-Wesley, Volume 1: Fundamental Algorithms, 1997.; Volume 2: Seminumerical Algorithms, 1997.; Volume 3: Sorting and Searching, 1998.</li>
<li>Z. Michalewicz, D. B. Fogel, How to Solve It: Modern Heuristics, Springer-Verlag Berlin, 1999.</li>
<li>Steven S. Skiena, The Algorithm Design Manual, Springer-Verlag New York, Ins.,1998.</li>
<li>A. Shen, Algorithms and Programming - Problems and Solutions, Birkh Boston, 1997.  </li>
</ul>
<p><strong>赛题分析类书籍</strong></p>
<ul>
<li>ACM 试题分析（一）、（二）、（三） 吴文虎 清华</li>
<li>ACM 国际大学生程序设计比赛入门 郭嵩山（中山） 机械出版</li>
<li>组合数学/图论/奥林匹克信息学国内外赛题分析 吴文虎 王建德</li>
<li>ACM/ICPC 试题分析 王建德  </li>
</ul>
<p><strong>理论类书籍</strong></p>
<ul>
<li>M. Sipser, Introduction to Theory of Computation.</li>
<li>H. Lewis &amp; C. Papadimitriou, Elements of the theory of computation.</li>
<li>J. Hopcroft, R. Motwani &amp; J. Ullman. Introduction to Automata Theory, Languages, and Computation.</li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;strong&gt;ACM/ICPC在线题库集锦&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;网址：&lt;a href=&quot;http://acm.uva.es/简称&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://acm.uva.es/简称&lt;/a&gt;: u
    
    </summary>
    
      <category term="Algorithms" scheme="http://yoursite.com/categories/Algorithms/"/>
    
      <category term="Basic Theory" scheme="http://yoursite.com/categories/Algorithms/Basic-Theory/"/>
    
      <category term="Programming" scheme="http://yoursite.com/categories/Algorithms/Basic-Theory/Programming/"/>
    
    
      <category term="Algorithms" scheme="http://yoursite.com/tags/Algorithms/"/>
    
      <category term="ACM-ICPC" scheme="http://yoursite.com/tags/ACM-ICPC/"/>
    
      <category term="Online Judge" scheme="http://yoursite.com/tags/Online-Judge/"/>
    
  </entry>
  
  <entry>
    <title>A Monte Carlo Primer</title>
    <link href="http://yoursite.com/2010/12/25/a-monte-carlo-primer/"/>
    <id>http://yoursite.com/2010/12/25/a-monte-carlo-primer/</id>
    <published>2010-12-25T06:38:13.000Z</published>
    <updated>2016-10-23T13:39:54.000Z</updated>
    
    <content type="html"><![CDATA[<ul>
<li>蒙特卡罗算法判断素数，前提：n&gt;3</li>
<li>费尔马小定理：如果p是素数，且0&lt;a&lt;p,则a的p-1次方模p恒等于1</li>
<li>二次探测定理：如果p是个素，,且0&lt;x&lt;p,则方程（x平房模p=1）的解为 x=1或p-1<br><div id="codeSnippetWrapper" style="text-align:left;line-height:12pt;background-color:#f4f4f4;width:97.5%;font-family:'Courier New', courier, monospace;direction:ltr;max-height:400px;font-size:8pt;overflow:auto;cursor:text;border:silver 1px solid;margin:20px 0 10px;padding:4px;"><br><div id="codeSnippet" style="text-align:left;line-height:12pt;background-color:#f4f4f4;width:100%;font-family:'Courier New', courier, monospace;direction:ltr;color:black;font-size:8pt;overflow:visible;border-style:none;padding:0;"><br><pre style="text-align:left;line-height:12pt;background-color:white;width:100%;"><span style="color:#cc6633;">#include</span> &lt;iostream&gt;</pre><!--CRLF-->
<pre style="text-align:left;line-height:12pt;background-color:#f4f4f4;width:100%;"><span style="color:#cc6633;">#include</span> &lt;ctime&gt;</pre><!--CRLF-->
<pre style="text-align:left;line-height:12pt;background-color:white;width:100%;"><span style="color:#cc6633;">#include</span> &lt;cstdlib&gt;</pre><!--CRLF-->
<pre style="text-align:left;line-height:12pt;background-color:#f4f4f4;width:100%;"><span style="color:#0000ff;">using</span> <span style="color:#0000ff;">namespace</span> std;</pre><!--CRLF-->
<pre style="text-align:left;line-height:12pt;background-color:white;width:100%;"><span style="color:#0000ff;">void</span> power(<span style="color:#0000ff;">unsigned</span> <span style="color:#0000ff;">int</span> a,<span style="color:#0000ff;">unsigned</span> <span style="color:#0000ff;">int</span> p,<span style="color:#0000ff;">unsigned</span> <span style="color:#0000ff;">int</span> n,<span style="color:#0000ff;">unsigned</span> <span style="color:#0000ff;">int</span> &amp;result,<span style="color:#0000ff;">bool</span> &amp;composite)</pre><!--CRLF-->
<pre style="text-align:left;line-height:12pt;background-color:#f4f4f4;width:100%;">{</pre><!--CRLF-->
<pre style="text-align:left;line-height:12pt;background-color:white;width:100%;">    <span style="color:#008000;">//对n的二次探测</span></pre><!--CRLF-->
<pre style="text-align:left;line-height:12pt;background-color:#f4f4f4;width:100%;">    <span style="color:#0000ff;">unsigned</span> <span style="color:#0000ff;">int</span> x;</pre><!--CRLF-->
<pre style="text-align:left;line-height:12pt;background-color:white;width:100%;">    <span style="color:#0000ff;">if</span>(p==0)</pre><!--CRLF-->
<pre style="text-align:left;line-height:12pt;background-color:#f4f4f4;width:100%;">    result=1;</pre><!--CRLF-->
<pre style="text-align:left;line-height:12pt;background-color:white;width:100%;">    <span style="color:#0000ff;">else</span></pre><!--CRLF-->
<pre style="text-align:left;line-height:12pt;background-color:#f4f4f4;width:100%;">    {</pre><!--CRLF-->
<pre style="text-align:left;line-height:12pt;background-color:white;width:100%;">        power(a,p/2,n,x,composite);</pre><!--CRLF-->
<pre style="text-align:left;line-height:12pt;background-color:#f4f4f4;width:100%;">        result=(x*x)%n;</pre><!--CRLF-->
<pre style="text-align:left;line-height:12pt;background-color:white;width:100%;">        <span style="color:#0000ff;">if</span>((result==1)&amp;&amp;(x!=1)&amp;&amp;(x!=n-1))</pre><!--CRLF-->
<pre style="text-align:left;line-height:12pt;background-color:#f4f4f4;width:100%;">        composite=true;</pre><!--CRLF-->
<pre style="text-align:left;line-height:12pt;background-color:white;width:100%;">        <span style="color:#0000ff;">if</span>((p%2)==1)</pre><!--CRLF-->
<pre style="text-align:left;line-height:12pt;background-color:#f4f4f4;width:100%;">        result=(result*a)%n;</pre><!--CRLF-->
<pre style="text-align:left;line-height:12pt;background-color:white;width:100%;">    }</pre><!--CRLF-->
<pre style="text-align:left;line-height:12pt;background-color:#f4f4f4;width:100%;">}<span style="color:#008000;">//求a的p次方模n </span></pre><!--CRLF-->
<pre style="text-align:left;line-height:12pt;background-color:white;width:100%;"><span style="color:#008000;">//判定素数的motecarlo算法</span></pre><!--CRLF-->
<pre style="text-align:left;line-height:12pt;background-color:#f4f4f4;width:100%;"><span style="color:#0000ff;">bool</span> Prime(<span style="color:#0000ff;">unsigned</span> <span style="color:#0000ff;">int</span> n)</pre><!--CRLF-->
<pre style="text-align:left;line-height:12pt;background-color:white;width:100%;">{</pre><!--CRLF-->
<pre style="text-align:left;line-height:12pt;background-color:#f4f4f4;width:100%;">    <span style="color:#0000ff;">unsigned</span> <span style="color:#0000ff;">int</span> a,result;srand(time(0));</pre><!--CRLF-->
<pre style="text-align:left;line-height:12pt;background-color:white;width:100%;">    <span style="color:#0000ff;">bool</span> composite=false;</pre><!--CRLF-->
<pre style="text-align:left;line-height:12pt;background-color:#f4f4f4;width:100%;">    a=rand()%(n-3)+2;</pre><!--CRLF-->
<pre style="text-align:left;line-height:12pt;background-color:white;width:100%;">    power(a,n-1,n,result,composite);</pre><!--CRLF-->
<pre style="text-align:left;line-height:12pt;background-color:#f4f4f4;width:100%;">    <span style="color:#0000ff;">if</span>(composite||(result!=1))<span style="color:#0000ff;">return</span> false;</pre><!--CRLF-->
<pre style="text-align:left;line-height:12pt;background-color:white;width:100%;">    <span style="color:#0000ff;">else</span> <span style="color:#0000ff;">return</span> true;</pre><!--CRLF-->
<pre style="text-align:left;line-height:12pt;background-color:#f4f4f4;width:100%;">}</pre><!--CRLF-->
</div></div></li>
</ul>
<p><br></p>
]]></content>
    
    <summary type="html">
    
      &lt;ul&gt;
&lt;li&gt;蒙特卡罗算法判断素数，前提：n&amp;gt;3&lt;/li&gt;
&lt;li&gt;费尔马小定理：如果p是素数，且0&amp;lt;a&amp;lt;p,则a的p-1次方模p恒等于1&lt;/li&gt;
&lt;li&gt;二次探测定理：如果p是个素，,且0&amp;lt;x&amp;lt;p,则方程（x平房模p=1）的解为 x=1或p-
    
    </summary>
    
      <category term="Algorithms" scheme="http://yoursite.com/categories/Algorithms/"/>
    
      <category term="Programming" scheme="http://yoursite.com/categories/Algorithms/Programming/"/>
    
    
      <category term="Algorithms" scheme="http://yoursite.com/tags/Algorithms/"/>
    
      <category term="Monte Carlo" scheme="http://yoursite.com/tags/Monte-Carlo/"/>
    
      <category term="Primer" scheme="http://yoursite.com/tags/Primer/"/>
    
  </entry>
  
  <entry>
    <title>10^7! Problem – Stirling&#39;s Formula</title>
    <link href="http://yoursite.com/2010/12/25/107-problem-stirlings-formula/"/>
    <id>http://yoursite.com/2010/12/25/107-problem-stirlings-formula/</id>
    <published>2010-12-25T06:31:26.000Z</published>
    <updated>2016-10-23T13:39:54.000Z</updated>
    
    <content type="html"><![CDATA[<blockquote>
<p>斯特林公式：lnξ = ξ<em>lnξ－ξ+0.5</em>ln(2ξ*PI)<br>ξ的阶乘的位数等于：log10(ξ!)取整后加1，log10(ξ!) = lnξ! / ln(10)。</p>
<p><div id="codeSnippetWrapper" style="text-align:left;line-height:12pt;background-color:#f4f4f4;width:97.5%;font-family:'Courier New', courier, monospace;direction:ltr;max-height:400px;font-size:8pt;overflow:auto;cursor:text;border:silver 1px solid;margin:20px 0 10px;padding:4px;"></div></p>
<p><div id="codeSnippet" style="text-align:left;line-height:12pt;background-color:#f4f4f4;width:100%;font-family:'Courier New', courier, monospace;direction:ltr;color:black;font-size:8pt;overflow:visible;border-style:none;padding:0;"></div></p>
<p><pre style="text-align:left;line-height:12pt;background-color:white;width:100%;">#include&lt;stdio.h&gt;</pre><br><!--CRLF--></p>
<p><pre style="text-align:left;line-height:12pt;background-color:#f4f4f4;width:100%;">#include&lt;math.h&gt;</pre><br><!--CRLF--></p>
<p><pre style="text-align:left;line-height:12pt;background-color:white;width:100%;"><span style="color:#cc6633;">#define</span> PI 3.14159265</pre><br><!--CRLF--></p>
<p><pre style="text-align:left;line-height:12pt;background-color:#f4f4f4;width:100%;"><span style="color:#cc6633;">#define</span> N 10000000</pre><br><!--CRLF--></p>
<p><pre style="text-align:left;line-height:12pt;background-color:white;width:100%;"><span style="color:#0000ff;">int</span> main(){</pre><br><!--CRLF--></p>
<p><pre style="text-align:left;line-height:12pt;background-color:#f4f4f4;width:100%;">    <span style="color:#0000ff;">int</span> len;</pre><br><!--CRLF--></p>
</blockquote>
<!--CRLF-->
<p><pre style="text-align:left;line-height:12pt;background-color:#f4f4f4;width:100%;">    len=ceil((N<em>log(N)-N+log(2</em>N*PI)/2)/log(10));</pre><br><!--CRLF--></p>
<p><pre style="text-align:left;line-height:12pt;background-color:white;width:100%;">    <span style="color:#008000;">//ceil求上界，即不小于某值的最小整数</span></pre><br><!--CRLF--></p>
<p><pre style="text-align:left;line-height:12pt;background-color:#f4f4f4;width:100%;">    <span style="color:#008000;">//log在c语言里面是自然对数</span></pre><br><!--CRLF--></p>
<p><pre style="text-align:left;line-height:12pt;background-color:white;width:100%;">    printf(<span style="color:#006080;">“%d\n”</span>,len);</pre><br><!--CRLF--></p>
<p><pre style="text-align:left;line-height:12pt;background-color:#f4f4f4;width:100%;">    <span style="color:#0000ff;">return</span> 0;</pre><br><!--CRLF--></p>
<p><pre style="text-align:left;line-height:12pt;background-color:white;width:100%;">}</pre><br><!--CRLF--></p>
<p><pre style="text-align:left;line-height:12pt;background-color:#f4f4f4;width:100%;">//len=65657060</pre><br><!--CRLF--></p>
<p><br></p>
]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;斯特林公式：lnξ = ξ&lt;em&gt;lnξ－ξ+0.5&lt;/em&gt;ln(2ξ*PI)&lt;br&gt;ξ的阶乘的位数等于：log10(ξ!)取整后加1，log10(ξ!) = lnξ! / ln(10)。&lt;/p&gt;
&lt;p&gt;&lt;div id=&quot;codeSnippetW
    
    </summary>
    
      <category term="Algorithms" scheme="http://yoursite.com/categories/Algorithms/"/>
    
      <category term="Programming" scheme="http://yoursite.com/categories/Algorithms/Programming/"/>
    
    
      <category term="Algorithms" scheme="http://yoursite.com/tags/Algorithms/"/>
    
      <category term="Stirling&#39;s Formula" scheme="http://yoursite.com/tags/Stirling-s-Formula/"/>
    
  </entry>
  
  <entry>
    <title>Josephus Problem</title>
    <link href="http://yoursite.com/2010/12/25/josephus-problem/"/>
    <id>http://yoursite.com/2010/12/25/josephus-problem/</id>
    <published>2010-12-25T06:09:13.000Z</published>
    <updated>2016-10-23T13:39:54.000Z</updated>
    
    <content type="html"><![CDATA[<p>问题描述：n个人（编号0~(n-1))，从0开始报数，报到(m-1)的退出，剩下的人继续从0开始报数。求胜利者的编号。</p>
<p>我们知道第一个人(编号一定是m%n-1) 出列之后，剩下的n-1个人组成了一个新的约瑟夫环（以编号为k=m%n的人开始）：k  k+1 … n-2, n-1, 0, 1, 2, … k-2，并且从k开始报0。</p>
<p>现在我们把他们的编号做一下转换：<br>k        –&gt; 0<br>k+1   –&gt; 1<br>k+2   –&gt; 2<br>…<br>k-2   –&gt; n-2<br>k-1   –&gt; n-1</p>
<p>变换后就完完全全成为了(n-1)个人报数的子问题，假如我们知道这个子问题的解：例如x是最终的胜利者，那么根据上面这个表把这个x变回去：x=(x+k)%n。</p>
<p>递推公式：令f[i]表示i个人玩游戏报m退出最后胜利者的编号，最后的结果自然是f[n]：</p>
<p>f[1]=0;<br>f[i]=(f[i-1]+m)%i;  (i&gt;1)</p>
<div id="codeSnippetWrapper" style="text-align:left;line-height:12pt;background-color:#f4f4f4;width:97.5%;font-family:'Courier New', courier, monospace;direction:ltr;max-height:400px;font-size:8pt;overflow:auto;cursor:text;border:silver 1px solid;margin:20px 0 10px;padding:4px;"><br><div id="codeSnippet" style="text-align:left;line-height:12pt;background-color:#f4f4f4;width:100%;font-family:'Courier New', courier, monospace;direction:ltr;color:black;font-size:8pt;overflow:visible;border-style:none;padding:0;"><br><pre style="text-align:left;line-height:12pt;background-color:white;width:100%;"><span style="color:#cc6633;">#include</span> &lt;stdio.h&gt;</pre><br><!--CRLF--><br><pre style="text-align:left;line-height:12pt;background-color:#f4f4f4;width:100%;"></pre><br><!--CRLF--><br><pre style="text-align:left;line-height:12pt;background-color:white;width:100%;"><span style="color:#0000ff;">int</span> main()</pre><br><!--CRLF--><br><pre style="text-align:left;line-height:12pt;background-color:#f4f4f4;width:100%;">{</pre><br><!--CRLF--><br><pre style="text-align:left;line-height:12pt;background-color:white;width:100%;">  <span style="color:#0000ff;">int</span> n, m, i, s=0;</pre><br><!--CRLF--><br><pre style="text-align:left;line-height:12pt;background-color:#f4f4f4;width:100%;">  scanf(<span style="color:#006080;">“%d%d”</span>, &amp;n, &amp;m);</pre><br><!--CRLF--><br><pre style="text-align:left;line-height:12pt;background-color:white;width:100%;">  <span style="color:#0000ff;">for</span> (i=2; i&lt;=n; i++) s=(s+m)%i;</pre><br><!--CRLF--><br><pre style="text-align:left;line-height:12pt;background-color:#f4f4f4;width:100%;">  printf (<span style="color:#006080;">“The winner is %d\n”</span>, s+1);</pre><br><!--CRLF--><br><pre style="text-align:left;line-height:12pt;background-color:white;width:100%;">  <span style="color:#0000ff;">return</span> 0;</pre><br><!--CRLF--><br><pre style="text-align:left;line-height:12pt;background-color:#f4f4f4;width:100%;">}</pre><br><!--CRLF--><br><br></div><br></div>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;问题描述：n个人（编号0~(n-1))，从0开始报数，报到(m-1)的退出，剩下的人继续从0开始报数。求胜利者的编号。&lt;/p&gt;
&lt;p&gt;我们知道第一个人(编号一定是m%n-1) 出列之后，剩下的n-1个人组成了一个新的约瑟夫环（以编号为k=m%n的人开始）：k  k+1 … 
    
    </summary>
    
      <category term="Algorithms" scheme="http://yoursite.com/categories/Algorithms/"/>
    
      <category term="Programming" scheme="http://yoursite.com/categories/Algorithms/Programming/"/>
    
    
      <category term="Algorithms" scheme="http://yoursite.com/tags/Algorithms/"/>
    
      <category term="Josephus" scheme="http://yoursite.com/tags/Josephus/"/>
    
  </entry>
  
</feed>
